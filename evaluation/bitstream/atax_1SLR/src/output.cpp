#include "output_2.h"

#define READ_RANGE(Arr, data_size, l)                                          \
  (Arr.data.range((data_size) * (l) + (data_size) - 1, (data_size) * (l)))

/****************************************************
 This file was automatically generated by Prometheus
****************************************************/
void load_vA_for_task3(hls::stream<float16> &fifo_A_from_off_chip_to_S3,
                       float16 vA[10192]) {
#pragma HLS inline off
  for (int i = 0; i < 10192; i++) {
#pragma HLS pipeline II = 1
    fifo_A_from_off_chip_to_S3.write(vA[i]);
  }
}

void load_vx_for_task1(hls::stream<float16> &fifo_x_from_off_chip_to_S1,
                       float16 vx[26]) {
#pragma HLS inline off
  for (int i = 0; i < 26; i++) {
#pragma HLS pipeline II = 1
    fifo_x_from_off_chip_to_S1.write(vx[i]);
  }
}

void load_vA_for_task1(hls::stream<float16> &fifo_A_from_off_chip_to_S1,
                       float16 vA[10192]) {
#pragma HLS inline off
  for (int i = 0; i < 10192; i++) {
#pragma HLS pipeline II = 1
    fifo_A_from_off_chip_to_S1.write(vA[i]);
  }
}

void store_vtmp_for_task1(hls::stream<float8> &fifo_tmp_to_off_chip,
                          float8 vtmp[49]) {
#pragma HLS inline off
  for (int i = 0; i < 49; i++) {
#pragma HLS pipeline II = 1
    vtmp[i] = fifo_tmp_to_off_chip.read();
  }
}

void store_vy_for_task3(hls::stream<float16> &fifo_y_to_off_chip,
                        float16 vy[26]) {
#pragma HLS inline off
  for (int i = 0; i < 26; i++) {
#pragma HLS pipeline II = 1
    vy[i] = fifo_y_to_off_chip.read();
  }
}

void compute_FT0_level0(hls::stream<float8> &fifo_tmp_from_task1_to_task3,
                        hls::stream<float16> &fifo_x_from_off_chip_to_S1,
                        hls::stream<float16> &fifo_A_from_off_chip_to_S1,
                        hls::stream<float8> &fifo_tmp_to_off_chip, int i0,
                        float tmp_0[56], float tmp_1[56], float A[392][416],
                        float x[416]) {
#pragma HLS inline off
#pragma HLS dataflow
  task0_intra(tmp_0, A, x, i0);
  task1_intra(tmp_0, A, x, i0);
  write_tmp_FT0(tmp_1, fifo_tmp_from_task1_to_task3, i0 - 1);
  write_tmp_FT0(tmp_1, fifo_tmp_to_off_chip, i0 - 1);
}

void FT0_level0(hls::stream<float8> &fifo_tmp_from_task1_to_task3,
                hls::stream<float16> &fifo_x_from_off_chip_to_S1,
                hls::stream<float16> &fifo_A_from_off_chip_to_S1,
                hls::stream<float8> &fifo_tmp_to_off_chip) {
#pragma HLS inline off
  float tmp_0[56];
  // FT0
#pragma HLS array_partition variable = tmp_0 cyclic factor = 56 dim = 1
  float tmp_1[56];
  // FT0
#pragma HLS array_partition variable = tmp_1 cyclic factor = 56 dim = 1
  float A[392][416];
#pragma HLS array_partition variable = A cyclic factor = 56 dim = 1
#pragma HLS array_partition variable = A cyclic factor = 4 dim = 2
  float x[416];
#pragma HLS array_partition variable = x cyclic factor = 4 dim = 1
  read_A_FT0(A, fifo_A_from_off_chip_to_S1);
  read_x_FT0(x, fifo_x_from_off_chip_to_S1);
  for (int i0 = 0; i0 < 7; i0++) {

    if (i0 % 2 == 0) {
      //     task0_intra(tmp_0, A, x, i0);
      //     task1_intra(tmp_0, A, x, i0);
      //     write_tmp_FT0(tmp_1, fifo_tmp_from_task1_to_task3, i0-1);
      //     write_tmp_FT0(tmp_1, fifo_tmp_to_off_chip, i0-1);
      compute_FT0_level0(fifo_tmp_from_task1_to_task3,
                         fifo_x_from_off_chip_to_S1, fifo_A_from_off_chip_to_S1,
                         fifo_tmp_to_off_chip, i0, tmp_0, tmp_1, A, x);
    } else if (i0 % 2 == 1) {
      //     task0_intra(tmp_1, A, x, i0);
      //     task1_intra(tmp_1, A, x, i0);
      //     write_tmp_FT0(tmp_0, fifo_tmp_from_task1_to_task3, i0-1);
      //     write_tmp_FT0(tmp_0, fifo_tmp_to_off_chip, i0-1);
      compute_FT0_level0(fifo_tmp_from_task1_to_task3,
                         fifo_x_from_off_chip_to_S1, fifo_A_from_off_chip_to_S1,
                         fifo_tmp_to_off_chip, i0, tmp_1, tmp_0, A, x);
    }
  }
  write_tmp_FT0(tmp_0, fifo_tmp_from_task1_to_task3, 6);
  write_tmp_FT0(tmp_0, fifo_tmp_to_off_chip, 6);
}
void compute_FT1_level0(hls::stream<float8> &fifo_tmp_from_task1_to_task3,
                        hls::stream<float16> &fifo_A_from_off_chip_to_S3,
                        hls::stream<float16> &fifo_y_to_off_chip, int j0,
                        float y_0[16], float y_1[16], float A_0[392][16],
                        float A_1[392][16], float tmp[392]) {
#pragma HLS inline off
#pragma HLS dataflow
  read_A_FT1(A_1, fifo_A_from_off_chip_to_S3, j0 + 1);
  task2_intra(y_0, A_0, tmp, j0);
  task3_intra(y_0, A_0, tmp, j0);
  write_y_FT1(y_1, fifo_y_to_off_chip, j0 - 1);
}

void FT1_level0(hls::stream<float8> &fifo_tmp_from_task1_to_task3,
                hls::stream<float16> &fifo_A_from_off_chip_to_S3,
                hls::stream<float16> &fifo_y_to_off_chip) {
#pragma HLS inline off
  float y_0[16];
  // FT1
#pragma HLS array_partition variable = y_0 cyclic factor = 16 dim = 1
  float y_1[16];
  // FT1
#pragma HLS array_partition variable = y_1 cyclic factor = 16 dim = 1
  float A_0[392][16];
  // FT1
#pragma HLS array_partition variable = A_0 cyclic factor = 14 dim = 1
#pragma HLS array_partition variable = A_0 cyclic factor = 16 dim = 2
  float A_1[392][16];
  // FT1
#pragma HLS array_partition variable = A_1 cyclic factor = 14 dim = 1
#pragma HLS array_partition variable = A_1 cyclic factor = 16 dim = 2
  float tmp[392];
#pragma HLS array_partition variable = tmp cyclic factor = 14 dim = 1
  read_tmp_FT1(tmp, fifo_tmp_from_task1_to_task3);
  read_A_FT1(A_0, fifo_A_from_off_chip_to_S3, 0);
  for (int j0 = 0; j0 < 26; j0++) {

    if (j0 % 2 == 0) {
      //     read_A_FT1(A_1, fifo_A_from_off_chip_to_S3, j0+1);
      //     task2_intra(y_0, A_0, tmp, j0);
      //     task3_intra(y_0, A_0, tmp, j0);
      //     write_y_FT1(y_1, fifo_y_to_off_chip, j0-1);
      compute_FT1_level0(fifo_tmp_from_task1_to_task3,
                         fifo_A_from_off_chip_to_S3, fifo_y_to_off_chip, j0,
                         y_0, y_1, A_0, A_1, tmp);
    } else if (j0 % 2 == 1) {
      //     read_A_FT1(A_0, fifo_A_from_off_chip_to_S3, j0+1);
      //     task2_intra(y_1, A_1, tmp, j0);
      //     task3_intra(y_1, A_1, tmp, j0);
      //     write_y_FT1(y_0, fifo_y_to_off_chip, j0-1);
      compute_FT1_level0(fifo_tmp_from_task1_to_task3,
                         fifo_A_from_off_chip_to_S3, fifo_y_to_off_chip, j0,
                         y_1, y_0, A_1, A_0, tmp);
    }
  }
  write_y_FT1(y_1, fifo_y_to_off_chip, 25);
}
void task0_intra(float tmp[56], float A[392][416], float x[416], int i0) {
#pragma HLS inline off
  int i;
  for (int i1 = 0; i1 < 56; i1++) {
#pragma HLS unroll
    i = i0 * 56 + i1;
    tmp[i1] = 0.0;
  }
}

void task1_intra(float tmp[56], float A[392][416], float x[416], int i0) {
#pragma HLS inline off
  int i;
  int j;
  for (int j0 = 0; j0 < 104; j0++) {
#pragma HLS pipeline II = 2
    for (int i1 = 0; i1 < 56; i1++) {
#pragma HLS unroll
      for (int j1 = 0; j1 < 4; j1++) {
#pragma HLS unroll
        i = i0 * 56 + i1;
        j = j0 * 4 + j1;
        tmp[i1] = tmp[i1] + A[i][j] * x[j];
      }
    }
  }
}

void task2_intra(float y[16], float A[392][16], float tmp[392], int j0) {
#pragma HLS inline off
  int j;
  for (int j1 = 0; j1 < 16; j1++) {
#pragma HLS unroll
    j = j0 * 16 + j1;
    y[j1] = 0.0;
  }
}

void task3_intra(float y[16], float A[392][16], float tmp[392], int j0) {
#pragma HLS inline off
  int j;
  int i;
  for (int i0 = 0; i0 < 28; i0++) {
#pragma HLS pipeline II = 2
    for (int j1 = 0; j1 < 16; j1++) {
#pragma HLS unroll
      for (int i1 = 0; i1 < 14; i1++) {
#pragma HLS unroll
        j = j0 * 16 + j1;
        i = i0 * 14 + i1;
        y[j1] = y[j1] + A[i][j1] * tmp[i];
      }
    }
  }
}

void read_A_FT0(float A[392][416],
                hls::stream<float16> &fifo_A_from_off_chip_to_S1) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 392; d0++) {
    for (int d1 = 0; d1 < 416; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_A_from_off_chip_to_S1.read();
      A[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      A[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      A[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      A[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      A[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      A[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      A[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      A[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      A[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      A[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      A[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      A[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      A[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      A[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      A[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      A[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}

void read_x_FT0(float x[416],
                hls::stream<float16> &fifo_x_from_off_chip_to_S1) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 416; d0 += 16) {
#pragma HLS pipeline II = 1
    float16 tmp_fifo = fifo_x_from_off_chip_to_S1.read();
    x[d0 + 0 + 0] = tmp_fifo[0];
    x[d0 + 0 + 1] = tmp_fifo[1];
    x[d0 + 0 + 2] = tmp_fifo[2];
    x[d0 + 0 + 3] = tmp_fifo[3];
    x[d0 + 0 + 4] = tmp_fifo[4];
    x[d0 + 0 + 5] = tmp_fifo[5];
    x[d0 + 0 + 6] = tmp_fifo[6];
    x[d0 + 0 + 7] = tmp_fifo[7];
    x[d0 + 0 + 8] = tmp_fifo[8];
    x[d0 + 0 + 9] = tmp_fifo[9];
    x[d0 + 0 + 10] = tmp_fifo[10];
    x[d0 + 0 + 11] = tmp_fifo[11];
    x[d0 + 0 + 12] = tmp_fifo[12];
    x[d0 + 0 + 13] = tmp_fifo[13];
    x[d0 + 0 + 14] = tmp_fifo[14];
    x[d0 + 0 + 15] = tmp_fifo[15];
  }
}

void read_tmp_FT1(float tmp[392],
                  hls::stream<float8> &fifo_tmp_from_task1_to_task3) {
#pragma HLS inline off
  for (int d0_0 = 0; d0_0 < 7; d0_0++) {

    for (int d0_1 = 0; d0_1 < 56; d0_1 += 8) {

      int d0 = d0_0 * 56 + d0_1;
      float8 tmp_fifo = fifo_tmp_from_task1_to_task3.read();
      if (d0 + 0 < 392)
        tmp[d0 + 0 + 0] = tmp_fifo[0];
      if (d0 + 1 < 392)
        tmp[d0 + 0 + 1] = tmp_fifo[1];
      if (d0 + 2 < 392)
        tmp[d0 + 0 + 2] = tmp_fifo[2];
      if (d0 + 3 < 392)
        tmp[d0 + 0 + 3] = tmp_fifo[3];
      if (d0 + 4 < 392)
        tmp[d0 + 0 + 4] = tmp_fifo[4];
      if (d0 + 5 < 392)
        tmp[d0 + 0 + 5] = tmp_fifo[5];
      if (d0 + 6 < 392)
        tmp[d0 + 0 + 6] = tmp_fifo[6];
      if (d0 + 7 < 392)
        tmp[d0 + 0 + 7] = tmp_fifo[7];
    }
  }
}

void read_A_FT1(float A[392][16],
                hls::stream<float16> &fifo_A_from_off_chip_to_S3, int j0) {
#pragma HLS inline off
  if (j0 >= 26) {
    return;
  }
  for (int d0 = 0; d0 < 392; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_A_from_off_chip_to_S3.read();
      A[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      A[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      A[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      A[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      A[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      A[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      A[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      A[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      A[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      A[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      A[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      A[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      A[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      A[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      A[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      A[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}

void write_tmp_FT0(float tmp[56],
                   hls::stream<float8> &fifo_tmp_from_task1_to_task3, int i0) {
#pragma HLS inline off
  if (i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 56; d0 += 8) {
#pragma HLS pipeline II = 1
    float8 tmp_fifo;
    tmp_fifo[0] = tmp[d0 + 0 + 0];
    tmp_fifo[1] = tmp[d0 + 0 + 1];
    tmp_fifo[2] = tmp[d0 + 0 + 2];
    tmp_fifo[3] = tmp[d0 + 0 + 3];
    tmp_fifo[4] = tmp[d0 + 0 + 4];
    tmp_fifo[5] = tmp[d0 + 0 + 5];
    tmp_fifo[6] = tmp[d0 + 0 + 6];
    tmp_fifo[7] = tmp[d0 + 0 + 7];
    fifo_tmp_from_task1_to_task3.write(tmp_fifo);
  }
}

void write_y_FT1(float y[16], hls::stream<float16> &fifo_y_to_off_chip,
                 int j0) {
#pragma HLS inline off
  if (j0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 16; d0 += 16) {
#pragma HLS pipeline II = 1
    float16 tmp_fifo;
    tmp_fifo[0] = y[d0 + 0 + 0];
    tmp_fifo[1] = y[d0 + 0 + 1];
    tmp_fifo[2] = y[d0 + 0 + 2];
    tmp_fifo[3] = y[d0 + 0 + 3];
    tmp_fifo[4] = y[d0 + 0 + 4];
    tmp_fifo[5] = y[d0 + 0 + 5];
    tmp_fifo[6] = y[d0 + 0 + 6];
    tmp_fifo[7] = y[d0 + 0 + 7];
    tmp_fifo[8] = y[d0 + 0 + 8];
    tmp_fifo[9] = y[d0 + 0 + 9];
    tmp_fifo[10] = y[d0 + 0 + 10];
    tmp_fifo[11] = y[d0 + 0 + 11];
    tmp_fifo[12] = y[d0 + 0 + 12];
    tmp_fifo[13] = y[d0 + 0 + 13];
    tmp_fifo[14] = y[d0 + 0 + 14];
    tmp_fifo[15] = y[d0 + 0 + 15];
    fifo_y_to_off_chip.write(tmp_fifo);
  }
}

// extern "C"{
void kernel_nlp(float8 vtmp_for_task1[49], float16 vA_for_task1[10192],
                float16 vA_for_task3[10192], float16 vx_for_task1[26],
                float16 vy_for_task3[26]) {

#pragma HLS INTERFACE m_axi port = vtmp_for_task1 offset = slave bundle =      \
    kernel_vtmp_for_task1
#pragma HLS INTERFACE m_axi port = vA_for_task1 offset = slave bundle =        \
    kernel_vA_for_task1
#pragma HLS INTERFACE m_axi port = vA_for_task3 offset = slave bundle =        \
    kernel_vA_for_task3
#pragma HLS INTERFACE m_axi port = vx_for_task1 offset = slave bundle =        \
    kernel_vx_for_task1
#pragma HLS INTERFACE m_axi port = vy_for_task3 offset = slave bundle =        \
    kernel_vy_for_task3
#pragma HLS INTERFACE s_axilite port = vtmp_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vA_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vA_for_task3 bundle = control
#pragma HLS INTERFACE s_axilite port = vx_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vy_for_task3 bundle = control
#pragma HLS DATA_PACK VARIABLE = vtmp_for_task1
#pragma HLS DATA_PACK VARIABLE = vA_for_task1
#pragma HLS DATA_PACK VARIABLE = vA_for_task3
#pragma HLS DATA_PACK VARIABLE = vx_for_task1
#pragma HLS DATA_PACK VARIABLE = vy_for_task3
#pragma HLS INTERFACE s_axilite port = return bundle = control

#pragma HLS dataflow

  hls::stream<float8> fifo_tmp_from_task1_to_task3;
#pragma HLS stream variable = fifo_tmp_from_task1_to_task3 depth = 512
  hls::stream<float16> fifo_A_from_off_chip_to_S3;
#pragma HLS stream variable = fifo_A_from_off_chip_to_S3 depth = 512
  hls::stream<float16> fifo_x_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_x_from_off_chip_to_S1 depth = 512
  hls::stream<float16> fifo_A_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_A_from_off_chip_to_S1 depth = 512
  hls::stream<float8> fifo_tmp_to_off_chip;
#pragma HLS stream variable = fifo_tmp_to_off_chip depth = 512
  hls::stream<float16> fifo_y_to_off_chip;
#pragma HLS stream variable = fifo_y_to_off_chip depth = 512

  load_vA_for_task3(fifo_A_from_off_chip_to_S3, vA_for_task3);
  load_vx_for_task1(fifo_x_from_off_chip_to_S1, vx_for_task1);
  load_vA_for_task1(fifo_A_from_off_chip_to_S1, vA_for_task1);

  FT0_level0(fifo_tmp_from_task1_to_task3, fifo_x_from_off_chip_to_S1,
             fifo_A_from_off_chip_to_S1, fifo_tmp_to_off_chip);
  FT1_level0(fifo_tmp_from_task1_to_task3, fifo_A_from_off_chip_to_S3,
             fifo_y_to_off_chip);

  store_vtmp_for_task1(fifo_tmp_to_off_chip, vtmp_for_task1);
  store_vy_for_task3(fifo_y_to_off_chip, vy_for_task3);
}
//}
