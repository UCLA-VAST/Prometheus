#include "output.h"

#define READ_RANGE(Arr, data_size, l)                                          \
  (Arr.data.range((data_size) * (l) + (data_size) - 1, (data_size) * (l)))

/****************************************************
 This file was automatically generated by Prometheus
****************************************************/
void load_vr_for_task1(hls::stream<float16> &fifo_r_from_off_chip_to_S1,
                       float16 vr[26]) {
#pragma HLS inline off
  for (int i = 0; i < 26; i++) {
#pragma HLS pipeline II = 1
    fifo_r_from_off_chip_to_S1.write(vr[i]);
  }
}
void load_vr_for_task1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_r_from_off_chip_to_S1,
    float16 vr[26]) {
#pragma HLS inline off
  for (int i = 0; i < 26; i++) {
#pragma HLS pipeline II = 1
    float16 vr_off = vr[i];
    ap_axiu<512, 0, 0, 0> vr_on;
    vr_on.data.range(31, 0) = *(uint32_t *)(&vr_off[0]);
    vr_on.data.range(63, 32) = *(uint32_t *)(&vr_off[1]);
    vr_on.data.range(95, 64) = *(uint32_t *)(&vr_off[2]);
    vr_on.data.range(127, 96) = *(uint32_t *)(&vr_off[3]);
    vr_on.data.range(159, 128) = *(uint32_t *)(&vr_off[4]);
    vr_on.data.range(191, 160) = *(uint32_t *)(&vr_off[5]);
    vr_on.data.range(223, 192) = *(uint32_t *)(&vr_off[6]);
    vr_on.data.range(255, 224) = *(uint32_t *)(&vr_off[7]);
    vr_on.data.range(287, 256) = *(uint32_t *)(&vr_off[8]);
    vr_on.data.range(319, 288) = *(uint32_t *)(&vr_off[9]);
    vr_on.data.range(351, 320) = *(uint32_t *)(&vr_off[10]);
    vr_on.data.range(383, 352) = *(uint32_t *)(&vr_off[11]);
    vr_on.data.range(415, 384) = *(uint32_t *)(&vr_off[12]);
    vr_on.data.range(447, 416) = *(uint32_t *)(&vr_off[13]);
    vr_on.data.range(479, 448) = *(uint32_t *)(&vr_off[14]);
    vr_on.data.range(511, 480) = *(uint32_t *)(&vr_off[15]);
    fifo_r_from_off_chip_to_S1.write(vr_on);
  }
}
void load_vA_for_task1(hls::stream<float16> &fifo_A_from_off_chip_to_S1,
                       float16 vA[10400]) {
#pragma HLS inline off
  for (int i = 0; i < 10400; i++) {
#pragma HLS pipeline II = 1
    fifo_A_from_off_chip_to_S1.write(vA[i]);
  }
}
void load_vA_for_task1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S1,
    float16 vA[10400]) {
#pragma HLS inline off
  for (int i = 0; i < 10400; i++) {
#pragma HLS pipeline II = 1
    float16 vA_off = vA[i];
    ap_axiu<512, 0, 0, 0> vA_on;
    vA_on.data.range(31, 0) = *(uint32_t *)(&vA_off[0]);
    vA_on.data.range(63, 32) = *(uint32_t *)(&vA_off[1]);
    vA_on.data.range(95, 64) = *(uint32_t *)(&vA_off[2]);
    vA_on.data.range(127, 96) = *(uint32_t *)(&vA_off[3]);
    vA_on.data.range(159, 128) = *(uint32_t *)(&vA_off[4]);
    vA_on.data.range(191, 160) = *(uint32_t *)(&vA_off[5]);
    vA_on.data.range(223, 192) = *(uint32_t *)(&vA_off[6]);
    vA_on.data.range(255, 224) = *(uint32_t *)(&vA_off[7]);
    vA_on.data.range(287, 256) = *(uint32_t *)(&vA_off[8]);
    vA_on.data.range(319, 288) = *(uint32_t *)(&vA_off[9]);
    vA_on.data.range(351, 320) = *(uint32_t *)(&vA_off[10]);
    vA_on.data.range(383, 352) = *(uint32_t *)(&vA_off[11]);
    vA_on.data.range(415, 384) = *(uint32_t *)(&vA_off[12]);
    vA_on.data.range(447, 416) = *(uint32_t *)(&vA_off[13]);
    vA_on.data.range(479, 448) = *(uint32_t *)(&vA_off[14]);
    vA_on.data.range(511, 480) = *(uint32_t *)(&vA_off[15]);
    fifo_A_from_off_chip_to_S1.write(vA_on);
  }
}
void load_vA_for_task3(hls::stream<float16> &fifo_A_from_off_chip_to_S3,
                       float16 vA[10400]) {
#pragma HLS inline off
  for (int i = 0; i < 10250; i++) {
#pragma HLS pipeline II = 1
    fifo_A_from_off_chip_to_S3.write(vA[i]);
  }
}
void load_vA_for_task3(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S3,
    float16 vA[10400]) {
#pragma HLS inline off
  for (int i = 0; i < 10250; i++) {
#pragma HLS pipeline II = 1
    float16 vA_off = vA[i];
    ap_axiu<512, 0, 0, 0> vA_on;
    vA_on.data.range(31, 0) = *(uint32_t *)(&vA_off[0]);
    vA_on.data.range(63, 32) = *(uint32_t *)(&vA_off[1]);
    vA_on.data.range(95, 64) = *(uint32_t *)(&vA_off[2]);
    vA_on.data.range(127, 96) = *(uint32_t *)(&vA_off[3]);
    vA_on.data.range(159, 128) = *(uint32_t *)(&vA_off[4]);
    vA_on.data.range(191, 160) = *(uint32_t *)(&vA_off[5]);
    vA_on.data.range(223, 192) = *(uint32_t *)(&vA_off[6]);
    vA_on.data.range(255, 224) = *(uint32_t *)(&vA_off[7]);
    vA_on.data.range(287, 256) = *(uint32_t *)(&vA_off[8]);
    vA_on.data.range(319, 288) = *(uint32_t *)(&vA_off[9]);
    vA_on.data.range(351, 320) = *(uint32_t *)(&vA_off[10]);
    vA_on.data.range(383, 352) = *(uint32_t *)(&vA_off[11]);
    vA_on.data.range(415, 384) = *(uint32_t *)(&vA_off[12]);
    vA_on.data.range(447, 416) = *(uint32_t *)(&vA_off[13]);
    vA_on.data.range(479, 448) = *(uint32_t *)(&vA_off[14]);
    vA_on.data.range(511, 480) = *(uint32_t *)(&vA_off[15]);
    fifo_A_from_off_chip_to_S3.write(vA_on);
  }
}
void load_vp_for_task3(hls::stream<float16> &fifo_p_from_off_chip_to_S3,
                       float16 vp[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    fifo_p_from_off_chip_to_S3.write(vp[i]);
  }
}
void load_vp_for_task3(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_p_from_off_chip_to_S3,
    float16 vp[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    float16 vp_off = vp[i];
    ap_axiu<512, 0, 0, 0> vp_on;
    vp_on.data.range(31, 0) = *(uint32_t *)(&vp_off[0]);
    vp_on.data.range(63, 32) = *(uint32_t *)(&vp_off[1]);
    vp_on.data.range(95, 64) = *(uint32_t *)(&vp_off[2]);
    vp_on.data.range(127, 96) = *(uint32_t *)(&vp_off[3]);
    vp_on.data.range(159, 128) = *(uint32_t *)(&vp_off[4]);
    vp_on.data.range(191, 160) = *(uint32_t *)(&vp_off[5]);
    vp_on.data.range(223, 192) = *(uint32_t *)(&vp_off[6]);
    vp_on.data.range(255, 224) = *(uint32_t *)(&vp_off[7]);
    vp_on.data.range(287, 256) = *(uint32_t *)(&vp_off[8]);
    vp_on.data.range(319, 288) = *(uint32_t *)(&vp_off[9]);
    vp_on.data.range(351, 320) = *(uint32_t *)(&vp_off[10]);
    vp_on.data.range(383, 352) = *(uint32_t *)(&vp_off[11]);
    vp_on.data.range(415, 384) = *(uint32_t *)(&vp_off[12]);
    vp_on.data.range(447, 416) = *(uint32_t *)(&vp_off[13]);
    vp_on.data.range(479, 448) = *(uint32_t *)(&vp_off[14]);
    vp_on.data.range(511, 480) = *(uint32_t *)(&vp_off[15]);
    fifo_p_from_off_chip_to_S3.write(vp_on);
  }
}
void store_vs_for_task1(hls::stream<float16> &fifo_s_to_off_chip,
                        float16 vs[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    vs[i] = fifo_s_to_off_chip.read();
  }
}
void store_vs_for_task1(hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_s_to_off_chip,
                        float16 vs[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    float16 vs_off;
    ap_axiu<512, 0, 0, 0> vs_on = fifo_s_to_off_chip.read();
    uint32_t vs_tmp[16];
    vs_tmp[0] = vs_on.data.range(31, 0);
    vs_off[0] = *(float *)(&vs_tmp[0]);
    vs_tmp[1] = vs_on.data.range(63, 32);
    vs_off[1] = *(float *)(&vs_tmp[1]);
    vs_tmp[2] = vs_on.data.range(95, 64);
    vs_off[2] = *(float *)(&vs_tmp[2]);
    vs_tmp[3] = vs_on.data.range(127, 96);
    vs_off[3] = *(float *)(&vs_tmp[3]);
    vs_tmp[4] = vs_on.data.range(159, 128);
    vs_off[4] = *(float *)(&vs_tmp[4]);
    vs_tmp[5] = vs_on.data.range(191, 160);
    vs_off[5] = *(float *)(&vs_tmp[5]);
    vs_tmp[6] = vs_on.data.range(223, 192);
    vs_off[6] = *(float *)(&vs_tmp[6]);
    vs_tmp[7] = vs_on.data.range(255, 224);
    vs_off[7] = *(float *)(&vs_tmp[7]);
    vs_tmp[8] = vs_on.data.range(287, 256);
    vs_off[8] = *(float *)(&vs_tmp[8]);
    vs_tmp[9] = vs_on.data.range(319, 288);
    vs_off[9] = *(float *)(&vs_tmp[9]);
    vs_tmp[10] = vs_on.data.range(351, 320);
    vs_off[10] = *(float *)(&vs_tmp[10]);
    vs_tmp[11] = vs_on.data.range(383, 352);
    vs_off[11] = *(float *)(&vs_tmp[11]);
    vs_tmp[12] = vs_on.data.range(415, 384);
    vs_off[12] = *(float *)(&vs_tmp[12]);
    vs_tmp[13] = vs_on.data.range(447, 416);
    vs_off[13] = *(float *)(&vs_tmp[13]);
    vs_tmp[14] = vs_on.data.range(479, 448);
    vs_off[14] = *(float *)(&vs_tmp[14]);
    vs_tmp[15] = vs_on.data.range(511, 480);
    vs_off[15] = *(float *)(&vs_tmp[15]);
    vs[i] = vs_off;
  }
}
void store_vq_for_task3(hls::stream<float2> &fifo_q_to_off_chip,
                        float2 vq[205]) {
#pragma HLS inline off
  for (int i = 0; i < 205; i++) {
#pragma HLS pipeline II = 1
    vq[i] = fifo_q_to_off_chip.read();
  }
}
void store_vq_for_task3(hls::stream<ap_axiu<64, 0, 0, 0>> &fifo_q_to_off_chip,
                        float2 vq[205]) {
#pragma HLS inline off
  for (int i = 0; i < 205; i++) {
#pragma HLS pipeline II = 1
    float2 vq_off;
    ap_axiu<64, 0, 0, 0> vq_on = fifo_q_to_off_chip.read();
    uint32_t vq_tmp[2];
    vq_tmp[0] = vq_on.data.range(31, 0);
    vq_off[0] = *(float *)(&vq_tmp[0]);
    vq_tmp[1] = vq_on.data.range(63, 32);
    vq_off[1] = *(float *)(&vq_tmp[1]);
    vq[i] = vq_off;
  }
}

void kernel_nlp_slr0(
    float16 vs_for_task1[25], float16 vr_for_task1[26],
    float16 vA_for_task1[10400], float16 vA_for_task3[10400],
    float2 vq_for_task3[205], float16 vp_for_task3[25],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_r_from_off_chip_to_S1,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S1,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S3,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_p_from_off_chip_to_S3,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_s_to_off_chip,
    hls::stream<ap_axiu<64, 0, 0, 0>> &fifo_q_to_off_chip) {
#pragma HLS INTERFACE axis port = fifo_r_from_off_chip_to_S1
#pragma HLS INTERFACE axis port = fifo_A_from_off_chip_to_S1
#pragma HLS INTERFACE axis port = fifo_A_from_off_chip_to_S3
#pragma HLS INTERFACE axis port = fifo_p_from_off_chip_to_S3
#pragma HLS INTERFACE axis port = fifo_s_to_off_chip
#pragma HLS INTERFACE axis port = fifo_q_to_off_chip
#pragma HLS INTERFACE m_axi port = vs_for_task1 offset = slave bundle =        \
    kernel_vs_for_task1
#pragma HLS INTERFACE m_axi port = vr_for_task1 offset = slave bundle =        \
    kernel_vr_for_task1
#pragma HLS INTERFACE m_axi port = vA_for_task1 offset = slave bundle =        \
    kernel_vA_for_task1
#pragma HLS INTERFACE m_axi port = vA_for_task3 offset = slave bundle =        \
    kernel_vA_for_task3
#pragma HLS INTERFACE m_axi port = vq_for_task3 offset = slave bundle =        \
    kernel_vq_for_task3
#pragma HLS INTERFACE m_axi port = vp_for_task3 offset = slave bundle =        \
    kernel_vp_for_task3
#pragma HLS INTERFACE s_axilite port = vs_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vr_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vA_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vA_for_task3 bundle = control
#pragma HLS INTERFACE s_axilite port = vq_for_task3 bundle = control
#pragma HLS INTERFACE s_axilite port = vp_for_task3 bundle = control
#pragma HLS DATA_PACK VARIABLE = vs_for_task1
#pragma HLS DATA_PACK VARIABLE = vr_for_task1
#pragma HLS DATA_PACK VARIABLE = vA_for_task1
#pragma HLS DATA_PACK VARIABLE = vA_for_task3
#pragma HLS DATA_PACK VARIABLE = vq_for_task3
#pragma HLS DATA_PACK VARIABLE = vp_for_task3
#pragma HLS INTERFACE s_axilite port = return bundle = control
#pragma HLS dataflow
  load_vr_for_task1(fifo_r_from_off_chip_to_S1, vr_for_task1);
  load_vA_for_task1(fifo_A_from_off_chip_to_S1, vA_for_task1);
  load_vA_for_task3(fifo_A_from_off_chip_to_S3, vA_for_task3);
  load_vp_for_task3(fifo_p_from_off_chip_to_S3, vp_for_task3);
  store_vs_for_task1(fifo_s_to_off_chip, vs_for_task1);
  store_vq_for_task3(fifo_q_to_off_chip, vq_for_task3);
}
