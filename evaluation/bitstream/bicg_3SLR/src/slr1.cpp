#include "output.h"

#define READ_RANGE(Arr, data_size, l)                                          \
  (Arr.data.range((data_size) * (l) + (data_size) - 1, (data_size) * (l)))

/****************************************************
 This file was automatically generated by Prometheus
****************************************************/
void compute_FT1_level0(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S3,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_p_from_off_chip_to_S3,
    hls::stream<ap_axiu<64, 0, 0, 0>> &fifo_q_to_off_chip, int i0,
    float q_0[10], float q_1[10], float A_0[10][400], float A_1[10][400],
    float p[400]) {
#pragma HLS inline off
#pragma HLS dataflow
  read_A_FT1(A_1, fifo_A_from_off_chip_to_S3, i0 + 1);
  task2_intra(q_0, A_0, p, i0);
  task3_intra(q_0, A_0, p, i0);
  write_q_FT1(q_1, fifo_q_to_off_chip, i0 - 1);
}
void FT1_level0(hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S3,
                hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_p_from_off_chip_to_S3,
                hls::stream<ap_axiu<64, 0, 0, 0>> &fifo_q_to_off_chip) {
#pragma HLS inline off
  float q_0[10];
  // FT1
#pragma HLS array_partition variable = q_0 cyclic factor = 10 dim = 1
  float q_1[10];
  // FT1
#pragma HLS array_partition variable = q_1 cyclic factor = 10 dim = 1
  float A_0[10][400];
  // FT1
#pragma HLS array_partition variable = A_0 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = A_0 cyclic factor = 20 dim = 2
  float A_1[10][400];
  // FT1
#pragma HLS array_partition variable = A_1 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = A_1 cyclic factor = 20 dim = 2
  float p[400];
#pragma HLS array_partition variable = p cyclic factor = 20 dim = 1
  read_p_FT1(p, fifo_p_from_off_chip_to_S3);
  read_A_FT1(A_0, fifo_A_from_off_chip_to_S3, 0);
  for (int i0 = 0; i0 < 41; i0++) {

    if (i0 % 2 == 0) {
      //     read_A_FT1(A_1, fifo_A_from_off_chip_to_S3, i0+1);
      //     task2_intra(q_0, A_0, p, i0);
      //     task3_intra(q_0, A_0, p, i0);
      //     write_q_FT1(q_1, fifo_q_to_off_chip, i0-1);
      compute_FT1_level0(fifo_A_from_off_chip_to_S3, fifo_p_from_off_chip_to_S3,
                         fifo_q_to_off_chip, i0, q_0, q_1, A_0, A_1, p);
    } else if (i0 % 2 == 1) {
      //     read_A_FT1(A_0, fifo_A_from_off_chip_to_S3, i0+1);
      //     task2_intra(q_1, A_1, p, i0);
      //     task3_intra(q_1, A_1, p, i0);
      //     write_q_FT1(q_0, fifo_q_to_off_chip, i0-1);
      compute_FT1_level0(fifo_A_from_off_chip_to_S3, fifo_p_from_off_chip_to_S3,
                         fifo_q_to_off_chip, i0, q_1, q_0, A_1, A_0, p);
    }
  }
  write_q_FT1(q_0, fifo_q_to_off_chip, 40);
}
void task2_intra(float q[10], float A[10][400], float p[400], int i0) {
#pragma HLS inline off
  int i;
  for (int i1 = 0; i1 < 10; i1++) {
#pragma HLS unroll
    i = i0 * 10 + i1;
    q[i1] = 0.0;
  }
}
void task3_intra(float q[10], float A[10][400], float p[400], int i0) {
#pragma HLS inline off
  int i;
  int j;
  for (int j0 = 0; j0 < 20; j0++) {
#pragma HLS pipeline II = 2
    for (int i1 = 0; i1 < 10; i1++) {
#pragma HLS unroll
      for (int j1 = 0; j1 < 20; j1++) {
#pragma HLS unroll
        i = i0 * 10 + i1;
        j = j0 * 20 + j1;
        q[i1] = q[i1] + A[i1][j] * p[j];
      }
    }
  }
}
void read_p_FT1(float p[400],
                hls::stream<float16> &fifo_p_from_off_chip_to_S3) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 400; d0 += 16) {
#pragma HLS pipeline II = 1
    float16 tmp_fifo = fifo_p_from_off_chip_to_S3.read();
    p[d0 + 0 + 0] = tmp_fifo[0];
    p[d0 + 0 + 1] = tmp_fifo[1];
    p[d0 + 0 + 2] = tmp_fifo[2];
    p[d0 + 0 + 3] = tmp_fifo[3];
    p[d0 + 0 + 4] = tmp_fifo[4];
    p[d0 + 0 + 5] = tmp_fifo[5];
    p[d0 + 0 + 6] = tmp_fifo[6];
    p[d0 + 0 + 7] = tmp_fifo[7];
    p[d0 + 0 + 8] = tmp_fifo[8];
    p[d0 + 0 + 9] = tmp_fifo[9];
    p[d0 + 0 + 10] = tmp_fifo[10];
    p[d0 + 0 + 11] = tmp_fifo[11];
    p[d0 + 0 + 12] = tmp_fifo[12];
    p[d0 + 0 + 13] = tmp_fifo[13];
    p[d0 + 0 + 14] = tmp_fifo[14];
    p[d0 + 0 + 15] = tmp_fifo[15];
  }
}
void read_p_FT1(
    float p[400],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_p_from_off_chip_to_S3) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 400; d0 += 16) {
#pragma HLS pipeline II = 1
    ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_p_from_off_chip_to_S3.read();
    uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
    p[d0 + 0 + 0] = *(float *)(&tmp_0);
    uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
    p[d0 + 0 + 1] = *(float *)(&tmp_1);
    uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
    p[d0 + 0 + 2] = *(float *)(&tmp_2);
    uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
    p[d0 + 0 + 3] = *(float *)(&tmp_3);
    uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
    p[d0 + 0 + 4] = *(float *)(&tmp_4);
    uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
    p[d0 + 0 + 5] = *(float *)(&tmp_5);
    uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
    p[d0 + 0 + 6] = *(float *)(&tmp_6);
    uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
    p[d0 + 0 + 7] = *(float *)(&tmp_7);
    uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
    p[d0 + 0 + 8] = *(float *)(&tmp_8);
    uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
    p[d0 + 0 + 9] = *(float *)(&tmp_9);
    uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
    p[d0 + 0 + 10] = *(float *)(&tmp_10);
    uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
    p[d0 + 0 + 11] = *(float *)(&tmp_11);
    uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
    p[d0 + 0 + 12] = *(float *)(&tmp_12);
    uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
    p[d0 + 0 + 13] = *(float *)(&tmp_13);
    uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
    p[d0 + 0 + 14] = *(float *)(&tmp_14);
    uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
    p[d0 + 0 + 15] = *(float *)(&tmp_15);
  }
}
void read_A_FT1(float A[10][400],
                hls::stream<float16> &fifo_A_from_off_chip_to_S3, int i0) {
#pragma HLS inline off
  if (i0 >= 41) {
    return;
  }
  for (int d0 = 0; d0 < 10; d0++) {
    for (int d1 = 0; d1 < 400; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_A_from_off_chip_to_S3.read();
      A[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      A[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      A[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      A[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      A[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      A[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      A[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      A[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      A[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      A[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      A[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      A[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      A[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      A[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      A[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      A[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}
void read_A_FT1(float A[10][400],
                hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S3,
                int i0) {
#pragma HLS inline off
  if (i0 >= 41) {
    return;
  }
  for (int d0 = 0; d0 < 10; d0++) {
    for (int d1 = 0; d1 < 400; d1 += 16) {
#pragma HLS pipeline II = 1
      ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_A_from_off_chip_to_S3.read();
      uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
      A[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
      uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
      A[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
      uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
      A[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
      uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
      A[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
      uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
      A[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
      uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
      A[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
      uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
      A[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
      uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
      A[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
      uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
      A[d0 + 0][d1 + 0 + 8] = *(float *)(&tmp_8);
      uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
      A[d0 + 0][d1 + 0 + 9] = *(float *)(&tmp_9);
      uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
      A[d0 + 0][d1 + 0 + 10] = *(float *)(&tmp_10);
      uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
      A[d0 + 0][d1 + 0 + 11] = *(float *)(&tmp_11);
      uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
      A[d0 + 0][d1 + 0 + 12] = *(float *)(&tmp_12);
      uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
      A[d0 + 0][d1 + 0 + 13] = *(float *)(&tmp_13);
      uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
      A[d0 + 0][d1 + 0 + 14] = *(float *)(&tmp_14);
      uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
      A[d0 + 0][d1 + 0 + 15] = *(float *)(&tmp_15);
    }
  }
}
void write_q_FT1(float q[10], hls::stream<float2> &fifo_q_to_off_chip, int i0) {
#pragma HLS inline off
  if (i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 10; d0 += 2) {
#pragma HLS pipeline II = 1
    float2 tmp_fifo;
    tmp_fifo[0] = q[d0 + 0 + 0];
    tmp_fifo[1] = q[d0 + 0 + 1];
    fifo_q_to_off_chip.write(tmp_fifo);
  }
}
void write_q_FT1(float q[10],
                 hls::stream<ap_axiu<64, 0, 0, 0>> &fifo_q_to_off_chip,
                 int i0) {
#pragma HLS inline off
  if (i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 10; d0 += 2) {
#pragma HLS pipeline II = 1
    ap_axiu<64, 0, 0, 0> tmp_fifo;
    float tmp_0 = q[d0 + 0 + 0];
    tmp_fifo.data.range(31, 0) = *(uint32_t *)(&tmp_0);
    float tmp_1 = q[d0 + 0 + 1];
    tmp_fifo.data.range(63, 32) = *(uint32_t *)(&tmp_1);
    fifo_q_to_off_chip.write(tmp_fifo);
  }
}

void kernel_nlp_slr1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S3,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_p_from_off_chip_to_S3,
    hls::stream<ap_axiu<64, 0, 0, 0>> &fifo_q_to_off_chip) {
#pragma HLS interface ap_ctrl_none port = return
#pragma HLS inline off
#pragma HLS INTERFACE axis port = fifo_A_from_off_chip_to_S3
#pragma HLS INTERFACE axis port = fifo_p_from_off_chip_to_S3
#pragma HLS INTERFACE axis port = fifo_q_to_off_chip
  FT1_level0(fifo_A_from_off_chip_to_S3, fifo_p_from_off_chip_to_S3,
             fifo_q_to_off_chip);
}
