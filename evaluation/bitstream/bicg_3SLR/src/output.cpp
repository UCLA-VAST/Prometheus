#include "output_2.h"

#define READ_RANGE(Arr, data_size, l)                                          \
  (Arr.data.range((data_size) * (l) + (data_size) - 1, (data_size) * (l)))

/****************************************************
 This file was automatically generated by Prometheus
****************************************************/
void load_vr_for_task1(hls::stream<float16> &fifo_r_from_off_chip_to_S1,
                       float16 vr[26]) {
#pragma HLS inline off
  for (int i = 0; i < 26; i++) {
#pragma HLS pipeline II = 1
    fifo_r_from_off_chip_to_S1.write(vr[i]);
  }
}

void load_vA_for_task1(hls::stream<float16> &fifo_A_from_off_chip_to_S1,
                       float16 vA[10400]) {
#pragma HLS inline off
  for (int i = 0; i < 10400; i++) {
#pragma HLS pipeline II = 1
    fifo_A_from_off_chip_to_S1.write(vA[i]);
  }
}

void load_vA_for_task3(hls::stream<float16> &fifo_A_from_off_chip_to_S3,
                       float16 vA[10400]) {
#pragma HLS inline off
  for (int i = 0; i < 10250; i++) {
#pragma HLS pipeline II = 1
    fifo_A_from_off_chip_to_S3.write(vA[i]);
  }
}

void load_vp_for_task3(hls::stream<float16> &fifo_p_from_off_chip_to_S3,
                       float16 vp[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    fifo_p_from_off_chip_to_S3.write(vp[i]);
  }
}

void store_vs_for_task1(hls::stream<float16> &fifo_s_to_off_chip,
                        float16 vs[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    vs[i] = fifo_s_to_off_chip.read();
  }
}

void store_vq_for_task3(hls::stream<float2> &fifo_q_to_off_chip,
                        float2 vq[205]) {
#pragma HLS inline off
  for (int i = 0; i < 205; i++) {
#pragma HLS pipeline II = 1
    vq[i] = fifo_q_to_off_chip.read();
  }
}

void compute_FT0_level0(hls::stream<float16> &fifo_r_from_off_chip_to_S1,
                        hls::stream<float16> &fifo_A_from_off_chip_to_S1,
                        hls::stream<float16> &fifo_s_to_off_chip, int j0,
                        float s_0[16], float s_1[16], float A_0[416][16],
                        float A_1[416][16], float r[416]) {
#pragma HLS inline off
#pragma HLS dataflow
  read_A_FT0(A_1, fifo_A_from_off_chip_to_S1, j0 + 1);
  task0_intra(s_0, A_0, r, j0);
  task1_intra(s_0, A_0, r, j0);
  write_s_FT0(s_1, fifo_s_to_off_chip, j0 - 1);
}

void FT0_level0(hls::stream<float16> &fifo_r_from_off_chip_to_S1,
                hls::stream<float16> &fifo_A_from_off_chip_to_S1,
                hls::stream<float16> &fifo_s_to_off_chip) {
#pragma HLS inline off
  float s_0[16];
  // FT0
#pragma HLS array_partition variable = s_0 cyclic factor = 16 dim = 1
  float s_1[16];
  // FT0
#pragma HLS array_partition variable = s_1 cyclic factor = 16 dim = 1
  float A_0[416][16];
  // FT0
#pragma HLS array_partition variable = A_0 cyclic factor = 32 dim = 1
#pragma HLS array_partition variable = A_0 cyclic factor = 16 dim = 2
  float A_1[416][16];
  // FT0
#pragma HLS array_partition variable = A_1 cyclic factor = 32 dim = 1
#pragma HLS array_partition variable = A_1 cyclic factor = 16 dim = 2
  float r[416];
#pragma HLS array_partition variable = r cyclic factor = 32 dim = 1
  read_r_FT0(r, fifo_r_from_off_chip_to_S1);
  read_A_FT0(A_0, fifo_A_from_off_chip_to_S1, 0);
  for (int j0 = 0; j0 < 25; j0++) {

    if (j0 % 2 == 0) {
      //     read_A_FT0(A_1, fifo_A_from_off_chip_to_S1, j0+1);
      //     task0_intra(s_0, A_0, r, j0);
      //     task1_intra(s_0, A_0, r, j0);
      //     write_s_FT0(s_1, fifo_s_to_off_chip, j0-1);
      compute_FT0_level0(fifo_r_from_off_chip_to_S1, fifo_A_from_off_chip_to_S1,
                         fifo_s_to_off_chip, j0, s_0, s_1, A_0, A_1, r);
    } else if (j0 % 2 == 1) {
      //     read_A_FT0(A_0, fifo_A_from_off_chip_to_S1, j0+1);
      //     task0_intra(s_1, A_1, r, j0);
      //     task1_intra(s_1, A_1, r, j0);
      //     write_s_FT0(s_0, fifo_s_to_off_chip, j0-1);
      compute_FT0_level0(fifo_r_from_off_chip_to_S1, fifo_A_from_off_chip_to_S1,
                         fifo_s_to_off_chip, j0, s_1, s_0, A_1, A_0, r);
    }
  }
  write_s_FT0(s_0, fifo_s_to_off_chip, 24);
}
void compute_FT1_level0(hls::stream<float16> &fifo_A_from_off_chip_to_S3,
                        hls::stream<float16> &fifo_p_from_off_chip_to_S3,
                        hls::stream<float2> &fifo_q_to_off_chip, int i0,
                        float q_0[10], float q_1[10], float A_0[10][400],
                        float A_1[10][400], float p[400]) {
#pragma HLS inline off
#pragma HLS dataflow
  read_A_FT1(A_1, fifo_A_from_off_chip_to_S3, i0 + 1);
  task2_intra(q_0, A_0, p, i0);
  task3_intra(q_0, A_0, p, i0);
  write_q_FT1(q_1, fifo_q_to_off_chip, i0 - 1);
}

void FT1_level0(hls::stream<float16> &fifo_A_from_off_chip_to_S3,
                hls::stream<float16> &fifo_p_from_off_chip_to_S3,
                hls::stream<float2> &fifo_q_to_off_chip) {
#pragma HLS inline off
  float q_0[10];
  // FT1
#pragma HLS array_partition variable = q_0 cyclic factor = 10 dim = 1
  float q_1[10];
  // FT1
#pragma HLS array_partition variable = q_1 cyclic factor = 10 dim = 1
  float A_0[10][400];
  // FT1
#pragma HLS array_partition variable = A_0 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = A_0 cyclic factor = 20 dim = 2
  float A_1[10][400];
  // FT1
#pragma HLS array_partition variable = A_1 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = A_1 cyclic factor = 20 dim = 2
  float p[400];
#pragma HLS array_partition variable = p cyclic factor = 20 dim = 1
  read_p_FT1(p, fifo_p_from_off_chip_to_S3);
  read_A_FT1(A_0, fifo_A_from_off_chip_to_S3, 0);
  for (int i0 = 0; i0 < 41; i0++) {

    if (i0 % 2 == 0) {
      //     read_A_FT1(A_1, fifo_A_from_off_chip_to_S3, i0+1);
      //     task2_intra(q_0, A_0, p, i0);
      //     task3_intra(q_0, A_0, p, i0);
      //     write_q_FT1(q_1, fifo_q_to_off_chip, i0-1);
      compute_FT1_level0(fifo_A_from_off_chip_to_S3, fifo_p_from_off_chip_to_S3,
                         fifo_q_to_off_chip, i0, q_0, q_1, A_0, A_1, p);
    } else if (i0 % 2 == 1) {
      //     read_A_FT1(A_0, fifo_A_from_off_chip_to_S3, i0+1);
      //     task2_intra(q_1, A_1, p, i0);
      //     task3_intra(q_1, A_1, p, i0);
      //     write_q_FT1(q_0, fifo_q_to_off_chip, i0-1);
      compute_FT1_level0(fifo_A_from_off_chip_to_S3, fifo_p_from_off_chip_to_S3,
                         fifo_q_to_off_chip, i0, q_1, q_0, A_1, A_0, p);
    }
  }
  write_q_FT1(q_0, fifo_q_to_off_chip, 40);
}
void task0_intra(float s[16], float A[416][16], float r[416], int j0) {
#pragma HLS inline off
  int j;
  for (int j1 = 0; j1 < 16; j1++) {
#pragma HLS unroll
    j = j0 * 16 + j1;
    s[j1] = 0.0;
  }
}

void task1_intra(float s[16], float A[416][16], float r[416], int j0) {
#pragma HLS inline off
  int j;
  int i;
  for (int i0 = 0; i0 < 13; i0++) {
#pragma HLS pipeline II = 2
    for (int j1 = 0; j1 < 16; j1++) {
#pragma HLS unroll
      for (int i1 = 0; i1 < 32; i1++) {
#pragma HLS unroll
        j = j0 * 16 + j1;
        i = i0 * 32 + i1;
        s[j1] = s[j1] + r[i] * A[i][j1];
      }
    }
  }
}

void task2_intra(float q[10], float A[10][400], float p[400], int i0) {
#pragma HLS inline off
  int i;
  for (int i1 = 0; i1 < 10; i1++) {
#pragma HLS unroll
    i = i0 * 10 + i1;
    q[i1] = 0.0;
  }
}

void task3_intra(float q[10], float A[10][400], float p[400], int i0) {
#pragma HLS inline off
  int i;
  int j;
  for (int j0 = 0; j0 < 20; j0++) {
#pragma HLS pipeline II = 2
    for (int i1 = 0; i1 < 10; i1++) {
#pragma HLS unroll
      for (int j1 = 0; j1 < 20; j1++) {
#pragma HLS unroll
        i = i0 * 10 + i1;
        j = j0 * 20 + j1;
        q[i1] = q[i1] + A[i1][j] * p[j];
      }
    }
  }
}

void read_r_FT0(float r[416],
                hls::stream<float16> &fifo_r_from_off_chip_to_S1) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 416; d0 += 16) {
#pragma HLS pipeline II = 1
    float16 tmp_fifo = fifo_r_from_off_chip_to_S1.read();
    r[d0 + 0 + 0] = tmp_fifo[0];
    r[d0 + 0 + 1] = tmp_fifo[1];
    r[d0 + 0 + 2] = tmp_fifo[2];
    r[d0 + 0 + 3] = tmp_fifo[3];
    r[d0 + 0 + 4] = tmp_fifo[4];
    r[d0 + 0 + 5] = tmp_fifo[5];
    r[d0 + 0 + 6] = tmp_fifo[6];
    r[d0 + 0 + 7] = tmp_fifo[7];
    r[d0 + 0 + 8] = tmp_fifo[8];
    r[d0 + 0 + 9] = tmp_fifo[9];
    r[d0 + 0 + 10] = tmp_fifo[10];
    r[d0 + 0 + 11] = tmp_fifo[11];
    r[d0 + 0 + 12] = tmp_fifo[12];
    r[d0 + 0 + 13] = tmp_fifo[13];
    r[d0 + 0 + 14] = tmp_fifo[14];
    r[d0 + 0 + 15] = tmp_fifo[15];
  }
}

void read_A_FT0(float A[416][16],
                hls::stream<float16> &fifo_A_from_off_chip_to_S1, int j0) {
#pragma HLS inline off
  if (j0 >= 25) {
    return;
  }
  for (int d0 = 0; d0 < 416; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_A_from_off_chip_to_S1.read();
      A[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      A[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      A[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      A[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      A[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      A[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      A[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      A[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      A[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      A[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      A[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      A[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      A[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      A[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      A[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      A[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}

void read_p_FT1(float p[400],
                hls::stream<float16> &fifo_p_from_off_chip_to_S3) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 400; d0 += 16) {
#pragma HLS pipeline II = 1
    float16 tmp_fifo = fifo_p_from_off_chip_to_S3.read();
    p[d0 + 0 + 0] = tmp_fifo[0];
    p[d0 + 0 + 1] = tmp_fifo[1];
    p[d0 + 0 + 2] = tmp_fifo[2];
    p[d0 + 0 + 3] = tmp_fifo[3];
    p[d0 + 0 + 4] = tmp_fifo[4];
    p[d0 + 0 + 5] = tmp_fifo[5];
    p[d0 + 0 + 6] = tmp_fifo[6];
    p[d0 + 0 + 7] = tmp_fifo[7];
    p[d0 + 0 + 8] = tmp_fifo[8];
    p[d0 + 0 + 9] = tmp_fifo[9];
    p[d0 + 0 + 10] = tmp_fifo[10];
    p[d0 + 0 + 11] = tmp_fifo[11];
    p[d0 + 0 + 12] = tmp_fifo[12];
    p[d0 + 0 + 13] = tmp_fifo[13];
    p[d0 + 0 + 14] = tmp_fifo[14];
    p[d0 + 0 + 15] = tmp_fifo[15];
  }
}

void read_A_FT1(float A[10][400],
                hls::stream<float16> &fifo_A_from_off_chip_to_S3, int i0) {
#pragma HLS inline off
  if (i0 >= 41) {
    return;
  }
  for (int d0 = 0; d0 < 10; d0++) {
    for (int d1 = 0; d1 < 400; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_A_from_off_chip_to_S3.read();
      A[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      A[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      A[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      A[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      A[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      A[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      A[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      A[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      A[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      A[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      A[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      A[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      A[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      A[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      A[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      A[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}

void write_s_FT0(float s[16], hls::stream<float16> &fifo_s_to_off_chip,
                 int j0) {
#pragma HLS inline off
  if (j0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 16; d0 += 16) {
#pragma HLS pipeline II = 1
    float16 tmp_fifo;
    tmp_fifo[0] = s[d0 + 0 + 0];
    tmp_fifo[1] = s[d0 + 0 + 1];
    tmp_fifo[2] = s[d0 + 0 + 2];
    tmp_fifo[3] = s[d0 + 0 + 3];
    tmp_fifo[4] = s[d0 + 0 + 4];
    tmp_fifo[5] = s[d0 + 0 + 5];
    tmp_fifo[6] = s[d0 + 0 + 6];
    tmp_fifo[7] = s[d0 + 0 + 7];
    tmp_fifo[8] = s[d0 + 0 + 8];
    tmp_fifo[9] = s[d0 + 0 + 9];
    tmp_fifo[10] = s[d0 + 0 + 10];
    tmp_fifo[11] = s[d0 + 0 + 11];
    tmp_fifo[12] = s[d0 + 0 + 12];
    tmp_fifo[13] = s[d0 + 0 + 13];
    tmp_fifo[14] = s[d0 + 0 + 14];
    tmp_fifo[15] = s[d0 + 0 + 15];
    fifo_s_to_off_chip.write(tmp_fifo);
  }
}

void write_q_FT1(float q[10], hls::stream<float2> &fifo_q_to_off_chip, int i0) {
#pragma HLS inline off
  if (i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 10; d0 += 2) {
#pragma HLS pipeline II = 1
    float2 tmp_fifo;
    tmp_fifo[0] = q[d0 + 0 + 0];
    tmp_fifo[1] = q[d0 + 0 + 1];
    fifo_q_to_off_chip.write(tmp_fifo);
  }
}

// extern "C"{
void kernel_nlp(float16 vs_for_task1[25], float16 vr_for_task1[26],
                float16 vA_for_task1[10400], float16 vA_for_task3[10400],
                float2 vq_for_task3[205], float16 vp_for_task3[25]) {

#pragma HLS INTERFACE m_axi port = vs_for_task1 offset = slave bundle =        \
    kernel_vs_for_task1
#pragma HLS INTERFACE m_axi port = vr_for_task1 offset = slave bundle =        \
    kernel_vr_for_task1
#pragma HLS INTERFACE m_axi port = vA_for_task1 offset = slave bundle =        \
    kernel_vA_for_task1
#pragma HLS INTERFACE m_axi port = vA_for_task3 offset = slave bundle =        \
    kernel_vA_for_task3
#pragma HLS INTERFACE m_axi port = vq_for_task3 offset = slave bundle =        \
    kernel_vq_for_task3
#pragma HLS INTERFACE m_axi port = vp_for_task3 offset = slave bundle =        \
    kernel_vp_for_task3
#pragma HLS INTERFACE s_axilite port = vs_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vr_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vA_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vA_for_task3 bundle = control
#pragma HLS INTERFACE s_axilite port = vq_for_task3 bundle = control
#pragma HLS INTERFACE s_axilite port = vp_for_task3 bundle = control
#pragma HLS DATA_PACK VARIABLE = vs_for_task1
#pragma HLS DATA_PACK VARIABLE = vr_for_task1
#pragma HLS DATA_PACK VARIABLE = vA_for_task1
#pragma HLS DATA_PACK VARIABLE = vA_for_task3
#pragma HLS DATA_PACK VARIABLE = vq_for_task3
#pragma HLS DATA_PACK VARIABLE = vp_for_task3
#pragma HLS INTERFACE s_axilite port = return bundle = control

#pragma HLS dataflow

  hls::stream<float16> fifo_r_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_r_from_off_chip_to_S1 depth = 512
  hls::stream<float16> fifo_A_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_A_from_off_chip_to_S1 depth = 512
  hls::stream<float16> fifo_A_from_off_chip_to_S3;
#pragma HLS stream variable = fifo_A_from_off_chip_to_S3 depth = 512
  hls::stream<float16> fifo_p_from_off_chip_to_S3;
#pragma HLS stream variable = fifo_p_from_off_chip_to_S3 depth = 512
  hls::stream<float16> fifo_s_to_off_chip;
#pragma HLS stream variable = fifo_s_to_off_chip depth = 512
  hls::stream<float2> fifo_q_to_off_chip;
#pragma HLS stream variable = fifo_q_to_off_chip depth = 512

  load_vr_for_task1(fifo_r_from_off_chip_to_S1, vr_for_task1);
  load_vA_for_task1(fifo_A_from_off_chip_to_S1, vA_for_task1);
  load_vA_for_task3(fifo_A_from_off_chip_to_S3, vA_for_task3);
  load_vp_for_task3(fifo_p_from_off_chip_to_S3, vp_for_task3);

  FT0_level0(fifo_r_from_off_chip_to_S1, fifo_A_from_off_chip_to_S1,
             fifo_s_to_off_chip);
  FT1_level0(fifo_A_from_off_chip_to_S3, fifo_p_from_off_chip_to_S3,
             fifo_q_to_off_chip);

  store_vs_for_task1(fifo_s_to_off_chip, vs_for_task1);
  store_vq_for_task3(fifo_q_to_off_chip, vq_for_task3);
}
//}
