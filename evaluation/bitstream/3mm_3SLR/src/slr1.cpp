#include "output.h"

#define READ_RANGE(Arr, data_size, l)                                          \
  (Arr.data.range((data_size) * (l) + (data_size) - 1, (data_size) * (l)))

/****************************************************
 This file was automatically generated by Prometheus
****************************************************/
void FT2_level0(hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_E_from_task1_to_task5,
                hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_F_from_task3_to_task5,
                hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_G_to_off_chip) {
#pragma HLS inline off
  float F_0[192][24];
  // FT2
#pragma HLS array_partition variable = F_0 cyclic factor = 4 dim = 1
#pragma HLS array_partition variable = F_0 cyclic factor = 24 dim = 2
  float F_1[192][24];
  // FT2
#pragma HLS array_partition variable = F_1 cyclic factor = 4 dim = 1
#pragma HLS array_partition variable = F_1 cyclic factor = 24 dim = 2
  float E_0[180][192];
#pragma HLS array_partition variable = E_0 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = E_0 cyclic factor = 4 dim = 2
  float E_1[180][192];
#pragma HLS array_partition variable = E_1 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = E_1 cyclic factor = 4 dim = 2
  float E_2[180][192];
#pragma HLS array_partition variable = E_2 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = E_2 cyclic factor = 4 dim = 2
  read_F_FT2(F_0, fifo_F_from_task3_to_task5, 0);
  for (int j0 = 0; j0 < 9; j0++) {
    if (j0 % 2 == 0) {
      read_F_FT2(F_1, fifo_F_from_task3_to_task5, j0 + 1);
      FT2_level1(fifo_E_from_task1_to_task5, fifo_F_from_task3_to_task5,
                 fifo_G_to_off_chip, F_0, E_0, E_1, E_2, j0);
    } else if (j0 % 2 == 1) {
      read_F_FT2(F_0, fifo_F_from_task3_to_task5, j0 + 1);
      FT2_level1(fifo_E_from_task1_to_task5, fifo_F_from_task3_to_task5,
                 fifo_G_to_off_chip, F_1, E_0, E_1, E_2, j0);
    }
  }
}
void compute_FT2_level1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_E_from_task1_to_task5,
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_F_from_task3_to_task5,
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_G_to_off_chip, float F[192][24],
    int j0, int i0, float G_0[10][24], float G_1[10][24], float E_0[180][192],
    float E_1[180][192]) {
#pragma HLS inline off
#pragma HLS dataflow
  read_E_FT2(E_1, fifo_E_from_task1_to_task5, i0 + 1, j0);
  task4_intra(F, E_0, j0, G_0, i0);
  task5_intra(F, E_0, j0, G_0, i0);
  write_G_FT2(G_1, fifo_G_to_off_chip, i0 - 1, j0);
}
void FT2_level1(hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_E_from_task1_to_task5,
                hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_F_from_task3_to_task5,
                hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_G_to_off_chip,
                float F[192][24], float E_0[180][192], float E_1[180][192],
                float E_2[180][192], int j0) {
#pragma HLS inline off
  float G_0[10][24];
  // FT2
#pragma HLS array_partition variable = G_0 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = G_0 cyclic factor = 24 dim = 2
  float G_1[10][24];
  // FT2
#pragma HLS array_partition variable = G_1 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = G_1 cyclic factor = 24 dim = 2
  read_E_FT2(E_0, fifo_E_from_task1_to_task5, 0, j0);
  for (int i0 = 0; i0 < 18; i0++) {

    if (i0 % 2 == 0) {
      //     read_E_FT2(E_1, fifo_E_from_task1_to_task5, i0+1, j0);
      //     task4_intra(F, E_0, j0, G_0, i0);
      //     task5_intra(F, E_0, j0, G_0, i0);
      //     write_G_FT2(G_1, fifo_G_to_off_chip, i0-1, j0);
      compute_FT2_level1(fifo_E_from_task1_to_task5, fifo_F_from_task3_to_task5,
                         fifo_G_to_off_chip, F, j0, i0, G_0, G_1, E_0, E_1);
    } else if (i0 % 2 == 1) {
      //     read_E_FT2(E_0, fifo_E_from_task1_to_task5, i0+1, j0);
      //     task4_intra(F, E_1, j0, G_1, i0);
      //     task5_intra(F, E_1, j0, G_1, i0);
      //     write_G_FT2(G_0, fifo_G_to_off_chip, i0-1, j0);
      compute_FT2_level1(fifo_E_from_task1_to_task5, fifo_F_from_task3_to_task5,
                         fifo_G_to_off_chip, F, j0, i0, G_1, G_0, E_1, E_0);
    }
  }
  write_G_FT2(G_1, fifo_G_to_off_chip, 17, j0);
}
void task4_intra(float F[192][24], float E[180][192], int j0, float G[10][24],
                 int i0) {
#pragma HLS inline off
  int j;
  int i;
  for (int j1 = 0; j1 < 24; j1++) {
#pragma HLS unroll
    for (int i1 = 0; i1 < 10; i1++) {
#pragma HLS unroll
      j = j0 * 24 + j1;
      i = i0 * 10 + i1;
      G[i1][j1] = 0.0;
    }
  }
}
void task5_intra(float F[192][24], float E[180][192], int j0, float G[10][24],
                 int i0) {
#pragma HLS inline off
  int j;
  int i;
  int k;
  for (int k0 = 0; k0 < 48; k0++) {
#pragma HLS pipeline II = 2
    for (int j1 = 0; j1 < 24; j1++) {
#pragma HLS unroll
      for (int i1 = 0; i1 < 10; i1++) {
#pragma HLS unroll
        for (int k1 = 0; k1 < 4; k1++) {
#pragma HLS unroll
          j = j0 * 24 + j1;
          i = i0 * 10 + i1;
          k = k0 * 4 + k1;
          G[i1][j1] = G[i1][j1] + E[i][k] * F[k][j1];
        }
      }
    }
  }
}
void read_F_FT2(float F[192][24],
                hls::stream<float8> &fifo_F_from_task3_to_task5, int j0) {
#pragma HLS inline off
  if (j0 >= 9) {
    return;
  }
  for (int d0_0 = 0; d0_0 < 19; d0_0++) {

    for (int d0_1 = 0; d0_1 < 10; d0_1++) {

      for (int d1_1 = 0; d1_1 < 24; d1_1 += 8) {

        int d0 = d0_0 * 10 + d0_1;
        int d1 = d1_1;
        float8 tmp_fifo = fifo_F_from_task3_to_task5.read();
        if (d1 + 0 < 24)
          F[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
        if (d1 + 1 < 24)
          F[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
        if (d1 + 2 < 24)
          F[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
        if (d1 + 3 < 24)
          F[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
        if (d1 + 4 < 24)
          F[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
        if (d1 + 5 < 24)
          F[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
        if (d1 + 6 < 24)
          F[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
        if (d1 + 7 < 24)
          F[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      }
    }
  }
}
void read_F_FT2(float F[192][24],
                hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_F_from_task3_to_task5,
                int j0) {
#pragma HLS inline off
  if (j0 >= 9) {
    return;
  }
  for (int d0_0 = 0; d0_0 < 19; d0_0++) {

    for (int d0_1 = 0; d0_1 < 10; d0_1++) {

      for (int d1_1 = 0; d1_1 < 24; d1_1 += 8) {

        int d0 = d0_0 * 10 + d0_1;
        int d1 = d1_1;
        ap_axiu<256, 0, 0, 0> tmp_fifo = fifo_F_from_task3_to_task5.read();
        if (d1 + 0 < 24) {
          uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
          F[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
        }
        if (d1 + 1 < 24) {
          uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
          F[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
        }
        if (d1 + 2 < 24) {
          uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
          F[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
        }
        if (d1 + 3 < 24) {
          uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
          F[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
        }
        if (d1 + 4 < 24) {
          uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
          F[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
        }
        if (d1 + 5 < 24) {
          uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
          F[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
        }
        if (d1 + 6 < 24) {
          uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
          F[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
        }
        if (d1 + 7 < 24) {
          uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
          F[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
        }
      }
    }
  }
}
void read_E_FT2(float E[180][192],
                hls::stream<float16> &fifo_E_from_task1_to_task5, int i0,
                int j0) {
#pragma HLS inline off
  if (j0 > 0 || i0 >= 18) {
    return;
  }
  for (int d1_0 = 0; d1_0 < 4; d1_0++) {

    for (int d0_1 = 0; d0_1 < 10; d0_1++) {

      for (int d1_1 = 0; d1_1 < 48; d1_1 += 16) {

        int d0 = d0_1;
        int d1 = d1_0 * 48 + d1_1;
        float16 tmp_fifo = fifo_E_from_task1_to_task5.read();
        if (d1 + 0 < 192)
          E[d0 + i0 * 10][d1 + 0 + 0] = tmp_fifo[0];
        if (d1 + 1 < 192)
          E[d0 + i0 * 10][d1 + 0 + 1] = tmp_fifo[1];
        if (d1 + 2 < 192)
          E[d0 + i0 * 10][d1 + 0 + 2] = tmp_fifo[2];
        if (d1 + 3 < 192)
          E[d0 + i0 * 10][d1 + 0 + 3] = tmp_fifo[3];
        if (d1 + 4 < 192)
          E[d0 + i0 * 10][d1 + 0 + 4] = tmp_fifo[4];
        if (d1 + 5 < 192)
          E[d0 + i0 * 10][d1 + 0 + 5] = tmp_fifo[5];
        if (d1 + 6 < 192)
          E[d0 + i0 * 10][d1 + 0 + 6] = tmp_fifo[6];
        if (d1 + 7 < 192)
          E[d0 + i0 * 10][d1 + 0 + 7] = tmp_fifo[7];
        if (d1 + 8 < 192)
          E[d0 + i0 * 10][d1 + 0 + 8] = tmp_fifo[8];
        if (d1 + 9 < 192)
          E[d0 + i0 * 10][d1 + 0 + 9] = tmp_fifo[9];
        if (d1 + 10 < 192)
          E[d0 + i0 * 10][d1 + 0 + 10] = tmp_fifo[10];
        if (d1 + 11 < 192)
          E[d0 + i0 * 10][d1 + 0 + 11] = tmp_fifo[11];
        if (d1 + 12 < 192)
          E[d0 + i0 * 10][d1 + 0 + 12] = tmp_fifo[12];
        if (d1 + 13 < 192)
          E[d0 + i0 * 10][d1 + 0 + 13] = tmp_fifo[13];
        if (d1 + 14 < 192)
          E[d0 + i0 * 10][d1 + 0 + 14] = tmp_fifo[14];
        if (d1 + 15 < 192)
          E[d0 + i0 * 10][d1 + 0 + 15] = tmp_fifo[15];
      }
    }
  }
}
void read_E_FT2(float E[180][192],
                hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_E_from_task1_to_task5,
                int i0, int j0) {
#pragma HLS inline off
  if (j0 > 0 || i0 >= 18) {
    return;
  }
  for (int d1_0 = 0; d1_0 < 4; d1_0++) {

    for (int d0_1 = 0; d0_1 < 10; d0_1++) {

      for (int d1_1 = 0; d1_1 < 48; d1_1 += 16) {

        int d0 = d0_1;
        int d1 = d1_0 * 48 + d1_1;
        ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_E_from_task1_to_task5.read();
        if (d1 + 0 < 192) {
          uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
          E[d0 + i0 * 10][d1 + 0 + 0] = *(float *)(&tmp_0);
        }
        if (d1 + 1 < 192) {
          uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
          E[d0 + i0 * 10][d1 + 0 + 1] = *(float *)(&tmp_1);
        }
        if (d1 + 2 < 192) {
          uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
          E[d0 + i0 * 10][d1 + 0 + 2] = *(float *)(&tmp_2);
        }
        if (d1 + 3 < 192) {
          uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
          E[d0 + i0 * 10][d1 + 0 + 3] = *(float *)(&tmp_3);
        }
        if (d1 + 4 < 192) {
          uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
          E[d0 + i0 * 10][d1 + 0 + 4] = *(float *)(&tmp_4);
        }
        if (d1 + 5 < 192) {
          uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
          E[d0 + i0 * 10][d1 + 0 + 5] = *(float *)(&tmp_5);
        }
        if (d1 + 6 < 192) {
          uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
          E[d0 + i0 * 10][d1 + 0 + 6] = *(float *)(&tmp_6);
        }
        if (d1 + 7 < 192) {
          uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
          E[d0 + i0 * 10][d1 + 0 + 7] = *(float *)(&tmp_7);
        }
        if (d1 + 8 < 192) {
          uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
          E[d0 + i0 * 10][d1 + 0 + 8] = *(float *)(&tmp_8);
        }
        if (d1 + 9 < 192) {
          uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
          E[d0 + i0 * 10][d1 + 0 + 9] = *(float *)(&tmp_9);
        }
        if (d1 + 10 < 192) {
          uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
          E[d0 + i0 * 10][d1 + 0 + 10] = *(float *)(&tmp_10);
        }
        if (d1 + 11 < 192) {
          uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
          E[d0 + i0 * 10][d1 + 0 + 11] = *(float *)(&tmp_11);
        }
        if (d1 + 12 < 192) {
          uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
          E[d0 + i0 * 10][d1 + 0 + 12] = *(float *)(&tmp_12);
        }
        if (d1 + 13 < 192) {
          uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
          E[d0 + i0 * 10][d1 + 0 + 13] = *(float *)(&tmp_13);
        }
        if (d1 + 14 < 192) {
          uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
          E[d0 + i0 * 10][d1 + 0 + 14] = *(float *)(&tmp_14);
        }
        if (d1 + 15 < 192) {
          uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
          E[d0 + i0 * 10][d1 + 0 + 15] = *(float *)(&tmp_15);
        }
      }
    }
  }
}
void write_G_FT2(float G[10][24], hls::stream<float8> &fifo_G_to_off_chip,
                 int i0, int j0) {
#pragma HLS inline off
  if (i0 < 0 || j0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 10; d0++) {
    for (int d1 = 0; d1 < 24; d1 += 8) {
#pragma HLS pipeline II = 1
      float8 tmp_fifo;
      tmp_fifo[0] = G[d0 + 0][d1 + 0 + 0];
      tmp_fifo[1] = G[d0 + 0][d1 + 0 + 1];
      tmp_fifo[2] = G[d0 + 0][d1 + 0 + 2];
      tmp_fifo[3] = G[d0 + 0][d1 + 0 + 3];
      tmp_fifo[4] = G[d0 + 0][d1 + 0 + 4];
      tmp_fifo[5] = G[d0 + 0][d1 + 0 + 5];
      tmp_fifo[6] = G[d0 + 0][d1 + 0 + 6];
      tmp_fifo[7] = G[d0 + 0][d1 + 0 + 7];
      fifo_G_to_off_chip.write(tmp_fifo);
    }
  }
}
void write_G_FT2(float G[10][24],
                 hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_G_to_off_chip, int i0,
                 int j0) {
#pragma HLS inline off
  if (i0 < 0 || j0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 10; d0++) {
    for (int d1 = 0; d1 < 24; d1 += 8) {
#pragma HLS pipeline II = 1
      ap_axiu<256, 0, 0, 0> tmp_fifo;
      float tmp_0 = G[d0 + 0][d1 + 0 + 0];
      tmp_fifo.data.range(31, 0) = *(uint32_t *)(&tmp_0);
      float tmp_1 = G[d0 + 0][d1 + 0 + 1];
      tmp_fifo.data.range(63, 32) = *(uint32_t *)(&tmp_1);
      float tmp_2 = G[d0 + 0][d1 + 0 + 2];
      tmp_fifo.data.range(95, 64) = *(uint32_t *)(&tmp_2);
      float tmp_3 = G[d0 + 0][d1 + 0 + 3];
      tmp_fifo.data.range(127, 96) = *(uint32_t *)(&tmp_3);
      float tmp_4 = G[d0 + 0][d1 + 0 + 4];
      tmp_fifo.data.range(159, 128) = *(uint32_t *)(&tmp_4);
      float tmp_5 = G[d0 + 0][d1 + 0 + 5];
      tmp_fifo.data.range(191, 160) = *(uint32_t *)(&tmp_5);
      float tmp_6 = G[d0 + 0][d1 + 0 + 6];
      tmp_fifo.data.range(223, 192) = *(uint32_t *)(&tmp_6);
      float tmp_7 = G[d0 + 0][d1 + 0 + 7];
      tmp_fifo.data.range(255, 224) = *(uint32_t *)(&tmp_7);
      fifo_G_to_off_chip.write(tmp_fifo);
    }
  }
}

void kernel_nlp_slr1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_E_from_task1_to_task5,
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_F_from_task3_to_task5,
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_G_to_off_chip) {
#pragma HLS interface ap_ctrl_none port = return
#pragma HLS inline off
#pragma HLS INTERFACE axis port = fifo_F_from_task3_to_task5
#pragma HLS INTERFACE axis port = fifo_G_to_off_chip
  FT2_level0(fifo_E_from_task1_to_task5, fifo_F_from_task3_to_task5,
             fifo_G_to_off_chip);
}
