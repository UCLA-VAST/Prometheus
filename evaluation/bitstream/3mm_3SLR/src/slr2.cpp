#include "output.h"

#define READ_RANGE(Arr, data_size, l)                                          \
  (Arr.data.range((data_size) * (l) + (data_size) - 1, (data_size) * (l)))

/****************************************************
 This file was automatically generated by Prometheus
****************************************************/
void FT0_level0(hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_E_from_task1_to_task5,
                hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_B_from_off_chip_to_S1,
                hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S1,
                hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_E_to_off_chip) {
#pragma HLS inline off
  float A_0[10][200];
  // FT0
#pragma HLS array_partition variable = A_0 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = A_0 cyclic factor = 2 dim = 2
  float A_1[10][200];
  // FT0
#pragma HLS array_partition variable = A_1 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = A_1 cyclic factor = 2 dim = 2
  float B[200][192];
#pragma HLS array_partition variable = B cyclic factor = 2 dim = 1
#pragma HLS array_partition variable = B cyclic factor = 48 dim = 2
  read_B_FT0(B, fifo_B_from_off_chip_to_S1);
  read_A_FT0(A_0, fifo_A_from_off_chip_to_S1, 0);
  for (int i0 = 0; i0 < 18; i0++) {
    if (i0 % 2 == 0) {
      read_A_FT0(A_1, fifo_A_from_off_chip_to_S1, i0 + 1);
      FT0_level1(fifo_E_from_task1_to_task5, fifo_B_from_off_chip_to_S1,
                 fifo_A_from_off_chip_to_S1, fifo_E_to_off_chip, A_0, B, i0);
    } else if (i0 % 2 == 1) {
      read_A_FT0(A_0, fifo_A_from_off_chip_to_S1, i0 + 1);
      FT0_level1(fifo_E_from_task1_to_task5, fifo_B_from_off_chip_to_S1,
                 fifo_A_from_off_chip_to_S1, fifo_E_to_off_chip, A_1, B, i0);
    }
  }
}
void compute_FT0_level1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_E_from_task1_to_task5,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_B_from_off_chip_to_S1,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S1,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_E_to_off_chip, float A[10][200],
    float B[200][192], int i0, int j0, float E_0[10][48], float E_1[10][48]) {
#pragma HLS inline off
#pragma HLS dataflow
  task0_intra(A, B, i0, E_0, j0);
  task1_intra(A, B, i0, E_0, j0);
  write_E_FT0(E_1, fifo_E_from_task1_to_task5, j0 - 1, i0);
  write_E_FT0(E_1, fifo_E_to_off_chip, j0 - 1, i0);
}
void FT0_level1(hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_E_from_task1_to_task5,
                hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_B_from_off_chip_to_S1,
                hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S1,
                hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_E_to_off_chip,
                float A[10][200], float B[200][192], int i0) {
#pragma HLS inline off
  float E_0[10][48];
  // FT0
#pragma HLS array_partition variable = E_0 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = E_0 cyclic factor = 48 dim = 2
  float E_1[10][48];
  // FT0
#pragma HLS array_partition variable = E_1 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = E_1 cyclic factor = 48 dim = 2
  for (int j0 = 0; j0 < 4; j0++) {

    if (j0 % 2 == 0) {
      //     task0_intra(A, B, i0, E_0, j0);
      //     task1_intra(A, B, i0, E_0, j0);
      //     write_E_FT0(E_1, fifo_E_from_task1_to_task5, j0-1, i0);
      //     write_E_FT0(E_1, fifo_E_to_off_chip, j0-1, i0);
      compute_FT0_level1(fifo_E_from_task1_to_task5, fifo_B_from_off_chip_to_S1,
                         fifo_A_from_off_chip_to_S1, fifo_E_to_off_chip, A, B,
                         i0, j0, E_0, E_1);
    } else if (j0 % 2 == 1) {
      //     task0_intra(A, B, i0, E_1, j0);
      //     task1_intra(A, B, i0, E_1, j0);
      //     write_E_FT0(E_0, fifo_E_from_task1_to_task5, j0-1, i0);
      //     write_E_FT0(E_0, fifo_E_to_off_chip, j0-1, i0);
      compute_FT0_level1(fifo_E_from_task1_to_task5, fifo_B_from_off_chip_to_S1,
                         fifo_A_from_off_chip_to_S1, fifo_E_to_off_chip, A, B,
                         i0, j0, E_1, E_0);
    }
  }
  write_E_FT0(E_1, fifo_E_from_task1_to_task5, 3, i0);
  write_E_FT0(E_1, fifo_E_to_off_chip, 3, i0);
}
void task0_intra(float A[10][200], float B[200][192], int i0, float E[10][48],
                 int j0) {
#pragma HLS inline off
  int i;
  int j;
  for (int i1 = 0; i1 < 10; i1++) {
#pragma HLS unroll
    for (int j1 = 0; j1 < 48; j1++) {
#pragma HLS unroll
      i = i0 * 10 + i1;
      j = j0 * 48 + j1;
      E[i1][j1] = 0.0;
    }
  }
}
void task1_intra(float A[10][200], float B[200][192], int i0, float E[10][48],
                 int j0) {
#pragma HLS inline off
  int i;
  int j;
  int k;
  for (int k0 = 0; k0 < 100; k0++) {
#pragma HLS pipeline II = 2
    for (int i1 = 0; i1 < 10; i1++) {
#pragma HLS unroll
      for (int j1 = 0; j1 < 48; j1++) {
#pragma HLS unroll
        for (int k1 = 0; k1 < 2; k1++) {
#pragma HLS unroll
          i = i0 * 10 + i1;
          j = j0 * 48 + j1;
          k = k0 * 2 + k1;
          E[i1][j1] = E[i1][j1] + A[i1][k] * B[k][j];
        }
      }
    }
  }
}
void read_B_FT0(float B[200][192],
                hls::stream<float16> &fifo_B_from_off_chip_to_S1) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 200; d0++) {
    for (int d1 = 0; d1 < 192; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_B_from_off_chip_to_S1.read();
      B[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      B[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      B[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      B[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      B[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      B[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      B[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      B[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      B[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      B[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      B[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      B[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      B[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      B[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      B[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      B[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}
void read_B_FT0(
    float B[200][192],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_B_from_off_chip_to_S1) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 200; d0++) {
    for (int d1 = 0; d1 < 192; d1 += 16) {
#pragma HLS pipeline II = 1
      ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_B_from_off_chip_to_S1.read();
      uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
      B[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
      uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
      B[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
      uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
      B[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
      uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
      B[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
      uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
      B[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
      uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
      B[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
      uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
      B[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
      uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
      B[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
      uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
      B[d0 + 0][d1 + 0 + 8] = *(float *)(&tmp_8);
      uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
      B[d0 + 0][d1 + 0 + 9] = *(float *)(&tmp_9);
      uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
      B[d0 + 0][d1 + 0 + 10] = *(float *)(&tmp_10);
      uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
      B[d0 + 0][d1 + 0 + 11] = *(float *)(&tmp_11);
      uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
      B[d0 + 0][d1 + 0 + 12] = *(float *)(&tmp_12);
      uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
      B[d0 + 0][d1 + 0 + 13] = *(float *)(&tmp_13);
      uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
      B[d0 + 0][d1 + 0 + 14] = *(float *)(&tmp_14);
      uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
      B[d0 + 0][d1 + 0 + 15] = *(float *)(&tmp_15);
    }
  }
}
void read_A_FT0(float A[10][200],
                hls::stream<float16> &fifo_A_from_off_chip_to_S1, int i0) {
#pragma HLS inline off
  if (i0 >= 18) {
    return;
  }
  for (int d0 = 0; d0 < 10; d0++) {
    for (int d1 = 0; d1 < 208; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_A_from_off_chip_to_S1.read();
      if (d1 + 0 < 200)
        A[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      if (d1 + 1 < 200)
        A[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      if (d1 + 2 < 200)
        A[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      if (d1 + 3 < 200)
        A[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      if (d1 + 4 < 200)
        A[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      if (d1 + 5 < 200)
        A[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      if (d1 + 6 < 200)
        A[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      if (d1 + 7 < 200)
        A[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      if (d1 + 8 < 200)
        A[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      if (d1 + 9 < 200)
        A[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      if (d1 + 10 < 200)
        A[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      if (d1 + 11 < 200)
        A[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      if (d1 + 12 < 200)
        A[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      if (d1 + 13 < 200)
        A[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      if (d1 + 14 < 200)
        A[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      if (d1 + 15 < 200)
        A[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}
void read_A_FT0(float A[10][200],
                hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S1,
                int i0) {
#pragma HLS inline off
  if (i0 >= 18) {
    return;
  }
  for (int d0 = 0; d0 < 10; d0++) {
    for (int d1 = 0; d1 < 208; d1 += 16) {
#pragma HLS pipeline II = 1
      ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_A_from_off_chip_to_S1.read();
      if (d1 + 0 < 200) {
        uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
        A[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
      }
      if (d1 + 1 < 200) {
        uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
        A[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
      }
      if (d1 + 2 < 200) {
        uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
        A[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
      }
      if (d1 + 3 < 200) {
        uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
        A[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
      }
      if (d1 + 4 < 200) {
        uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
        A[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
      }
      if (d1 + 5 < 200) {
        uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
        A[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
      }
      if (d1 + 6 < 200) {
        uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
        A[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
      }
      if (d1 + 7 < 200) {
        uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
        A[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
      }
      if (d1 + 8 < 200) {
        uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
        A[d0 + 0][d1 + 0 + 8] = *(float *)(&tmp_8);
      }
      if (d1 + 9 < 200) {
        uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
        A[d0 + 0][d1 + 0 + 9] = *(float *)(&tmp_9);
      }
      if (d1 + 10 < 200) {
        uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
        A[d0 + 0][d1 + 0 + 10] = *(float *)(&tmp_10);
      }
      if (d1 + 11 < 200) {
        uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
        A[d0 + 0][d1 + 0 + 11] = *(float *)(&tmp_11);
      }
      if (d1 + 12 < 200) {
        uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
        A[d0 + 0][d1 + 0 + 12] = *(float *)(&tmp_12);
      }
      if (d1 + 13 < 200) {
        uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
        A[d0 + 0][d1 + 0 + 13] = *(float *)(&tmp_13);
      }
      if (d1 + 14 < 200) {
        uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
        A[d0 + 0][d1 + 0 + 14] = *(float *)(&tmp_14);
      }
      if (d1 + 15 < 200) {
        uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
        A[d0 + 0][d1 + 0 + 15] = *(float *)(&tmp_15);
      }
    }
  }
}
void write_E_FT0(float E[10][48],
                 hls::stream<float16> &fifo_E_from_task1_to_task5, int j0,
                 int i0) {
#pragma HLS inline off
  if (j0 < 0 || i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 10; d0++) {
    for (int d1 = 0; d1 < 48; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo;
      tmp_fifo[0] = E[d0 + 0][d1 + 0 + 0];
      tmp_fifo[1] = E[d0 + 0][d1 + 0 + 1];
      tmp_fifo[2] = E[d0 + 0][d1 + 0 + 2];
      tmp_fifo[3] = E[d0 + 0][d1 + 0 + 3];
      tmp_fifo[4] = E[d0 + 0][d1 + 0 + 4];
      tmp_fifo[5] = E[d0 + 0][d1 + 0 + 5];
      tmp_fifo[6] = E[d0 + 0][d1 + 0 + 6];
      tmp_fifo[7] = E[d0 + 0][d1 + 0 + 7];
      tmp_fifo[8] = E[d0 + 0][d1 + 0 + 8];
      tmp_fifo[9] = E[d0 + 0][d1 + 0 + 9];
      tmp_fifo[10] = E[d0 + 0][d1 + 0 + 10];
      tmp_fifo[11] = E[d0 + 0][d1 + 0 + 11];
      tmp_fifo[12] = E[d0 + 0][d1 + 0 + 12];
      tmp_fifo[13] = E[d0 + 0][d1 + 0 + 13];
      tmp_fifo[14] = E[d0 + 0][d1 + 0 + 14];
      tmp_fifo[15] = E[d0 + 0][d1 + 0 + 15];
      fifo_E_from_task1_to_task5.write(tmp_fifo);
    }
  }
}
void write_E_FT0(float E[10][48],
                 hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_E_from_task1_to_task5,
                 int j0, int i0) {
#pragma HLS inline off
  if (j0 < 0 || i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 10; d0++) {
    for (int d1 = 0; d1 < 48; d1 += 16) {
#pragma HLS pipeline II = 1
      ap_axiu<512, 0, 0, 0> tmp_fifo;
      float tmp_0 = E[d0 + 0][d1 + 0 + 0];
      tmp_fifo.data.range(31, 0) = *(uint32_t *)(&tmp_0);
      float tmp_1 = E[d0 + 0][d1 + 0 + 1];
      tmp_fifo.data.range(63, 32) = *(uint32_t *)(&tmp_1);
      float tmp_2 = E[d0 + 0][d1 + 0 + 2];
      tmp_fifo.data.range(95, 64) = *(uint32_t *)(&tmp_2);
      float tmp_3 = E[d0 + 0][d1 + 0 + 3];
      tmp_fifo.data.range(127, 96) = *(uint32_t *)(&tmp_3);
      float tmp_4 = E[d0 + 0][d1 + 0 + 4];
      tmp_fifo.data.range(159, 128) = *(uint32_t *)(&tmp_4);
      float tmp_5 = E[d0 + 0][d1 + 0 + 5];
      tmp_fifo.data.range(191, 160) = *(uint32_t *)(&tmp_5);
      float tmp_6 = E[d0 + 0][d1 + 0 + 6];
      tmp_fifo.data.range(223, 192) = *(uint32_t *)(&tmp_6);
      float tmp_7 = E[d0 + 0][d1 + 0 + 7];
      tmp_fifo.data.range(255, 224) = *(uint32_t *)(&tmp_7);
      float tmp_8 = E[d0 + 0][d1 + 0 + 8];
      tmp_fifo.data.range(287, 256) = *(uint32_t *)(&tmp_8);
      float tmp_9 = E[d0 + 0][d1 + 0 + 9];
      tmp_fifo.data.range(319, 288) = *(uint32_t *)(&tmp_9);
      float tmp_10 = E[d0 + 0][d1 + 0 + 10];
      tmp_fifo.data.range(351, 320) = *(uint32_t *)(&tmp_10);
      float tmp_11 = E[d0 + 0][d1 + 0 + 11];
      tmp_fifo.data.range(383, 352) = *(uint32_t *)(&tmp_11);
      float tmp_12 = E[d0 + 0][d1 + 0 + 12];
      tmp_fifo.data.range(415, 384) = *(uint32_t *)(&tmp_12);
      float tmp_13 = E[d0 + 0][d1 + 0 + 13];
      tmp_fifo.data.range(447, 416) = *(uint32_t *)(&tmp_13);
      float tmp_14 = E[d0 + 0][d1 + 0 + 14];
      tmp_fifo.data.range(479, 448) = *(uint32_t *)(&tmp_14);
      float tmp_15 = E[d0 + 0][d1 + 0 + 15];
      tmp_fifo.data.range(511, 480) = *(uint32_t *)(&tmp_15);
      fifo_E_from_task1_to_task5.write(tmp_fifo);
    }
  }
}

void kernel_nlp_slr2(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_E_from_task1_to_task5,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_B_from_off_chip_to_S1,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S1,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_E_to_off_chip) {
#pragma HLS interface ap_ctrl_none port = return
#pragma HLS inline off
#pragma HLS INTERFACE axis port = fifo_B_from_off_chip_to_S1
#pragma HLS INTERFACE axis port = fifo_A_from_off_chip_to_S1
#pragma HLS INTERFACE axis port = fifo_E_to_off_chip
  FT0_level0(fifo_E_from_task1_to_task5, fifo_B_from_off_chip_to_S1,
             fifo_A_from_off_chip_to_S1, fifo_E_to_off_chip);
}
