#include "output.h"

#define READ_RANGE(Arr, data_size, l)                                          \
  (Arr.data.range((data_size) * (l) + (data_size) - 1, (data_size) * (l)))

/****************************************************
 This file was automatically generated by Prometheus
****************************************************/
void load_vB_for_task1(hls::stream<float16> &fifo_B_from_off_chip_to_S1,
                       float16 vB[2400]) {
#pragma HLS inline off
  for (int i = 0; i < 2400; i++) {
#pragma HLS pipeline II = 1
    fifo_B_from_off_chip_to_S1.write(vB[i]);
  }
}
void load_vB_for_task1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_B_from_off_chip_to_S1,
    float16 vB[2400]) {
#pragma HLS inline off
  for (int i = 0; i < 2400; i++) {
#pragma HLS pipeline II = 1
    float16 vB_off = vB[i];
    ap_axiu<512, 0, 0, 0> vB_on;
    vB_on.data.range(31, 0) = *(uint32_t *)(&vB_off[0]);
    vB_on.data.range(63, 32) = *(uint32_t *)(&vB_off[1]);
    vB_on.data.range(95, 64) = *(uint32_t *)(&vB_off[2]);
    vB_on.data.range(127, 96) = *(uint32_t *)(&vB_off[3]);
    vB_on.data.range(159, 128) = *(uint32_t *)(&vB_off[4]);
    vB_on.data.range(191, 160) = *(uint32_t *)(&vB_off[5]);
    vB_on.data.range(223, 192) = *(uint32_t *)(&vB_off[6]);
    vB_on.data.range(255, 224) = *(uint32_t *)(&vB_off[7]);
    vB_on.data.range(287, 256) = *(uint32_t *)(&vB_off[8]);
    vB_on.data.range(319, 288) = *(uint32_t *)(&vB_off[9]);
    vB_on.data.range(351, 320) = *(uint32_t *)(&vB_off[10]);
    vB_on.data.range(383, 352) = *(uint32_t *)(&vB_off[11]);
    vB_on.data.range(415, 384) = *(uint32_t *)(&vB_off[12]);
    vB_on.data.range(447, 416) = *(uint32_t *)(&vB_off[13]);
    vB_on.data.range(479, 448) = *(uint32_t *)(&vB_off[14]);
    vB_on.data.range(511, 480) = *(uint32_t *)(&vB_off[15]);
    fifo_B_from_off_chip_to_S1.write(vB_on);
  }
}
void load_vA_for_task1(hls::stream<float16> &fifo_A_from_off_chip_to_S1,
                       float16 vA[2340]) {
#pragma HLS inline off
  for (int i = 0; i < 2340; i++) {
#pragma HLS pipeline II = 1
    fifo_A_from_off_chip_to_S1.write(vA[i]);
  }
}
void load_vA_for_task1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S1,
    float16 vA[2340]) {
#pragma HLS inline off
  for (int i = 0; i < 2340; i++) {
#pragma HLS pipeline II = 1
    float16 vA_off = vA[i];
    ap_axiu<512, 0, 0, 0> vA_on;
    vA_on.data.range(31, 0) = *(uint32_t *)(&vA_off[0]);
    vA_on.data.range(63, 32) = *(uint32_t *)(&vA_off[1]);
    vA_on.data.range(95, 64) = *(uint32_t *)(&vA_off[2]);
    vA_on.data.range(127, 96) = *(uint32_t *)(&vA_off[3]);
    vA_on.data.range(159, 128) = *(uint32_t *)(&vA_off[4]);
    vA_on.data.range(191, 160) = *(uint32_t *)(&vA_off[5]);
    vA_on.data.range(223, 192) = *(uint32_t *)(&vA_off[6]);
    vA_on.data.range(255, 224) = *(uint32_t *)(&vA_off[7]);
    vA_on.data.range(287, 256) = *(uint32_t *)(&vA_off[8]);
    vA_on.data.range(319, 288) = *(uint32_t *)(&vA_off[9]);
    vA_on.data.range(351, 320) = *(uint32_t *)(&vA_off[10]);
    vA_on.data.range(383, 352) = *(uint32_t *)(&vA_off[11]);
    vA_on.data.range(415, 384) = *(uint32_t *)(&vA_off[12]);
    vA_on.data.range(447, 416) = *(uint32_t *)(&vA_off[13]);
    vA_on.data.range(479, 448) = *(uint32_t *)(&vA_off[14]);
    vA_on.data.range(511, 480) = *(uint32_t *)(&vA_off[15]);
    fifo_A_from_off_chip_to_S1.write(vA_on);
  }
}
void load_vC_for_task3(hls::stream<float16> &fifo_C_from_off_chip_to_S3,
                       float16 vC[2660]) {
#pragma HLS inline off
  for (int i = 0; i < 2660; i++) {
#pragma HLS pipeline II = 1
    fifo_C_from_off_chip_to_S3.write(vC[i]);
  }
}
void load_vC_for_task3(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_C_from_off_chip_to_S3,
    float16 vC[2660]) {
#pragma HLS inline off
  for (int i = 0; i < 2660; i++) {
#pragma HLS pipeline II = 1
    float16 vC_off = vC[i];
    ap_axiu<512, 0, 0, 0> vC_on;
    vC_on.data.range(31, 0) = *(uint32_t *)(&vC_off[0]);
    vC_on.data.range(63, 32) = *(uint32_t *)(&vC_off[1]);
    vC_on.data.range(95, 64) = *(uint32_t *)(&vC_off[2]);
    vC_on.data.range(127, 96) = *(uint32_t *)(&vC_off[3]);
    vC_on.data.range(159, 128) = *(uint32_t *)(&vC_off[4]);
    vC_on.data.range(191, 160) = *(uint32_t *)(&vC_off[5]);
    vC_on.data.range(223, 192) = *(uint32_t *)(&vC_off[6]);
    vC_on.data.range(255, 224) = *(uint32_t *)(&vC_off[7]);
    vC_on.data.range(287, 256) = *(uint32_t *)(&vC_off[8]);
    vC_on.data.range(319, 288) = *(uint32_t *)(&vC_off[9]);
    vC_on.data.range(351, 320) = *(uint32_t *)(&vC_off[10]);
    vC_on.data.range(383, 352) = *(uint32_t *)(&vC_off[11]);
    vC_on.data.range(415, 384) = *(uint32_t *)(&vC_off[12]);
    vC_on.data.range(447, 416) = *(uint32_t *)(&vC_off[13]);
    vC_on.data.range(479, 448) = *(uint32_t *)(&vC_off[14]);
    vC_on.data.range(511, 480) = *(uint32_t *)(&vC_off[15]);
    fifo_C_from_off_chip_to_S3.write(vC_on);
  }
}
void load_vD_for_task3(hls::stream<float8> &fifo_D_from_off_chip_to_S3,
                       float8 vD[6048]) {
#pragma HLS inline off
  for (int i = 0; i < 6048; i++) {
#pragma HLS pipeline II = 1
    fifo_D_from_off_chip_to_S3.write(vD[i]);
  }
}
void load_vD_for_task3(
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_D_from_off_chip_to_S3,
    float8 vD[6048]) {
#pragma HLS inline off
  for (int i = 0; i < 6048; i++) {
#pragma HLS pipeline II = 1
    float8 vD_off = vD[i];
    ap_axiu<256, 0, 0, 0> vD_on;
    vD_on.data.range(31, 0) = *(uint32_t *)(&vD_off[0]);
    vD_on.data.range(63, 32) = *(uint32_t *)(&vD_off[1]);
    vD_on.data.range(95, 64) = *(uint32_t *)(&vD_off[2]);
    vD_on.data.range(127, 96) = *(uint32_t *)(&vD_off[3]);
    vD_on.data.range(159, 128) = *(uint32_t *)(&vD_off[4]);
    vD_on.data.range(191, 160) = *(uint32_t *)(&vD_off[5]);
    vD_on.data.range(223, 192) = *(uint32_t *)(&vD_off[6]);
    vD_on.data.range(255, 224) = *(uint32_t *)(&vD_off[7]);
    fifo_D_from_off_chip_to_S3.write(vD_on);
  }
}
void store_vF_for_task3(hls::stream<float8> &fifo_F_to_off_chip,
                        float8 vF[5184]) {
#pragma HLS inline off
  for (int i = 0; i < 5130; i++) {
#pragma HLS pipeline II = 1
    vF[i] = fifo_F_to_off_chip.read();
  }
}
void store_vF_for_task3(hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_F_to_off_chip,
                        float8 vF[5184]) {
#pragma HLS inline off
  for (int i = 0; i < 5130; i++) {
#pragma HLS pipeline II = 1
    float8 vF_off;
    ap_axiu<256, 0, 0, 0> vF_on = fifo_F_to_off_chip.read();
    uint32_t vF_tmp[8];
    vF_tmp[0] = vF_on.data.range(31, 0);
    vF_off[0] = *(float *)(&vF_tmp[0]);
    vF_tmp[1] = vF_on.data.range(63, 32);
    vF_off[1] = *(float *)(&vF_tmp[1]);
    vF_tmp[2] = vF_on.data.range(95, 64);
    vF_off[2] = *(float *)(&vF_tmp[2]);
    vF_tmp[3] = vF_on.data.range(127, 96);
    vF_off[3] = *(float *)(&vF_tmp[3]);
    vF_tmp[4] = vF_on.data.range(159, 128);
    vF_off[4] = *(float *)(&vF_tmp[4]);
    vF_tmp[5] = vF_on.data.range(191, 160);
    vF_off[5] = *(float *)(&vF_tmp[5]);
    vF_tmp[6] = vF_on.data.range(223, 192);
    vF_off[6] = *(float *)(&vF_tmp[6]);
    vF_tmp[7] = vF_on.data.range(255, 224);
    vF_off[7] = *(float *)(&vF_tmp[7]);
    vF[i] = vF_off;
  }
}
void store_vG_for_task5(hls::stream<float8> &fifo_G_to_off_chip,
                        float8 vG[4860]) {
#pragma HLS inline off
  for (int i = 0; i < 4860; i++) {
#pragma HLS pipeline II = 1
    vG[i] = fifo_G_to_off_chip.read();
  }
}
void store_vG_for_task5(hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_G_to_off_chip,
                        float8 vG[4860]) {
#pragma HLS inline off
  for (int i = 0; i < 4860; i++) {
#pragma HLS pipeline II = 1
    float8 vG_off;
    ap_axiu<256, 0, 0, 0> vG_on = fifo_G_to_off_chip.read();
    uint32_t vG_tmp[8];
    vG_tmp[0] = vG_on.data.range(31, 0);
    vG_off[0] = *(float *)(&vG_tmp[0]);
    vG_tmp[1] = vG_on.data.range(63, 32);
    vG_off[1] = *(float *)(&vG_tmp[1]);
    vG_tmp[2] = vG_on.data.range(95, 64);
    vG_off[2] = *(float *)(&vG_tmp[2]);
    vG_tmp[3] = vG_on.data.range(127, 96);
    vG_off[3] = *(float *)(&vG_tmp[3]);
    vG_tmp[4] = vG_on.data.range(159, 128);
    vG_off[4] = *(float *)(&vG_tmp[4]);
    vG_tmp[5] = vG_on.data.range(191, 160);
    vG_off[5] = *(float *)(&vG_tmp[5]);
    vG_tmp[6] = vG_on.data.range(223, 192);
    vG_off[6] = *(float *)(&vG_tmp[6]);
    vG_tmp[7] = vG_on.data.range(255, 224);
    vG_off[7] = *(float *)(&vG_tmp[7]);
    vG[i] = vG_off;
  }
}
void store_vE_for_task1(hls::stream<float16> &fifo_E_to_off_chip,
                        float16 vE[2160]) {
#pragma HLS inline off
  for (int i = 0; i < 2160; i++) {
#pragma HLS pipeline II = 1
    vE[i] = fifo_E_to_off_chip.read();
  }
}
void store_vE_for_task1(hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_E_to_off_chip,
                        float16 vE[2160]) {
#pragma HLS inline off
  for (int i = 0; i < 2160; i++) {
#pragma HLS pipeline II = 1
    float16 vE_off;
    ap_axiu<512, 0, 0, 0> vE_on = fifo_E_to_off_chip.read();
    uint32_t vE_tmp[16];
    vE_tmp[0] = vE_on.data.range(31, 0);
    vE_off[0] = *(float *)(&vE_tmp[0]);
    vE_tmp[1] = vE_on.data.range(63, 32);
    vE_off[1] = *(float *)(&vE_tmp[1]);
    vE_tmp[2] = vE_on.data.range(95, 64);
    vE_off[2] = *(float *)(&vE_tmp[2]);
    vE_tmp[3] = vE_on.data.range(127, 96);
    vE_off[3] = *(float *)(&vE_tmp[3]);
    vE_tmp[4] = vE_on.data.range(159, 128);
    vE_off[4] = *(float *)(&vE_tmp[4]);
    vE_tmp[5] = vE_on.data.range(191, 160);
    vE_off[5] = *(float *)(&vE_tmp[5]);
    vE_tmp[6] = vE_on.data.range(223, 192);
    vE_off[6] = *(float *)(&vE_tmp[6]);
    vE_tmp[7] = vE_on.data.range(255, 224);
    vE_off[7] = *(float *)(&vE_tmp[7]);
    vE_tmp[8] = vE_on.data.range(287, 256);
    vE_off[8] = *(float *)(&vE_tmp[8]);
    vE_tmp[9] = vE_on.data.range(319, 288);
    vE_off[9] = *(float *)(&vE_tmp[9]);
    vE_tmp[10] = vE_on.data.range(351, 320);
    vE_off[10] = *(float *)(&vE_tmp[10]);
    vE_tmp[11] = vE_on.data.range(383, 352);
    vE_off[11] = *(float *)(&vE_tmp[11]);
    vE_tmp[12] = vE_on.data.range(415, 384);
    vE_off[12] = *(float *)(&vE_tmp[12]);
    vE_tmp[13] = vE_on.data.range(447, 416);
    vE_off[13] = *(float *)(&vE_tmp[13]);
    vE_tmp[14] = vE_on.data.range(479, 448);
    vE_off[14] = *(float *)(&vE_tmp[14]);
    vE_tmp[15] = vE_on.data.range(511, 480);
    vE_off[15] = *(float *)(&vE_tmp[15]);
    vE[i] = vE_off;
  }
}
void FT1_level0(hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_F_from_task3_to_task5,
                hls::stream<float16> &fifo_C_from_off_chip_to_S3,
                hls::stream<float8> &fifo_D_from_off_chip_to_S3,
                hls::stream<float8> &fifo_F_to_off_chip) {
#pragma HLS inline off
  float D_0[224][24];
  // FT1
#pragma HLS array_partition variable = D_0 cyclic factor = 4 dim = 1
#pragma HLS array_partition variable = D_0 cyclic factor = 24 dim = 2
  float D_1[224][24];
  // FT1
#pragma HLS array_partition variable = D_1 cyclic factor = 4 dim = 1
#pragma HLS array_partition variable = D_1 cyclic factor = 24 dim = 2
  float C_0[190][224];
#pragma HLS array_partition variable = C_0 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = C_0 cyclic factor = 4 dim = 2
  float C_1[190][224];
#pragma HLS array_partition variable = C_1 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = C_1 cyclic factor = 4 dim = 2
  float C_2[190][224];
#pragma HLS array_partition variable = C_2 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = C_2 cyclic factor = 4 dim = 2
  read_D_FT1(D_0, fifo_D_from_off_chip_to_S3, 0);
  for (int j0 = 0; j0 < 9; j0++) {
    if (j0 % 2 == 0) {
      read_D_FT1(D_1, fifo_D_from_off_chip_to_S3, j0 + 1);
      FT1_level1(fifo_F_from_task3_to_task5, fifo_C_from_off_chip_to_S3,
                 fifo_D_from_off_chip_to_S3, fifo_F_to_off_chip, D_0, C_0, C_1,
                 C_2, j0);
    } else if (j0 % 2 == 1) {
      read_D_FT1(D_0, fifo_D_from_off_chip_to_S3, j0 + 1);
      FT1_level1(fifo_F_from_task3_to_task5, fifo_C_from_off_chip_to_S3,
                 fifo_D_from_off_chip_to_S3, fifo_F_to_off_chip, D_1, C_0, C_1,
                 C_2, j0);
    }
  }
}
void compute_FT1_level1(
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_F_from_task3_to_task5,
    hls::stream<float16> &fifo_C_from_off_chip_to_S3,
    hls::stream<float8> &fifo_D_from_off_chip_to_S3,
    hls::stream<float8> &fifo_F_to_off_chip, float D[224][24], int j0, int i0,
    float F_0[10][24], float F_1[10][24], float C_0[190][224],
    float C_1[190][224]) {
#pragma HLS inline off
#pragma HLS dataflow
  read_C_FT1(C_1, fifo_C_from_off_chip_to_S3, i0 + 1, j0);
  task2_intra(D, C_0, j0, F_0, i0);
  task3_intra(D, C_0, j0, F_0, i0);
  write_F_FT1(F_1, fifo_F_from_task3_to_task5, i0 - 1, j0);
  write_F_FT1(F_1, fifo_F_to_off_chip, i0 - 1, j0);
}
void FT1_level1(hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_F_from_task3_to_task5,
                hls::stream<float16> &fifo_C_from_off_chip_to_S3,
                hls::stream<float8> &fifo_D_from_off_chip_to_S3,
                hls::stream<float8> &fifo_F_to_off_chip, float D[224][24],
                float C_0[190][224], float C_1[190][224], float C_2[190][224],
                int j0) {
#pragma HLS inline off
  float F_0[10][24];
  // FT1
#pragma HLS array_partition variable = F_0 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = F_0 cyclic factor = 24 dim = 2
  float F_1[10][24];
  // FT1
#pragma HLS array_partition variable = F_1 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = F_1 cyclic factor = 24 dim = 2
  read_C_FT1(C_0, fifo_C_from_off_chip_to_S3, 0, j0);
  for (int i0 = 0; i0 < 19; i0++) {

    if (i0 % 2 == 0) {
      //     read_C_FT1(C_1, fifo_C_from_off_chip_to_S3, i0+1, j0);
      //     task2_intra(D, C_0, j0, F_0, i0);
      //     task3_intra(D, C_0, j0, F_0, i0);
      //     write_F_FT1(F_1, fifo_F_from_task3_to_task5, i0-1, j0);
      //     write_F_FT1(F_1, fifo_F_to_off_chip, i0-1, j0);
      compute_FT1_level1(fifo_F_from_task3_to_task5, fifo_C_from_off_chip_to_S3,
                         fifo_D_from_off_chip_to_S3, fifo_F_to_off_chip, D, j0,
                         i0, F_0, F_1, C_0, C_1);
    } else if (i0 % 2 == 1) {
      //     read_C_FT1(C_0, fifo_C_from_off_chip_to_S3, i0+1, j0);
      //     task2_intra(D, C_1, j0, F_1, i0);
      //     task3_intra(D, C_1, j0, F_1, i0);
      //     write_F_FT1(F_0, fifo_F_from_task3_to_task5, i0-1, j0);
      //     write_F_FT1(F_0, fifo_F_to_off_chip, i0-1, j0);
      compute_FT1_level1(fifo_F_from_task3_to_task5, fifo_C_from_off_chip_to_S3,
                         fifo_D_from_off_chip_to_S3, fifo_F_to_off_chip, D, j0,
                         i0, F_1, F_0, C_1, C_0);
    }
  }
  write_F_FT1(F_0, fifo_F_from_task3_to_task5, 18, j0);
  write_F_FT1(F_0, fifo_F_to_off_chip, 18, j0);
}
void task2_intra(float D[224][24], float C[190][224], int j0, float F[10][24],
                 int i0) {
#pragma HLS inline off
  int j;
  int i;
  for (int j1 = 0; j1 < 24; j1++) {
#pragma HLS unroll
    for (int i1 = 0; i1 < 10; i1++) {
#pragma HLS unroll
      j = j0 * 24 + j1;
      i = i0 * 10 + i1;
      F[i1][j1] = 0.0;
    }
  }
}
void task3_intra(float D[224][24], float C[190][224], int j0, float F[10][24],
                 int i0) {
#pragma HLS inline off
  int j;
  int i;
  int k;
  for (int k0 = 0; k0 < 56; k0++) {
#pragma HLS pipeline II = 2
    for (int j1 = 0; j1 < 24; j1++) {
#pragma HLS unroll
      for (int i1 = 0; i1 < 10; i1++) {
#pragma HLS unroll
        for (int k1 = 0; k1 < 4; k1++) {
#pragma HLS unroll
          j = j0 * 24 + j1;
          i = i0 * 10 + i1;
          k = k0 * 4 + k1;
          F[i1][j1] = F[i1][j1] + C[i][k] * D[k][j1];
        }
      }
    }
  }
}
void read_D_FT1(float D[224][24],
                hls::stream<float8> &fifo_D_from_off_chip_to_S3, int j0) {
#pragma HLS inline off
  if (j0 >= 9) {
    return;
  }
  for (int d0 = 0; d0 < 224; d0++) {
    for (int d1 = 0; d1 < 24; d1 += 8) {
#pragma HLS pipeline II = 1
      float8 tmp_fifo = fifo_D_from_off_chip_to_S3.read();
      D[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      D[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      D[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      D[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      D[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      D[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      D[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      D[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
    }
  }
}
void read_D_FT1(float D[224][24],
                hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_D_from_off_chip_to_S3,
                int j0) {
#pragma HLS inline off
  if (j0 >= 9) {
    return;
  }
  for (int d0 = 0; d0 < 224; d0++) {
    for (int d1 = 0; d1 < 24; d1 += 8) {
#pragma HLS pipeline II = 1
      ap_axiu<256, 0, 0, 0> tmp_fifo = fifo_D_from_off_chip_to_S3.read();
      uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
      D[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
      uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
      D[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
      uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
      D[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
      uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
      D[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
      uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
      D[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
      uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
      D[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
      uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
      D[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
      uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
      D[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
    }
  }
}
void read_C_FT1(float C[190][224],
                hls::stream<float16> &fifo_C_from_off_chip_to_S3, int i0,
                int j0) {
#pragma HLS inline off
  if (j0 > 0 || i0 >= 19) {
    return;
  }
  for (int d0 = 0; d0 < 10; d0++) {
    for (int d1 = 0; d1 < 224; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_C_from_off_chip_to_S3.read();
      C[d0 + i0 * 10][d1 + 0 + 0] = tmp_fifo[0];
      C[d0 + i0 * 10][d1 + 0 + 1] = tmp_fifo[1];
      C[d0 + i0 * 10][d1 + 0 + 2] = tmp_fifo[2];
      C[d0 + i0 * 10][d1 + 0 + 3] = tmp_fifo[3];
      C[d0 + i0 * 10][d1 + 0 + 4] = tmp_fifo[4];
      C[d0 + i0 * 10][d1 + 0 + 5] = tmp_fifo[5];
      C[d0 + i0 * 10][d1 + 0 + 6] = tmp_fifo[6];
      C[d0 + i0 * 10][d1 + 0 + 7] = tmp_fifo[7];
      C[d0 + i0 * 10][d1 + 0 + 8] = tmp_fifo[8];
      C[d0 + i0 * 10][d1 + 0 + 9] = tmp_fifo[9];
      C[d0 + i0 * 10][d1 + 0 + 10] = tmp_fifo[10];
      C[d0 + i0 * 10][d1 + 0 + 11] = tmp_fifo[11];
      C[d0 + i0 * 10][d1 + 0 + 12] = tmp_fifo[12];
      C[d0 + i0 * 10][d1 + 0 + 13] = tmp_fifo[13];
      C[d0 + i0 * 10][d1 + 0 + 14] = tmp_fifo[14];
      C[d0 + i0 * 10][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}
void read_C_FT1(float C[190][224],
                hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_C_from_off_chip_to_S3,
                int i0, int j0) {
#pragma HLS inline off
  if (j0 > 0 || i0 >= 19) {
    return;
  }
  for (int d0 = 0; d0 < 10; d0++) {
    for (int d1 = 0; d1 < 224; d1 += 16) {
#pragma HLS pipeline II = 1
      ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_C_from_off_chip_to_S3.read();
      uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
      C[d0 + i0 * 10][d1 + 0 + 0] = *(float *)(&tmp_0);
      uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
      C[d0 + i0 * 10][d1 + 0 + 1] = *(float *)(&tmp_1);
      uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
      C[d0 + i0 * 10][d1 + 0 + 2] = *(float *)(&tmp_2);
      uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
      C[d0 + i0 * 10][d1 + 0 + 3] = *(float *)(&tmp_3);
      uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
      C[d0 + i0 * 10][d1 + 0 + 4] = *(float *)(&tmp_4);
      uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
      C[d0 + i0 * 10][d1 + 0 + 5] = *(float *)(&tmp_5);
      uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
      C[d0 + i0 * 10][d1 + 0 + 6] = *(float *)(&tmp_6);
      uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
      C[d0 + i0 * 10][d1 + 0 + 7] = *(float *)(&tmp_7);
      uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
      C[d0 + i0 * 10][d1 + 0 + 8] = *(float *)(&tmp_8);
      uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
      C[d0 + i0 * 10][d1 + 0 + 9] = *(float *)(&tmp_9);
      uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
      C[d0 + i0 * 10][d1 + 0 + 10] = *(float *)(&tmp_10);
      uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
      C[d0 + i0 * 10][d1 + 0 + 11] = *(float *)(&tmp_11);
      uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
      C[d0 + i0 * 10][d1 + 0 + 12] = *(float *)(&tmp_12);
      uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
      C[d0 + i0 * 10][d1 + 0 + 13] = *(float *)(&tmp_13);
      uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
      C[d0 + i0 * 10][d1 + 0 + 14] = *(float *)(&tmp_14);
      uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
      C[d0 + i0 * 10][d1 + 0 + 15] = *(float *)(&tmp_15);
    }
  }
}
void write_F_FT1(float F[10][24],
                 hls::stream<float8> &fifo_F_from_task3_to_task5, int i0,
                 int j0) {
#pragma HLS inline off
  if (i0 < 0 || j0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 10; d0++) {
    for (int d1 = 0; d1 < 24; d1 += 8) {
#pragma HLS pipeline II = 1
      float8 tmp_fifo;
      tmp_fifo[0] = F[d0 + 0][d1 + 0 + 0];
      tmp_fifo[1] = F[d0 + 0][d1 + 0 + 1];
      tmp_fifo[2] = F[d0 + 0][d1 + 0 + 2];
      tmp_fifo[3] = F[d0 + 0][d1 + 0 + 3];
      tmp_fifo[4] = F[d0 + 0][d1 + 0 + 4];
      tmp_fifo[5] = F[d0 + 0][d1 + 0 + 5];
      tmp_fifo[6] = F[d0 + 0][d1 + 0 + 6];
      tmp_fifo[7] = F[d0 + 0][d1 + 0 + 7];
      fifo_F_from_task3_to_task5.write(tmp_fifo);
    }
  }
}
void write_F_FT1(float F[10][24],
                 hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_F_from_task3_to_task5,
                 int i0, int j0) {
#pragma HLS inline off
  if (i0 < 0 || j0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 10; d0++) {
    for (int d1 = 0; d1 < 24; d1 += 8) {
#pragma HLS pipeline II = 1
      ap_axiu<256, 0, 0, 0> tmp_fifo;
      float tmp_0 = F[d0 + 0][d1 + 0 + 0];
      tmp_fifo.data.range(31, 0) = *(uint32_t *)(&tmp_0);
      float tmp_1 = F[d0 + 0][d1 + 0 + 1];
      tmp_fifo.data.range(63, 32) = *(uint32_t *)(&tmp_1);
      float tmp_2 = F[d0 + 0][d1 + 0 + 2];
      tmp_fifo.data.range(95, 64) = *(uint32_t *)(&tmp_2);
      float tmp_3 = F[d0 + 0][d1 + 0 + 3];
      tmp_fifo.data.range(127, 96) = *(uint32_t *)(&tmp_3);
      float tmp_4 = F[d0 + 0][d1 + 0 + 4];
      tmp_fifo.data.range(159, 128) = *(uint32_t *)(&tmp_4);
      float tmp_5 = F[d0 + 0][d1 + 0 + 5];
      tmp_fifo.data.range(191, 160) = *(uint32_t *)(&tmp_5);
      float tmp_6 = F[d0 + 0][d1 + 0 + 6];
      tmp_fifo.data.range(223, 192) = *(uint32_t *)(&tmp_6);
      float tmp_7 = F[d0 + 0][d1 + 0 + 7];
      tmp_fifo.data.range(255, 224) = *(uint32_t *)(&tmp_7);
      fifo_F_from_task3_to_task5.write(tmp_fifo);
    }
  }
}

void kernel_nlp_slr0(
    float16 vE_for_task1[2160], float16 vA_for_task1[2340],
    float16 vB_for_task1[2400], float8 vF_for_task3[5184],
    float16 vC_for_task3[2660], float8 vD_for_task3[6048],
    float8 vG_for_task5[4860],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_B_from_off_chip_to_S1,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S1,
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_G_to_off_chip,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_E_to_off_chip,
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_F_from_task3_to_task5) {
#pragma HLS INTERFACE axis port = fifo_F_from_task3_to_task5
#pragma HLS INTERFACE axis port = fifo_B_from_off_chip_to_S1
#pragma HLS INTERFACE axis port = fifo_A_from_off_chip_to_S1
#pragma HLS INTERFACE axis port = fifo_G_to_off_chip
#pragma HLS INTERFACE axis port = fifo_E_to_off_chip
#pragma HLS INTERFACE m_axi port = vE_for_task1 offset = slave bundle =        \
    kernel_vE_for_task1
#pragma HLS INTERFACE m_axi port = vA_for_task1 offset = slave bundle =        \
    kernel_vA_for_task1
#pragma HLS INTERFACE m_axi port = vB_for_task1 offset = slave bundle =        \
    kernel_vB_for_task1
#pragma HLS INTERFACE m_axi port = vF_for_task3 offset = slave bundle =        \
    kernel_vF_for_task3
#pragma HLS INTERFACE m_axi port = vC_for_task3 offset = slave bundle =        \
    kernel_vC_for_task3
#pragma HLS INTERFACE m_axi port = vD_for_task3 offset = slave bundle =        \
    kernel_vD_for_task3
#pragma HLS INTERFACE m_axi port = vG_for_task5 offset = slave bundle =        \
    kernel_vG_for_task5
#pragma HLS INTERFACE s_axilite port = vE_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vA_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vB_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vF_for_task3 bundle = control
#pragma HLS INTERFACE s_axilite port = vC_for_task3 bundle = control
#pragma HLS INTERFACE s_axilite port = vD_for_task3 bundle = control
#pragma HLS INTERFACE s_axilite port = vG_for_task5 bundle = control
#pragma HLS DATA_PACK VARIABLE = vE_for_task1
#pragma HLS DATA_PACK VARIABLE = vA_for_task1
#pragma HLS DATA_PACK VARIABLE = vB_for_task1
#pragma HLS DATA_PACK VARIABLE = vF_for_task3
#pragma HLS DATA_PACK VARIABLE = vC_for_task3
#pragma HLS DATA_PACK VARIABLE = vD_for_task3
#pragma HLS DATA_PACK VARIABLE = vG_for_task5
#pragma HLS INTERFACE s_axilite port = return bundle = control
#pragma HLS dataflow
  hls::stream<float8> fifo_F_to_off_chip;
#pragma HLS stream variable = fifo_F_to_off_chip depth = 1024
  hls::stream<float8> fifo_D_from_off_chip_to_S3;
#pragma HLS stream variable = fifo_D_from_off_chip_to_S3 depth = 1024
  hls::stream<float16> fifo_C_from_off_chip_to_S3;
#pragma HLS stream variable = fifo_C_from_off_chip_to_S3 depth = 1024
  load_vB_for_task1(fifo_B_from_off_chip_to_S1, vB_for_task1);
  load_vA_for_task1(fifo_A_from_off_chip_to_S1, vA_for_task1);
  load_vC_for_task3(fifo_C_from_off_chip_to_S3, vC_for_task3);
  load_vD_for_task3(fifo_D_from_off_chip_to_S3, vD_for_task3);
  FT1_level0(fifo_F_from_task3_to_task5, fifo_C_from_off_chip_to_S3,
             fifo_D_from_off_chip_to_S3, fifo_F_to_off_chip);
  store_vF_for_task3(fifo_F_to_off_chip, vF_for_task3);
  store_vG_for_task5(fifo_G_to_off_chip, vG_for_task5);
  store_vE_for_task1(fifo_E_to_off_chip, vE_for_task1);
}
