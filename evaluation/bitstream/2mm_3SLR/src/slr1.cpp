#include "output.h"

#define READ_RANGE(Arr, data_size, l)                                          \
  (Arr.data.range((data_size) * (l) + (data_size) - 1, (data_size) * (l)))

/****************************************************
 This file was automatically generated by Prometheus
****************************************************/
void FT1_level0(
    float alpha, float beta,
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_tmp_from_task1_to_task3,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_C_from_off_chip_to_S3,
    hls::stream<ap_axiu<128, 0, 0, 0>> &fifo_D_from_off_chip_to_S2,
    hls::stream<ap_axiu<128, 0, 0, 0>> &fifo_D_to_off_chip) {
#pragma HLS inline off
  float tmp_0[9][192];
  // FT1
#pragma HLS array_partition variable = tmp_0 cyclic factor = 9 dim = 1
#pragma HLS array_partition variable = tmp_0 cyclic factor = 4 dim = 2
  float tmp_1[9][192];
  // FT1
#pragma HLS array_partition variable = tmp_1 cyclic factor = 9 dim = 1
#pragma HLS array_partition variable = tmp_1 cyclic factor = 4 dim = 2
  float C[192][220];
#pragma HLS array_partition variable = C cyclic factor = 4 dim = 1
#pragma HLS array_partition variable = C cyclic factor = 20 dim = 2
  read_C_FT1(C, fifo_C_from_off_chip_to_S3);
  read_tmp_FT1(tmp_0, fifo_tmp_from_task1_to_task3, 0);
  for (int i0 = 0; i0 < 20; i0++) {
    if (i0 % 2 == 0) {
      read_tmp_FT1(tmp_1, fifo_tmp_from_task1_to_task3, i0 + 1);
      FT1_level1(alpha, beta, fifo_tmp_from_task1_to_task3,
                 fifo_C_from_off_chip_to_S3, fifo_D_from_off_chip_to_S2,
                 fifo_D_to_off_chip, tmp_0, C, i0);
    } else if (i0 % 2 == 1) {
      read_tmp_FT1(tmp_0, fifo_tmp_from_task1_to_task3, i0 + 1);
      FT1_level1(alpha, beta, fifo_tmp_from_task1_to_task3,
                 fifo_C_from_off_chip_to_S3, fifo_D_from_off_chip_to_S2,
                 fifo_D_to_off_chip, tmp_1, C, i0);
    }
  }
}
void compute_FT1_level1(
    float alpha, float beta,
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_tmp_from_task1_to_task3,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_C_from_off_chip_to_S3,
    hls::stream<ap_axiu<128, 0, 0, 0>> &fifo_D_from_off_chip_to_S2,
    hls::stream<ap_axiu<128, 0, 0, 0>> &fifo_D_to_off_chip, float tmp[9][192],
    float C[192][220], int i0, int j0, float D_0[9][20], float D_1[9][20],
    float D_2[9][20]) {
#pragma HLS inline off
#pragma HLS dataflow
  read_D_FT1(D_0, fifo_D_from_off_chip_to_S2, j0 + 1, i0);
  task2_intra(alpha, beta, tmp, C, i0, D_1, j0);
  task3_intra(alpha, beta, tmp, C, i0, D_1, j0);
  write_D_FT1(D_2, fifo_D_to_off_chip, j0 - 1, i0);
}
void FT1_level1(
    float alpha, float beta,
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_tmp_from_task1_to_task3,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_C_from_off_chip_to_S3,
    hls::stream<ap_axiu<128, 0, 0, 0>> &fifo_D_from_off_chip_to_S2,
    hls::stream<ap_axiu<128, 0, 0, 0>> &fifo_D_to_off_chip, float tmp[9][192],
    float C[192][220], int i0) {
#pragma HLS inline off
  float D_0[9][20];
  // FT1
#pragma HLS array_partition variable = D_0 cyclic factor = 9 dim = 1
#pragma HLS array_partition variable = D_0 cyclic factor = 20 dim = 2
  float D_1[9][20];
  // FT1
#pragma HLS array_partition variable = D_1 cyclic factor = 9 dim = 1
#pragma HLS array_partition variable = D_1 cyclic factor = 20 dim = 2
  float D_2[9][20];
  // FT1
#pragma HLS array_partition variable = D_2 cyclic factor = 9 dim = 1
#pragma HLS array_partition variable = D_2 cyclic factor = 20 dim = 2
  read_D_FT1(D_0, fifo_D_from_off_chip_to_S2, 0, i0);
  for (int j0 = 0; j0 < 11; j0++) {

    if (j0 % 3 == 0) {
      //     read_D_FT1(D_1, fifo_D_from_off_chip_to_S2, j0+1, i0);
      //     task2_intra(alpha, beta, tmp, C, i0, D_0, j0);
      //     task3_intra(alpha, beta, tmp, C, i0, D_0, j0);
      //     write_D_FT1(D_2, fifo_D_to_off_chip, j0-1, i0);
      compute_FT1_level1(alpha, beta, fifo_tmp_from_task1_to_task3,
                         fifo_C_from_off_chip_to_S3, fifo_D_from_off_chip_to_S2,
                         fifo_D_to_off_chip, tmp, C, i0, j0, D_1, D_0, D_2);
    } else if (j0 % 3 == 1) {
      //     read_D_FT1(D_2, fifo_D_from_off_chip_to_S2, j0+1, i0);
      //     task2_intra(alpha, beta, tmp, C, i0, D_1, j0);
      //     task3_intra(alpha, beta, tmp, C, i0, D_1, j0);
      //     write_D_FT1(D_0, fifo_D_to_off_chip, j0-1, i0);
      compute_FT1_level1(alpha, beta, fifo_tmp_from_task1_to_task3,
                         fifo_C_from_off_chip_to_S3, fifo_D_from_off_chip_to_S2,
                         fifo_D_to_off_chip, tmp, C, i0, j0, D_2, D_1, D_0);
    } else if (j0 % 3 == 2) {
      //     read_D_FT1(D_0, fifo_D_from_off_chip_to_S2, j0+1, i0);
      //     task2_intra(alpha, beta, tmp, C, i0, D_2, j0);
      //     task3_intra(alpha, beta, tmp, C, i0, D_2, j0);
      //     write_D_FT1(D_1, fifo_D_to_off_chip, j0-1, i0);
      compute_FT1_level1(alpha, beta, fifo_tmp_from_task1_to_task3,
                         fifo_C_from_off_chip_to_S3, fifo_D_from_off_chip_to_S2,
                         fifo_D_to_off_chip, tmp, C, i0, j0, D_0, D_2, D_1);
    }
  }
  write_D_FT1(D_1, fifo_D_to_off_chip, 10, i0);
}
void task2_intra(float alpha, float beta, float tmp[9][192], float C[192][220],
                 int i0, float D[9][20], int j0) {
#pragma HLS inline off
  int i;
  int j;
  for (int i1 = 0; i1 < 9; i1++) {
#pragma HLS unroll
    for (int j1 = 0; j1 < 20; j1++) {
#pragma HLS unroll
      i = i0 * 9 + i1;
      j = j0 * 20 + j1;
      D[i1][j1] = D[i1][j1] * beta;
    }
  }
}
void task3_intra(float alpha, float beta, float tmp[9][192], float C[192][220],
                 int i0, float D[9][20], int j0) {
#pragma HLS inline off
  int i;
  int j;
  int k;
  for (int k0 = 0; k0 < 48; k0++) {
#pragma HLS pipeline II = 2
    for (int i1 = 0; i1 < 9; i1++) {
#pragma HLS unroll
      for (int j1 = 0; j1 < 20; j1++) {
#pragma HLS unroll
        for (int k1 = 0; k1 < 4; k1++) {
#pragma HLS unroll
          i = i0 * 9 + i1;
          j = j0 * 20 + j1;
          k = k0 * 4 + k1;
          D[i1][j1] = D[i1][j1] + tmp[i1][k] * C[k][j];
        }
      }
    }
  }
}
void read_C_FT1(float C[192][220],
                hls::stream<float16> &fifo_C_from_off_chip_to_S3) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 192; d0++) {
    for (int d1 = 0; d1 < 224; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_C_from_off_chip_to_S3.read();
      if (d1 + 0 < 220)
        C[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      if (d1 + 1 < 220)
        C[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      if (d1 + 2 < 220)
        C[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      if (d1 + 3 < 220)
        C[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      if (d1 + 4 < 220)
        C[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      if (d1 + 5 < 220)
        C[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      if (d1 + 6 < 220)
        C[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      if (d1 + 7 < 220)
        C[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      if (d1 + 8 < 220)
        C[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      if (d1 + 9 < 220)
        C[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      if (d1 + 10 < 220)
        C[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      if (d1 + 11 < 220)
        C[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      if (d1 + 12 < 220)
        C[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      if (d1 + 13 < 220)
        C[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      if (d1 + 14 < 220)
        C[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      if (d1 + 15 < 220)
        C[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}
void read_C_FT1(
    float C[192][220],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_C_from_off_chip_to_S3) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 192; d0++) {
    for (int d1 = 0; d1 < 224; d1 += 16) {
#pragma HLS pipeline II = 1
      ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_C_from_off_chip_to_S3.read();
      if (d1 + 0 < 220) {
        uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
        C[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
      }
      if (d1 + 1 < 220) {
        uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
        C[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
      }
      if (d1 + 2 < 220) {
        uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
        C[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
      }
      if (d1 + 3 < 220) {
        uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
        C[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
      }
      if (d1 + 4 < 220) {
        uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
        C[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
      }
      if (d1 + 5 < 220) {
        uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
        C[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
      }
      if (d1 + 6 < 220) {
        uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
        C[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
      }
      if (d1 + 7 < 220) {
        uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
        C[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
      }
      if (d1 + 8 < 220) {
        uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
        C[d0 + 0][d1 + 0 + 8] = *(float *)(&tmp_8);
      }
      if (d1 + 9 < 220) {
        uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
        C[d0 + 0][d1 + 0 + 9] = *(float *)(&tmp_9);
      }
      if (d1 + 10 < 220) {
        uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
        C[d0 + 0][d1 + 0 + 10] = *(float *)(&tmp_10);
      }
      if (d1 + 11 < 220) {
        uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
        C[d0 + 0][d1 + 0 + 11] = *(float *)(&tmp_11);
      }
      if (d1 + 12 < 220) {
        uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
        C[d0 + 0][d1 + 0 + 12] = *(float *)(&tmp_12);
      }
      if (d1 + 13 < 220) {
        uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
        C[d0 + 0][d1 + 0 + 13] = *(float *)(&tmp_13);
      }
      if (d1 + 14 < 220) {
        uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
        C[d0 + 0][d1 + 0 + 14] = *(float *)(&tmp_14);
      }
      if (d1 + 15 < 220) {
        uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
        C[d0 + 0][d1 + 0 + 15] = *(float *)(&tmp_15);
      }
    }
  }
}
void read_tmp_FT1(float tmp[9][192],
                  hls::stream<float8> &fifo_tmp_from_task1_to_task3, int i0) {
#pragma HLS inline off
  if (i0 >= 20) {
    return;
  }
  for (int d1_0 = 0; d1_0 < 8; d1_0++) {

    for (int d0_1 = 0; d0_1 < 9; d0_1++) {

      for (int d1_1 = 0; d1_1 < 24; d1_1 += 8) {

        int d0 = d0_1;
        int d1 = d1_0 * 24 + d1_1;
        float8 tmp_fifo = fifo_tmp_from_task1_to_task3.read();
        if (d1 + 0 < 192)
          tmp[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
        if (d1 + 1 < 192)
          tmp[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
        if (d1 + 2 < 192)
          tmp[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
        if (d1 + 3 < 192)
          tmp[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
        if (d1 + 4 < 192)
          tmp[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
        if (d1 + 5 < 192)
          tmp[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
        if (d1 + 6 < 192)
          tmp[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
        if (d1 + 7 < 192)
          tmp[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      }
    }
  }
}
void read_tmp_FT1(
    float tmp[9][192],
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_tmp_from_task1_to_task3, int i0) {
#pragma HLS inline off
  if (i0 >= 20) {
    return;
  }
  for (int d1_0 = 0; d1_0 < 8; d1_0++) {

    for (int d0_1 = 0; d0_1 < 9; d0_1++) {

      for (int d1_1 = 0; d1_1 < 24; d1_1 += 8) {

        int d0 = d0_1;
        int d1 = d1_0 * 24 + d1_1;
        ap_axiu<256, 0, 0, 0> tmp_fifo = fifo_tmp_from_task1_to_task3.read();
        if (d1 + 0 < 192) {
          uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
          tmp[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
        }
        if (d1 + 1 < 192) {
          uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
          tmp[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
        }
        if (d1 + 2 < 192) {
          uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
          tmp[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
        }
        if (d1 + 3 < 192) {
          uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
          tmp[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
        }
        if (d1 + 4 < 192) {
          uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
          tmp[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
        }
        if (d1 + 5 < 192) {
          uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
          tmp[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
        }
        if (d1 + 6 < 192) {
          uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
          tmp[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
        }
        if (d1 + 7 < 192) {
          uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
          tmp[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
        }
      }
    }
  }
}
void read_D_FT1(float D[9][20], hls::stream<float4> &fifo_D_from_off_chip_to_S2,
                int j0, int i0) {
#pragma HLS inline off
  if (i0 >= 20 || j0 >= 11) {
    return;
  }
  for (int d0 = 0; d0 < 9; d0++) {
    for (int d1 = 0; d1 < 20; d1 += 4) {
#pragma HLS pipeline II = 1
      float4 tmp_fifo = fifo_D_from_off_chip_to_S2.read();
      D[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      D[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      D[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      D[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
    }
  }
}
void read_D_FT1(float D[9][20],
                hls::stream<ap_axiu<128, 0, 0, 0>> &fifo_D_from_off_chip_to_S2,
                int j0, int i0) {
#pragma HLS inline off
  if (i0 >= 20 || j0 >= 11) {
    return;
  }
  for (int d0 = 0; d0 < 9; d0++) {
    for (int d1 = 0; d1 < 20; d1 += 4) {
#pragma HLS pipeline II = 1
      ap_axiu<128, 0, 0, 0> tmp_fifo = fifo_D_from_off_chip_to_S2.read();
      uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
      D[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
      uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
      D[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
      uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
      D[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
      uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
      D[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
    }
  }
}
void write_D_FT1(float D[9][20], hls::stream<float4> &fifo_D_to_off_chip,
                 int j0, int i0) {
#pragma HLS inline off
  if (j0 < 0 || i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 9; d0++) {
    for (int d1 = 0; d1 < 20; d1 += 4) {
#pragma HLS pipeline II = 1
      float4 tmp_fifo;
      tmp_fifo[0] = D[d0 + 0][d1 + 0 + 0];
      tmp_fifo[1] = D[d0 + 0][d1 + 0 + 1];
      tmp_fifo[2] = D[d0 + 0][d1 + 0 + 2];
      tmp_fifo[3] = D[d0 + 0][d1 + 0 + 3];
      fifo_D_to_off_chip.write(tmp_fifo);
    }
  }
}
void write_D_FT1(float D[9][20],
                 hls::stream<ap_axiu<128, 0, 0, 0>> &fifo_D_to_off_chip, int j0,
                 int i0) {
#pragma HLS inline off
  if (j0 < 0 || i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 9; d0++) {
    for (int d1 = 0; d1 < 20; d1 += 4) {
#pragma HLS pipeline II = 1
      ap_axiu<128, 0, 0, 0> tmp_fifo;
      float tmp_0 = D[d0 + 0][d1 + 0 + 0];
      tmp_fifo.data.range(31, 0) = *(uint32_t *)(&tmp_0);
      float tmp_1 = D[d0 + 0][d1 + 0 + 1];
      tmp_fifo.data.range(63, 32) = *(uint32_t *)(&tmp_1);
      float tmp_2 = D[d0 + 0][d1 + 0 + 2];
      tmp_fifo.data.range(95, 64) = *(uint32_t *)(&tmp_2);
      float tmp_3 = D[d0 + 0][d1 + 0 + 3];
      tmp_fifo.data.range(127, 96) = *(uint32_t *)(&tmp_3);
      fifo_D_to_off_chip.write(tmp_fifo);
    }
  }
}

void kernel_nlp_slr1(
    hls::stream<ap_axiu<32, 0, 0, 0>> &fifo_cte_1,
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_tmp_from_task1_to_task3,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_C_from_off_chip_to_S3,
    hls::stream<ap_axiu<128, 0, 0, 0>> &fifo_D_from_off_chip_to_S2,
    hls::stream<ap_axiu<128, 0, 0, 0>> &fifo_D_to_off_chip) {
#pragma HLS interface ap_ctrl_none port = return
#pragma HLS inline off
#pragma HLS INTERFACE axis port = fifo_tmp_from_task1_to_task3
#pragma HLS INTERFACE axis port = fifo_C_from_off_chip_to_S3
#pragma HLS INTERFACE axis port = fifo_D_from_off_chip_to_S2
#pragma HLS INTERFACE axis port = fifo_D_to_off_chip
  ap_axiu<32, 0, 0, 0> fifo_read_0 = fifo_cte_1.read();
  uint32_t cte_0 = fifo_read_0.data.range(31, 0);
  float alpha = *(float *)(&cte_0);
  ap_axiu<32, 0, 0, 0> fifo_read_1 = fifo_cte_1.read();
  uint32_t cte_1 = fifo_read_1.data.range(31, 0);
  float beta = *(float *)(&cte_1);
  FT1_level0(alpha, beta, fifo_tmp_from_task1_to_task3,
             fifo_C_from_off_chip_to_S3, fifo_D_from_off_chip_to_S2,
             fifo_D_to_off_chip);
}
