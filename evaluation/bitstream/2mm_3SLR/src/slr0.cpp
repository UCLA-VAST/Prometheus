#include "output.h"

#define READ_RANGE(Arr, data_size, l)                                          \
  (Arr.data.range((data_size) * (l) + (data_size) - 1, (data_size) * (l)))

/****************************************************
 This file was automatically generated by Prometheus
****************************************************/
void load_vC_for_task3(hls::stream<float16> &fifo_C_from_off_chip_to_S3,
                       float16 vC[2688]) {
#pragma HLS inline off
  for (int i = 0; i < 2688; i++) {
#pragma HLS pipeline II = 1
    fifo_C_from_off_chip_to_S3.write(vC[i]);
  }
}
void load_vC_for_task3(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_C_from_off_chip_to_S3,
    float16 vC[2688]) {
#pragma HLS inline off
  for (int i = 0; i < 2688; i++) {
#pragma HLS pipeline II = 1
    float16 vC_off = vC[i];
    ap_axiu<512, 0, 0, 0> vC_on;
    vC_on.data.range(31, 0) = *(uint32_t *)(&vC_off[0]);
    vC_on.data.range(63, 32) = *(uint32_t *)(&vC_off[1]);
    vC_on.data.range(95, 64) = *(uint32_t *)(&vC_off[2]);
    vC_on.data.range(127, 96) = *(uint32_t *)(&vC_off[3]);
    vC_on.data.range(159, 128) = *(uint32_t *)(&vC_off[4]);
    vC_on.data.range(191, 160) = *(uint32_t *)(&vC_off[5]);
    vC_on.data.range(223, 192) = *(uint32_t *)(&vC_off[6]);
    vC_on.data.range(255, 224) = *(uint32_t *)(&vC_off[7]);
    vC_on.data.range(287, 256) = *(uint32_t *)(&vC_off[8]);
    vC_on.data.range(319, 288) = *(uint32_t *)(&vC_off[9]);
    vC_on.data.range(351, 320) = *(uint32_t *)(&vC_off[10]);
    vC_on.data.range(383, 352) = *(uint32_t *)(&vC_off[11]);
    vC_on.data.range(415, 384) = *(uint32_t *)(&vC_off[12]);
    vC_on.data.range(447, 416) = *(uint32_t *)(&vC_off[13]);
    vC_on.data.range(479, 448) = *(uint32_t *)(&vC_off[14]);
    vC_on.data.range(511, 480) = *(uint32_t *)(&vC_off[15]);
    fifo_C_from_off_chip_to_S3.write(vC_on);
  }
}
void load_vA_for_task1(hls::stream<float16> &fifo_A_from_off_chip_to_S1,
                       float16 vA[2520]) {
#pragma HLS inline off
  for (int i = 0; i < 2520; i++) {
#pragma HLS pipeline II = 1
    fifo_A_from_off_chip_to_S1.write(vA[i]);
  }
}
void load_vA_for_task1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S1,
    float16 vA[2520]) {
#pragma HLS inline off
  for (int i = 0; i < 2520; i++) {
#pragma HLS pipeline II = 1
    float16 vA_off = vA[i];
    ap_axiu<512, 0, 0, 0> vA_on;
    vA_on.data.range(31, 0) = *(uint32_t *)(&vA_off[0]);
    vA_on.data.range(63, 32) = *(uint32_t *)(&vA_off[1]);
    vA_on.data.range(95, 64) = *(uint32_t *)(&vA_off[2]);
    vA_on.data.range(127, 96) = *(uint32_t *)(&vA_off[3]);
    vA_on.data.range(159, 128) = *(uint32_t *)(&vA_off[4]);
    vA_on.data.range(191, 160) = *(uint32_t *)(&vA_off[5]);
    vA_on.data.range(223, 192) = *(uint32_t *)(&vA_off[6]);
    vA_on.data.range(255, 224) = *(uint32_t *)(&vA_off[7]);
    vA_on.data.range(287, 256) = *(uint32_t *)(&vA_off[8]);
    vA_on.data.range(319, 288) = *(uint32_t *)(&vA_off[9]);
    vA_on.data.range(351, 320) = *(uint32_t *)(&vA_off[10]);
    vA_on.data.range(383, 352) = *(uint32_t *)(&vA_off[11]);
    vA_on.data.range(415, 384) = *(uint32_t *)(&vA_off[12]);
    vA_on.data.range(447, 416) = *(uint32_t *)(&vA_off[13]);
    vA_on.data.range(479, 448) = *(uint32_t *)(&vA_off[14]);
    vA_on.data.range(511, 480) = *(uint32_t *)(&vA_off[15]);
    fifo_A_from_off_chip_to_S1.write(vA_on);
  }
}
void load_vB_for_task1(hls::stream<float16> &fifo_B_from_off_chip_to_S1,
                       float16 vB[2520]) {
#pragma HLS inline off
  for (int i = 0; i < 2520; i++) {
#pragma HLS pipeline II = 1
    fifo_B_from_off_chip_to_S1.write(vB[i]);
  }
}
void load_vB_for_task1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_B_from_off_chip_to_S1,
    float16 vB[2520]) {
#pragma HLS inline off
  for (int i = 0; i < 2520; i++) {
#pragma HLS pipeline II = 1
    float16 vB_off = vB[i];
    ap_axiu<512, 0, 0, 0> vB_on;
    vB_on.data.range(31, 0) = *(uint32_t *)(&vB_off[0]);
    vB_on.data.range(63, 32) = *(uint32_t *)(&vB_off[1]);
    vB_on.data.range(95, 64) = *(uint32_t *)(&vB_off[2]);
    vB_on.data.range(127, 96) = *(uint32_t *)(&vB_off[3]);
    vB_on.data.range(159, 128) = *(uint32_t *)(&vB_off[4]);
    vB_on.data.range(191, 160) = *(uint32_t *)(&vB_off[5]);
    vB_on.data.range(223, 192) = *(uint32_t *)(&vB_off[6]);
    vB_on.data.range(255, 224) = *(uint32_t *)(&vB_off[7]);
    vB_on.data.range(287, 256) = *(uint32_t *)(&vB_off[8]);
    vB_on.data.range(319, 288) = *(uint32_t *)(&vB_off[9]);
    vB_on.data.range(351, 320) = *(uint32_t *)(&vB_off[10]);
    vB_on.data.range(383, 352) = *(uint32_t *)(&vB_off[11]);
    vB_on.data.range(415, 384) = *(uint32_t *)(&vB_off[12]);
    vB_on.data.range(447, 416) = *(uint32_t *)(&vB_off[13]);
    vB_on.data.range(479, 448) = *(uint32_t *)(&vB_off[14]);
    vB_on.data.range(511, 480) = *(uint32_t *)(&vB_off[15]);
    fifo_B_from_off_chip_to_S1.write(vB_on);
  }
}
void load_vD_for_task2(hls::stream<float4> &fifo_D_from_off_chip_to_S2,
                       float4 vD[9900]) {
#pragma HLS inline off
  for (int i = 0; i < 9900; i++) {
#pragma HLS pipeline II = 1
    fifo_D_from_off_chip_to_S2.write(vD[i]);
  }
}
void load_vD_for_task2(
    hls::stream<ap_axiu<128, 0, 0, 0>> &fifo_D_from_off_chip_to_S2,
    float4 vD[9900]) {
#pragma HLS inline off
  for (int i = 0; i < 9900; i++) {
#pragma HLS pipeline II = 1
    float4 vD_off = vD[i];
    ap_axiu<128, 0, 0, 0> vD_on;
    vD_on.data.range(31, 0) = *(uint32_t *)(&vD_off[0]);
    vD_on.data.range(63, 32) = *(uint32_t *)(&vD_off[1]);
    vD_on.data.range(95, 64) = *(uint32_t *)(&vD_off[2]);
    vD_on.data.range(127, 96) = *(uint32_t *)(&vD_off[3]);
    fifo_D_from_off_chip_to_S2.write(vD_on);
  }
}
void store_vtmp_for_task1(hls::stream<float8> &fifo_tmp_to_off_chip,
                          float8 vtmp[4320]) {
#pragma HLS inline off
  for (int i = 0; i < 4320; i++) {
#pragma HLS pipeline II = 1
    vtmp[i] = fifo_tmp_to_off_chip.read();
  }
}
void store_vtmp_for_task1(
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_tmp_to_off_chip,
    float8 vtmp[4320]) {
#pragma HLS inline off
  for (int i = 0; i < 4320; i++) {
#pragma HLS pipeline II = 1
    float8 vtmp_off;
    ap_axiu<256, 0, 0, 0> vtmp_on = fifo_tmp_to_off_chip.read();
    uint32_t vtmp_tmp[8];
    vtmp_tmp[0] = vtmp_on.data.range(31, 0);
    vtmp_off[0] = *(float *)(&vtmp_tmp[0]);
    vtmp_tmp[1] = vtmp_on.data.range(63, 32);
    vtmp_off[1] = *(float *)(&vtmp_tmp[1]);
    vtmp_tmp[2] = vtmp_on.data.range(95, 64);
    vtmp_off[2] = *(float *)(&vtmp_tmp[2]);
    vtmp_tmp[3] = vtmp_on.data.range(127, 96);
    vtmp_off[3] = *(float *)(&vtmp_tmp[3]);
    vtmp_tmp[4] = vtmp_on.data.range(159, 128);
    vtmp_off[4] = *(float *)(&vtmp_tmp[4]);
    vtmp_tmp[5] = vtmp_on.data.range(191, 160);
    vtmp_off[5] = *(float *)(&vtmp_tmp[5]);
    vtmp_tmp[6] = vtmp_on.data.range(223, 192);
    vtmp_off[6] = *(float *)(&vtmp_tmp[6]);
    vtmp_tmp[7] = vtmp_on.data.range(255, 224);
    vtmp_off[7] = *(float *)(&vtmp_tmp[7]);
    vtmp[i] = vtmp_off;
  }
}
void store_vD_for_task2(hls::stream<float4> &fifo_D_to_off_chip,
                        float4 vD[9900]) {
#pragma HLS inline off
  for (int i = 0; i < 9900; i++) {
#pragma HLS pipeline II = 1
    vD[i] = fifo_D_to_off_chip.read();
  }
}
void store_vD_for_task2(hls::stream<ap_axiu<128, 0, 0, 0>> &fifo_D_to_off_chip,
                        float4 vD[9900]) {
#pragma HLS inline off
  for (int i = 0; i < 9900; i++) {
#pragma HLS pipeline II = 1
    float4 vD_off;
    ap_axiu<128, 0, 0, 0> vD_on = fifo_D_to_off_chip.read();
    uint32_t vD_tmp[4];
    vD_tmp[0] = vD_on.data.range(31, 0);
    vD_off[0] = *(float *)(&vD_tmp[0]);
    vD_tmp[1] = vD_on.data.range(63, 32);
    vD_off[1] = *(float *)(&vD_tmp[1]);
    vD_tmp[2] = vD_on.data.range(95, 64);
    vD_off[2] = *(float *)(&vD_tmp[2]);
    vD_tmp[3] = vD_on.data.range(127, 96);
    vD_off[3] = *(float *)(&vD_tmp[3]);
    vD[i] = vD_off;
  }
}
void FT0_level0(
    float alpha, float beta,
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_tmp_from_task1_to_task3,
    hls::stream<float16> &fifo_A_from_off_chip_to_S1,
    hls::stream<float16> &fifo_B_from_off_chip_to_S1,
    hls::stream<float8> &fifo_tmp_to_off_chip) {
#pragma HLS inline off
  float A_0[9][210];
  // FT0
#pragma HLS array_partition variable = A_0 cyclic factor = 9 dim = 1
#pragma HLS array_partition variable = A_0 cyclic factor = 3 dim = 2
  float A_1[9][210];
  // FT0
#pragma HLS array_partition variable = A_1 cyclic factor = 9 dim = 1
#pragma HLS array_partition variable = A_1 cyclic factor = 3 dim = 2
  float B[210][192];
#pragma HLS array_partition variable = B cyclic factor = 3 dim = 1
#pragma HLS array_partition variable = B cyclic factor = 24 dim = 2
  read_B_FT0(B, fifo_B_from_off_chip_to_S1);
  read_A_FT0(A_0, fifo_A_from_off_chip_to_S1, 0);
  for (int i0 = 0; i0 < 20; i0++) {
    if (i0 % 2 == 0) {
      read_A_FT0(A_1, fifo_A_from_off_chip_to_S1, i0 + 1);
      FT0_level1(alpha, beta, fifo_tmp_from_task1_to_task3,
                 fifo_A_from_off_chip_to_S1, fifo_B_from_off_chip_to_S1,
                 fifo_tmp_to_off_chip, A_0, B, i0);
    } else if (i0 % 2 == 1) {
      read_A_FT0(A_0, fifo_A_from_off_chip_to_S1, i0 + 1);
      FT0_level1(alpha, beta, fifo_tmp_from_task1_to_task3,
                 fifo_A_from_off_chip_to_S1, fifo_B_from_off_chip_to_S1,
                 fifo_tmp_to_off_chip, A_1, B, i0);
    }
  }
}
void compute_FT0_level1(
    float alpha, float beta,
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_tmp_from_task1_to_task3,
    hls::stream<float16> &fifo_A_from_off_chip_to_S1,
    hls::stream<float16> &fifo_B_from_off_chip_to_S1,
    hls::stream<float8> &fifo_tmp_to_off_chip, float A[9][210],
    float B[210][192], int i0, int j0, float tmp_0[9][24], float tmp_1[9][24]) {
#pragma HLS inline off
#pragma HLS dataflow
  task0_intra(alpha, beta, A, B, i0, tmp_0, j0);
  task1_intra(alpha, beta, A, B, i0, tmp_0, j0);
  write_tmp_FT0(tmp_1, fifo_tmp_from_task1_to_task3, j0 - 1, i0);
  write_tmp_FT0(tmp_1, fifo_tmp_to_off_chip, j0 - 1, i0);
}
void FT0_level1(
    float alpha, float beta,
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_tmp_from_task1_to_task3,
    hls::stream<float16> &fifo_A_from_off_chip_to_S1,
    hls::stream<float16> &fifo_B_from_off_chip_to_S1,
    hls::stream<float8> &fifo_tmp_to_off_chip, float A[9][210],
    float B[210][192], int i0) {
#pragma HLS inline off
  float tmp_0[9][24];
  // FT0
#pragma HLS array_partition variable = tmp_0 cyclic factor = 9 dim = 1
#pragma HLS array_partition variable = tmp_0 cyclic factor = 24 dim = 2
  float tmp_1[9][24];
  // FT0
#pragma HLS array_partition variable = tmp_1 cyclic factor = 9 dim = 1
#pragma HLS array_partition variable = tmp_1 cyclic factor = 24 dim = 2
  for (int j0 = 0; j0 < 8; j0++) {

    if (j0 % 2 == 0) {
      //     task0_intra(alpha, beta, A, B, i0, tmp_0, j0);
      //     task1_intra(alpha, beta, A, B, i0, tmp_0, j0);
      //     write_tmp_FT0(tmp_1, fifo_tmp_from_task1_to_task3, j0-1, i0);
      //     write_tmp_FT0(tmp_1, fifo_tmp_to_off_chip, j0-1, i0);
      compute_FT0_level1(alpha, beta, fifo_tmp_from_task1_to_task3,
                         fifo_A_from_off_chip_to_S1, fifo_B_from_off_chip_to_S1,
                         fifo_tmp_to_off_chip, A, B, i0, j0, tmp_0, tmp_1);
    } else if (j0 % 2 == 1) {
      //     task0_intra(alpha, beta, A, B, i0, tmp_1, j0);
      //     task1_intra(alpha, beta, A, B, i0, tmp_1, j0);
      //     write_tmp_FT0(tmp_0, fifo_tmp_from_task1_to_task3, j0-1, i0);
      //     write_tmp_FT0(tmp_0, fifo_tmp_to_off_chip, j0-1, i0);
      compute_FT0_level1(alpha, beta, fifo_tmp_from_task1_to_task3,
                         fifo_A_from_off_chip_to_S1, fifo_B_from_off_chip_to_S1,
                         fifo_tmp_to_off_chip, A, B, i0, j0, tmp_1, tmp_0);
    }
  }
  write_tmp_FT0(tmp_1, fifo_tmp_from_task1_to_task3, 7, i0);
  write_tmp_FT0(tmp_1, fifo_tmp_to_off_chip, 7, i0);
}
void task0_intra(float alpha, float beta, float A[9][210], float B[210][192],
                 int i0, float tmp[9][24], int j0) {
#pragma HLS inline off
  int i;
  int j;
  for (int i1 = 0; i1 < 9; i1++) {
#pragma HLS unroll
    for (int j1 = 0; j1 < 24; j1++) {
#pragma HLS unroll
      i = i0 * 9 + i1;
      j = j0 * 24 + j1;
      tmp[i1][j1] = 0.0;
    }
  }
}
void task1_intra(float alpha, float beta, float A[9][210], float B[210][192],
                 int i0, float tmp[9][24], int j0) {
#pragma HLS inline off
  int i;
  int j;
  int k;
  for (int k0 = 0; k0 < 70; k0++) {
#pragma HLS pipeline II = 2
    for (int i1 = 0; i1 < 9; i1++) {
#pragma HLS unroll
      for (int j1 = 0; j1 < 24; j1++) {
#pragma HLS unroll
        for (int k1 = 0; k1 < 3; k1++) {
#pragma HLS unroll
          i = i0 * 9 + i1;
          j = j0 * 24 + j1;
          k = k0 * 3 + k1;
          tmp[i1][j1] = tmp[i1][j1] + alpha * A[i1][k] * B[k][j];
        }
      }
    }
  }
}
void read_B_FT0(float B[210][192],
                hls::stream<float16> &fifo_B_from_off_chip_to_S1) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 210; d0++) {
    for (int d1 = 0; d1 < 192; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_B_from_off_chip_to_S1.read();
      B[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      B[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      B[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      B[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      B[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      B[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      B[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      B[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      B[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      B[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      B[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      B[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      B[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      B[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      B[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      B[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}
void read_B_FT0(
    float B[210][192],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_B_from_off_chip_to_S1) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 210; d0++) {
    for (int d1 = 0; d1 < 192; d1 += 16) {
#pragma HLS pipeline II = 1
      ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_B_from_off_chip_to_S1.read();
      uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
      B[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
      uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
      B[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
      uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
      B[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
      uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
      B[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
      uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
      B[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
      uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
      B[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
      uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
      B[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
      uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
      B[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
      uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
      B[d0 + 0][d1 + 0 + 8] = *(float *)(&tmp_8);
      uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
      B[d0 + 0][d1 + 0 + 9] = *(float *)(&tmp_9);
      uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
      B[d0 + 0][d1 + 0 + 10] = *(float *)(&tmp_10);
      uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
      B[d0 + 0][d1 + 0 + 11] = *(float *)(&tmp_11);
      uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
      B[d0 + 0][d1 + 0 + 12] = *(float *)(&tmp_12);
      uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
      B[d0 + 0][d1 + 0 + 13] = *(float *)(&tmp_13);
      uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
      B[d0 + 0][d1 + 0 + 14] = *(float *)(&tmp_14);
      uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
      B[d0 + 0][d1 + 0 + 15] = *(float *)(&tmp_15);
    }
  }
}
void read_A_FT0(float A[9][210],
                hls::stream<float16> &fifo_A_from_off_chip_to_S1, int i0) {
#pragma HLS inline off
  if (i0 >= 20) {
    return;
  }
  for (int d0 = 0; d0 < 9; d0++) {
    for (int d1 = 0; d1 < 210; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_A_from_off_chip_to_S1.read();
      if (d1 + 0 < 210)
        A[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      if (d1 + 1 < 210)
        A[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      if (d1 + 2 < 210)
        A[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      if (d1 + 3 < 210)
        A[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      if (d1 + 4 < 210)
        A[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      if (d1 + 5 < 210)
        A[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      if (d1 + 6 < 210)
        A[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      if (d1 + 7 < 210)
        A[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      if (d1 + 8 < 210)
        A[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      if (d1 + 9 < 210)
        A[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      if (d1 + 10 < 210)
        A[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      if (d1 + 11 < 210)
        A[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      if (d1 + 12 < 210)
        A[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      if (d1 + 13 < 210)
        A[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      if (d1 + 14 < 210)
        A[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      if (d1 + 15 < 210)
        A[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}
void read_A_FT0(float A[9][210],
                hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S1,
                int i0) {
#pragma HLS inline off
  if (i0 >= 20) {
    return;
  }
  for (int d0 = 0; d0 < 9; d0++) {
    for (int d1 = 0; d1 < 210; d1 += 16) {
#pragma HLS pipeline II = 1
      ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_A_from_off_chip_to_S1.read();
      if (d1 + 0 < 210) {
        uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
        A[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
      }
      if (d1 + 1 < 210) {
        uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
        A[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
      }
      if (d1 + 2 < 210) {
        uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
        A[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
      }
      if (d1 + 3 < 210) {
        uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
        A[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
      }
      if (d1 + 4 < 210) {
        uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
        A[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
      }
      if (d1 + 5 < 210) {
        uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
        A[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
      }
      if (d1 + 6 < 210) {
        uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
        A[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
      }
      if (d1 + 7 < 210) {
        uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
        A[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
      }
      if (d1 + 8 < 210) {
        uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
        A[d0 + 0][d1 + 0 + 8] = *(float *)(&tmp_8);
      }
      if (d1 + 9 < 210) {
        uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
        A[d0 + 0][d1 + 0 + 9] = *(float *)(&tmp_9);
      }
      if (d1 + 10 < 210) {
        uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
        A[d0 + 0][d1 + 0 + 10] = *(float *)(&tmp_10);
      }
      if (d1 + 11 < 210) {
        uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
        A[d0 + 0][d1 + 0 + 11] = *(float *)(&tmp_11);
      }
      if (d1 + 12 < 210) {
        uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
        A[d0 + 0][d1 + 0 + 12] = *(float *)(&tmp_12);
      }
      if (d1 + 13 < 210) {
        uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
        A[d0 + 0][d1 + 0 + 13] = *(float *)(&tmp_13);
      }
      if (d1 + 14 < 210) {
        uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
        A[d0 + 0][d1 + 0 + 14] = *(float *)(&tmp_14);
      }
      if (d1 + 15 < 210) {
        uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
        A[d0 + 0][d1 + 0 + 15] = *(float *)(&tmp_15);
      }
    }
  }
}
void write_tmp_FT0(float tmp[9][24],
                   hls::stream<float8> &fifo_tmp_from_task1_to_task3, int j0,
                   int i0) {
#pragma HLS inline off
  if (j0 < 0 || i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 9; d0++) {
    for (int d1 = 0; d1 < 24; d1 += 8) {
#pragma HLS pipeline II = 1
      float8 tmp_fifo;
      tmp_fifo[0] = tmp[d0 + 0][d1 + 0 + 0];
      tmp_fifo[1] = tmp[d0 + 0][d1 + 0 + 1];
      tmp_fifo[2] = tmp[d0 + 0][d1 + 0 + 2];
      tmp_fifo[3] = tmp[d0 + 0][d1 + 0 + 3];
      tmp_fifo[4] = tmp[d0 + 0][d1 + 0 + 4];
      tmp_fifo[5] = tmp[d0 + 0][d1 + 0 + 5];
      tmp_fifo[6] = tmp[d0 + 0][d1 + 0 + 6];
      tmp_fifo[7] = tmp[d0 + 0][d1 + 0 + 7];
      fifo_tmp_from_task1_to_task3.write(tmp_fifo);
    }
  }
}
void write_tmp_FT0(
    float tmp[9][24],
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_tmp_from_task1_to_task3, int j0,
    int i0) {
#pragma HLS inline off
  if (j0 < 0 || i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 9; d0++) {
    for (int d1 = 0; d1 < 24; d1 += 8) {
#pragma HLS pipeline II = 1
      ap_axiu<256, 0, 0, 0> tmp_fifo;
      float tmp_0 = tmp[d0 + 0][d1 + 0 + 0];
      tmp_fifo.data.range(31, 0) = *(uint32_t *)(&tmp_0);
      float tmp_1 = tmp[d0 + 0][d1 + 0 + 1];
      tmp_fifo.data.range(63, 32) = *(uint32_t *)(&tmp_1);
      float tmp_2 = tmp[d0 + 0][d1 + 0 + 2];
      tmp_fifo.data.range(95, 64) = *(uint32_t *)(&tmp_2);
      float tmp_3 = tmp[d0 + 0][d1 + 0 + 3];
      tmp_fifo.data.range(127, 96) = *(uint32_t *)(&tmp_3);
      float tmp_4 = tmp[d0 + 0][d1 + 0 + 4];
      tmp_fifo.data.range(159, 128) = *(uint32_t *)(&tmp_4);
      float tmp_5 = tmp[d0 + 0][d1 + 0 + 5];
      tmp_fifo.data.range(191, 160) = *(uint32_t *)(&tmp_5);
      float tmp_6 = tmp[d0 + 0][d1 + 0 + 6];
      tmp_fifo.data.range(223, 192) = *(uint32_t *)(&tmp_6);
      float tmp_7 = tmp[d0 + 0][d1 + 0 + 7];
      tmp_fifo.data.range(255, 224) = *(uint32_t *)(&tmp_7);
      fifo_tmp_from_task1_to_task3.write(tmp_fifo);
    }
  }
}

void kernel_nlp_slr0(
    float alpha, float beta, float8 vtmp_for_task1[4320],
    float16 vA_for_task1[2520], float16 vB_for_task1[2520],
    float4 vD_for_task2[9900], float16 vC_for_task3[2688],
    hls::stream<ap_axiu<32, 0, 0, 0>> &fifo_cte_1,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_C_from_off_chip_to_S3,
    hls::stream<ap_axiu<128, 0, 0, 0>> &fifo_D_from_off_chip_to_S2,
    hls::stream<ap_axiu<128, 0, 0, 0>> &fifo_D_to_off_chip,
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_tmp_from_task1_to_task3) {
#pragma HLS INTERFACE axis port = fifo_cte_1
#pragma HLS INTERFACE axis port = fifo_tmp_from_task1_to_task3
#pragma HLS INTERFACE axis port = fifo_C_from_off_chip_to_S3
#pragma HLS INTERFACE axis port = fifo_D_from_off_chip_to_S2
#pragma HLS INTERFACE axis port = fifo_D_to_off_chip
#pragma HLS INTERFACE m_axi port = alpha offset = slave bundle = kernel_alpha
#pragma HLS INTERFACE m_axi port = beta offset = slave bundle = kernel_beta
#pragma HLS INTERFACE m_axi port = vtmp_for_task1 offset = slave bundle =      \
    kernel_vtmp_for_task1
#pragma HLS INTERFACE m_axi port = vA_for_task1 offset = slave bundle =        \
    kernel_vA_for_task1
#pragma HLS INTERFACE m_axi port = vB_for_task1 offset = slave bundle =        \
    kernel_vB_for_task1
#pragma HLS INTERFACE m_axi port = vD_for_task2 offset = slave bundle =        \
    kernel_vD_for_task2
#pragma HLS INTERFACE m_axi port = vC_for_task3 offset = slave bundle =        \
    kernel_vC_for_task3
#pragma HLS INTERFACE s_axilite port = alpha bundle = control
#pragma HLS INTERFACE s_axilite port = beta bundle = control
#pragma HLS INTERFACE s_axilite port = vtmp_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vA_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vB_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vD_for_task2 bundle = control
#pragma HLS INTERFACE s_axilite port = vC_for_task3 bundle = control
#pragma HLS DATA_PACK VARIABLE = alpha
#pragma HLS DATA_PACK VARIABLE = beta
#pragma HLS DATA_PACK VARIABLE = vtmp_for_task1
#pragma HLS DATA_PACK VARIABLE = vA_for_task1
#pragma HLS DATA_PACK VARIABLE = vB_for_task1
#pragma HLS DATA_PACK VARIABLE = vD_for_task2
#pragma HLS DATA_PACK VARIABLE = vC_for_task3
#pragma HLS INTERFACE s_axilite port = return bundle = control
#pragma HLS dataflow
  hls::stream<float8> fifo_tmp_to_off_chip;
#pragma HLS stream variable = fifo_tmp_to_off_chip depth = 1024
  hls::stream<float16> fifo_B_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_B_from_off_chip_to_S1 depth = 1024
  hls::stream<float16> fifo_A_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_A_from_off_chip_to_S1 depth = 1024
  ap_axiu<32, 0, 0, 0> cte_0;
  cte_0.data.range(31, 0) = *(uint32_t *)(&alpha);
  fifo_cte_1.write(cte_0);
  ap_axiu<32, 0, 0, 0> cte_1;
  cte_1.data.range(31, 0) = *(uint32_t *)(&beta);
  fifo_cte_1.write(cte_1);
  load_vC_for_task3(fifo_C_from_off_chip_to_S3, vC_for_task3);
  load_vA_for_task1(fifo_A_from_off_chip_to_S1, vA_for_task1);
  load_vB_for_task1(fifo_B_from_off_chip_to_S1, vB_for_task1);
  load_vD_for_task2(fifo_D_from_off_chip_to_S2, vD_for_task2);
  FT0_level0(alpha, beta, fifo_tmp_from_task1_to_task3,
             fifo_A_from_off_chip_to_S1, fifo_B_from_off_chip_to_S1,
             fifo_tmp_to_off_chip);
  store_vtmp_for_task1(fifo_tmp_to_off_chip, vtmp_for_task1);
  store_vD_for_task2(fifo_D_to_off_chip, vD_for_task2);
}
