#include "output_2.h"

#define READ_RANGE(Arr, data_size, l)                                          \
  (Arr.data.range((data_size) * (l) + (data_size) - 1, (data_size) * (l)))

/****************************************************
 This file was automatically generated by Prometheus
****************************************************/
void load_vC_for_task3(hls::stream<float16> &fifo_C_from_off_chip_to_S3,
                       float16 vC[2688]) {
#pragma HLS inline off
  for (int i = 0; i < 2688; i++) {
#pragma HLS pipeline II = 1
    fifo_C_from_off_chip_to_S3.write(vC[i]);
  }
}

void load_vA_for_task1(hls::stream<float16> &fifo_A_from_off_chip_to_S1,
                       float16 vA[2520]) {
#pragma HLS inline off
  for (int i = 0; i < 2520; i++) {
#pragma HLS pipeline II = 1
    fifo_A_from_off_chip_to_S1.write(vA[i]);
  }
}

void load_vB_for_task1(hls::stream<float16> &fifo_B_from_off_chip_to_S1,
                       float16 vB[2520]) {
#pragma HLS inline off
  for (int i = 0; i < 2520; i++) {
#pragma HLS pipeline II = 1
    fifo_B_from_off_chip_to_S1.write(vB[i]);
  }
}

void load_vD_for_task2(hls::stream<float4> &fifo_D_from_off_chip_to_S2,
                       float4 vD[9900]) {
#pragma HLS inline off
  for (int i = 0; i < 9900; i++) {
#pragma HLS pipeline II = 1
    fifo_D_from_off_chip_to_S2.write(vD[i]);
  }
}

void store_vtmp_for_task1(hls::stream<float8> &fifo_tmp_to_off_chip,
                          float8 vtmp[4320]) {
#pragma HLS inline off
  for (int i = 0; i < 4320; i++) {
#pragma HLS pipeline II = 1
    vtmp[i] = fifo_tmp_to_off_chip.read();
  }
}

void store_vD_for_task2(hls::stream<float4> &fifo_D_to_off_chip,
                        float4 vD[9900]) {
#pragma HLS inline off
  for (int i = 0; i < 9900; i++) {
#pragma HLS pipeline II = 1
    vD[i] = fifo_D_to_off_chip.read();
  }
}

void FT0_level0(float alpha, float beta,
                hls::stream<float8> &fifo_tmp_from_task1_to_task3,
                hls::stream<float16> &fifo_A_from_off_chip_to_S1,
                hls::stream<float16> &fifo_B_from_off_chip_to_S1,
                hls::stream<float8> &fifo_tmp_to_off_chip) {
#pragma HLS inline off
  float A_0[9][210];
  // FT0
#pragma HLS array_partition variable = A_0 cyclic factor = 9 dim = 1
#pragma HLS array_partition variable = A_0 cyclic factor = 3 dim = 2
  float A_1[9][210];
  // FT0
#pragma HLS array_partition variable = A_1 cyclic factor = 9 dim = 1
#pragma HLS array_partition variable = A_1 cyclic factor = 3 dim = 2
  float B[210][192];
#pragma HLS array_partition variable = B cyclic factor = 3 dim = 1
#pragma HLS array_partition variable = B cyclic factor = 24 dim = 2
  read_B_FT0(B, fifo_B_from_off_chip_to_S1);
  read_A_FT0(A_0, fifo_A_from_off_chip_to_S1, 0);
  for (int i0 = 0; i0 < 20; i0++) {
    if (i0 % 2 == 0) {
      read_A_FT0(A_1, fifo_A_from_off_chip_to_S1, i0 + 1);
      FT0_level1(alpha, beta, fifo_tmp_from_task1_to_task3,
                 fifo_A_from_off_chip_to_S1, fifo_B_from_off_chip_to_S1,
                 fifo_tmp_to_off_chip, A_0, B, i0);
    } else if (i0 % 2 == 1) {
      read_A_FT0(A_0, fifo_A_from_off_chip_to_S1, i0 + 1);
      FT0_level1(alpha, beta, fifo_tmp_from_task1_to_task3,
                 fifo_A_from_off_chip_to_S1, fifo_B_from_off_chip_to_S1,
                 fifo_tmp_to_off_chip, A_1, B, i0);
    }
  }
}
void compute_FT0_level1(float alpha, float beta,
                        hls::stream<float8> &fifo_tmp_from_task1_to_task3,
                        hls::stream<float16> &fifo_A_from_off_chip_to_S1,
                        hls::stream<float16> &fifo_B_from_off_chip_to_S1,
                        hls::stream<float8> &fifo_tmp_to_off_chip,
                        float A[9][210], float B[210][192], int i0, int j0,
                        float tmp_0[9][24], float tmp_1[9][24]) {
#pragma HLS inline off
#pragma HLS dataflow
  task0_intra(alpha, beta, A, B, i0, tmp_0, j0);
  task1_intra(alpha, beta, A, B, i0, tmp_0, j0);
  write_tmp_FT0(tmp_1, fifo_tmp_from_task1_to_task3, j0 - 1, i0);
  write_tmp_FT0(tmp_1, fifo_tmp_to_off_chip, j0 - 1, i0);
}

void FT0_level1(float alpha, float beta,
                hls::stream<float8> &fifo_tmp_from_task1_to_task3,
                hls::stream<float16> &fifo_A_from_off_chip_to_S1,
                hls::stream<float16> &fifo_B_from_off_chip_to_S1,
                hls::stream<float8> &fifo_tmp_to_off_chip, float A[9][210],
                float B[210][192], int i0) {
#pragma HLS inline off
  float tmp_0[9][24];
  // FT0
#pragma HLS array_partition variable = tmp_0 cyclic factor = 9 dim = 1
#pragma HLS array_partition variable = tmp_0 cyclic factor = 24 dim = 2
  float tmp_1[9][24];
  // FT0
#pragma HLS array_partition variable = tmp_1 cyclic factor = 9 dim = 1
#pragma HLS array_partition variable = tmp_1 cyclic factor = 24 dim = 2
  for (int j0 = 0; j0 < 8; j0++) {

    if (j0 % 2 == 0) {
      //     task0_intra(alpha, beta, A, B, i0, tmp_0, j0);
      //     task1_intra(alpha, beta, A, B, i0, tmp_0, j0);
      //     write_tmp_FT0(tmp_1, fifo_tmp_from_task1_to_task3, j0-1, i0);
      //     write_tmp_FT0(tmp_1, fifo_tmp_to_off_chip, j0-1, i0);
      compute_FT0_level1(alpha, beta, fifo_tmp_from_task1_to_task3,
                         fifo_A_from_off_chip_to_S1, fifo_B_from_off_chip_to_S1,
                         fifo_tmp_to_off_chip, A, B, i0, j0, tmp_0, tmp_1);
    } else if (j0 % 2 == 1) {
      //     task0_intra(alpha, beta, A, B, i0, tmp_1, j0);
      //     task1_intra(alpha, beta, A, B, i0, tmp_1, j0);
      //     write_tmp_FT0(tmp_0, fifo_tmp_from_task1_to_task3, j0-1, i0);
      //     write_tmp_FT0(tmp_0, fifo_tmp_to_off_chip, j0-1, i0);
      compute_FT0_level1(alpha, beta, fifo_tmp_from_task1_to_task3,
                         fifo_A_from_off_chip_to_S1, fifo_B_from_off_chip_to_S1,
                         fifo_tmp_to_off_chip, A, B, i0, j0, tmp_1, tmp_0);
    }
  }
  write_tmp_FT0(tmp_1, fifo_tmp_from_task1_to_task3, 7, i0);
  write_tmp_FT0(tmp_1, fifo_tmp_to_off_chip, 7, i0);
}
void FT1_level0(float alpha, float beta,
                hls::stream<float8> &fifo_tmp_from_task1_to_task3,
                hls::stream<float16> &fifo_C_from_off_chip_to_S3,
                hls::stream<float4> &fifo_D_from_off_chip_to_S2,
                hls::stream<float4> &fifo_D_to_off_chip) {
#pragma HLS inline off
  float tmp_0[9][192];
  // FT1
#pragma HLS array_partition variable = tmp_0 cyclic factor = 9 dim = 1
#pragma HLS array_partition variable = tmp_0 cyclic factor = 4 dim = 2
  float tmp_1[9][192];
  // FT1
#pragma HLS array_partition variable = tmp_1 cyclic factor = 9 dim = 1
#pragma HLS array_partition variable = tmp_1 cyclic factor = 4 dim = 2
  float C[192][220];
#pragma HLS array_partition variable = C cyclic factor = 4 dim = 1
#pragma HLS array_partition variable = C cyclic factor = 20 dim = 2
  read_C_FT1(C, fifo_C_from_off_chip_to_S3);
  read_tmp_FT1(tmp_0, fifo_tmp_from_task1_to_task3, 0);
  for (int i0 = 0; i0 < 20; i0++) {
    if (i0 % 2 == 0) {
      read_tmp_FT1(tmp_1, fifo_tmp_from_task1_to_task3, i0 + 1);
      FT1_level1(alpha, beta, fifo_tmp_from_task1_to_task3,
                 fifo_C_from_off_chip_to_S3, fifo_D_from_off_chip_to_S2,
                 fifo_D_to_off_chip, tmp_0, C, i0);
    } else if (i0 % 2 == 1) {
      read_tmp_FT1(tmp_0, fifo_tmp_from_task1_to_task3, i0 + 1);
      FT1_level1(alpha, beta, fifo_tmp_from_task1_to_task3,
                 fifo_C_from_off_chip_to_S3, fifo_D_from_off_chip_to_S2,
                 fifo_D_to_off_chip, tmp_1, C, i0);
    }
  }
}
void compute_FT1_level1(float alpha, float beta,
                        hls::stream<float8> &fifo_tmp_from_task1_to_task3,
                        hls::stream<float16> &fifo_C_from_off_chip_to_S3,
                        hls::stream<float4> &fifo_D_from_off_chip_to_S2,
                        hls::stream<float4> &fifo_D_to_off_chip,
                        float tmp[9][192], float C[192][220], int i0, int j0,
                        float D_0[9][20], float D_1[9][20], float D_2[9][20]) {
#pragma HLS inline off
#pragma HLS dataflow
  read_D_FT1(D_0, fifo_D_from_off_chip_to_S2, j0 + 1, i0);
  task2_intra(alpha, beta, tmp, C, i0, D_1, j0);
  task3_intra(alpha, beta, tmp, C, i0, D_1, j0);
  write_D_FT1(D_2, fifo_D_to_off_chip, j0 - 1, i0);
}

void FT1_level1(float alpha, float beta,
                hls::stream<float8> &fifo_tmp_from_task1_to_task3,
                hls::stream<float16> &fifo_C_from_off_chip_to_S3,
                hls::stream<float4> &fifo_D_from_off_chip_to_S2,
                hls::stream<float4> &fifo_D_to_off_chip, float tmp[9][192],
                float C[192][220], int i0) {
#pragma HLS inline off
  float D_0[9][20];
  // FT1
#pragma HLS array_partition variable = D_0 cyclic factor = 9 dim = 1
#pragma HLS array_partition variable = D_0 cyclic factor = 20 dim = 2
  float D_1[9][20];
  // FT1
#pragma HLS array_partition variable = D_1 cyclic factor = 9 dim = 1
#pragma HLS array_partition variable = D_1 cyclic factor = 20 dim = 2
  float D_2[9][20];
  // FT1
#pragma HLS array_partition variable = D_2 cyclic factor = 9 dim = 1
#pragma HLS array_partition variable = D_2 cyclic factor = 20 dim = 2
  read_D_FT1(D_0, fifo_D_from_off_chip_to_S2, 0, i0);
  for (int j0 = 0; j0 < 11; j0++) {

    if (j0 % 3 == 0) {
      //     read_D_FT1(D_1, fifo_D_from_off_chip_to_S2, j0+1, i0);
      //     task2_intra(alpha, beta, tmp, C, i0, D_0, j0);
      //     task3_intra(alpha, beta, tmp, C, i0, D_0, j0);
      //     write_D_FT1(D_2, fifo_D_to_off_chip, j0-1, i0);
      compute_FT1_level1(alpha, beta, fifo_tmp_from_task1_to_task3,
                         fifo_C_from_off_chip_to_S3, fifo_D_from_off_chip_to_S2,
                         fifo_D_to_off_chip, tmp, C, i0, j0, D_1, D_0, D_2);
    } else if (j0 % 3 == 1) {
      //     read_D_FT1(D_2, fifo_D_from_off_chip_to_S2, j0+1, i0);
      //     task2_intra(alpha, beta, tmp, C, i0, D_1, j0);
      //     task3_intra(alpha, beta, tmp, C, i0, D_1, j0);
      //     write_D_FT1(D_0, fifo_D_to_off_chip, j0-1, i0);
      compute_FT1_level1(alpha, beta, fifo_tmp_from_task1_to_task3,
                         fifo_C_from_off_chip_to_S3, fifo_D_from_off_chip_to_S2,
                         fifo_D_to_off_chip, tmp, C, i0, j0, D_2, D_1, D_0);
    } else if (j0 % 3 == 2) {
      //     read_D_FT1(D_0, fifo_D_from_off_chip_to_S2, j0+1, i0);
      //     task2_intra(alpha, beta, tmp, C, i0, D_2, j0);
      //     task3_intra(alpha, beta, tmp, C, i0, D_2, j0);
      //     write_D_FT1(D_1, fifo_D_to_off_chip, j0-1, i0);
      compute_FT1_level1(alpha, beta, fifo_tmp_from_task1_to_task3,
                         fifo_C_from_off_chip_to_S3, fifo_D_from_off_chip_to_S2,
                         fifo_D_to_off_chip, tmp, C, i0, j0, D_0, D_2, D_1);
    }
  }
  write_D_FT1(D_1, fifo_D_to_off_chip, 10, i0);
}
void task0_intra(float alpha, float beta, float A[9][210], float B[210][192],
                 int i0, float tmp[9][24], int j0) {
#pragma HLS inline off
  int i;
  int j;
  for (int i1 = 0; i1 < 9; i1++) {
#pragma HLS unroll
    for (int j1 = 0; j1 < 24; j1++) {
#pragma HLS unroll
      i = i0 * 9 + i1;
      j = j0 * 24 + j1;
      tmp[i1][j1] = 0.0;
    }
  }
}

void task1_intra(float alpha, float beta, float A[9][210], float B[210][192],
                 int i0, float tmp[9][24], int j0) {
#pragma HLS inline off
  int i;
  int j;
  int k;
  for (int k0 = 0; k0 < 70; k0++) {
#pragma HLS pipeline II = 2
    for (int i1 = 0; i1 < 9; i1++) {
#pragma HLS unroll
      for (int j1 = 0; j1 < 24; j1++) {
#pragma HLS unroll
        for (int k1 = 0; k1 < 3; k1++) {
#pragma HLS unroll
          i = i0 * 9 + i1;
          j = j0 * 24 + j1;
          k = k0 * 3 + k1;
          tmp[i1][j1] = tmp[i1][j1] + alpha * A[i1][k] * B[k][j];
        }
      }
    }
  }
}

void task2_intra(float alpha, float beta, float tmp[9][192], float C[192][220],
                 int i0, float D[9][20], int j0) {
#pragma HLS inline off
  int i;
  int j;
  for (int i1 = 0; i1 < 9; i1++) {
#pragma HLS unroll
    for (int j1 = 0; j1 < 20; j1++) {
#pragma HLS unroll
      i = i0 * 9 + i1;
      j = j0 * 20 + j1;
      D[i1][j1] = D[i1][j1] * beta;
    }
  }
}

void task3_intra(float alpha, float beta, float tmp[9][192], float C[192][220],
                 int i0, float D[9][20], int j0) {
#pragma HLS inline off
  int i;
  int j;
  int k;
  for (int k0 = 0; k0 < 48; k0++) {
#pragma HLS pipeline II = 2
    for (int i1 = 0; i1 < 9; i1++) {
#pragma HLS unroll
      for (int j1 = 0; j1 < 20; j1++) {
#pragma HLS unroll
        for (int k1 = 0; k1 < 4; k1++) {
#pragma HLS unroll
          i = i0 * 9 + i1;
          j = j0 * 20 + j1;
          k = k0 * 4 + k1;
          D[i1][j1] = D[i1][j1] + tmp[i1][k] * C[k][j];
        }
      }
    }
  }
}

void read_B_FT0(float B[210][192],
                hls::stream<float16> &fifo_B_from_off_chip_to_S1) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 210; d0++) {
    for (int d1 = 0; d1 < 192; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_B_from_off_chip_to_S1.read();
      B[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      B[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      B[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      B[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      B[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      B[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      B[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      B[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      B[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      B[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      B[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      B[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      B[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      B[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      B[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      B[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}

void read_A_FT0(float A[9][210],
                hls::stream<float16> &fifo_A_from_off_chip_to_S1, int i0) {
#pragma HLS inline off
  if (i0 >= 20) {
    return;
  }
  for (int d0 = 0; d0 < 9; d0++) {
    for (int d1 = 0; d1 < 210; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_A_from_off_chip_to_S1.read();
      if (d1 + 0 < 210)
        A[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      if (d1 + 1 < 210)
        A[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      if (d1 + 2 < 210)
        A[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      if (d1 + 3 < 210)
        A[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      if (d1 + 4 < 210)
        A[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      if (d1 + 5 < 210)
        A[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      if (d1 + 6 < 210)
        A[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      if (d1 + 7 < 210)
        A[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      if (d1 + 8 < 210)
        A[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      if (d1 + 9 < 210)
        A[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      if (d1 + 10 < 210)
        A[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      if (d1 + 11 < 210)
        A[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      if (d1 + 12 < 210)
        A[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      if (d1 + 13 < 210)
        A[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      if (d1 + 14 < 210)
        A[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      if (d1 + 15 < 210)
        A[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}

void read_C_FT1(float C[192][220],
                hls::stream<float16> &fifo_C_from_off_chip_to_S3) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 192; d0++) {
    for (int d1 = 0; d1 < 224; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_C_from_off_chip_to_S3.read();
      if (d1 + 0 < 220)
        C[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      if (d1 + 1 < 220)
        C[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      if (d1 + 2 < 220)
        C[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      if (d1 + 3 < 220)
        C[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      if (d1 + 4 < 220)
        C[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      if (d1 + 5 < 220)
        C[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      if (d1 + 6 < 220)
        C[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      if (d1 + 7 < 220)
        C[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      if (d1 + 8 < 220)
        C[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      if (d1 + 9 < 220)
        C[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      if (d1 + 10 < 220)
        C[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      if (d1 + 11 < 220)
        C[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      if (d1 + 12 < 220)
        C[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      if (d1 + 13 < 220)
        C[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      if (d1 + 14 < 220)
        C[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      if (d1 + 15 < 220)
        C[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}

void read_tmp_FT1(float tmp[9][192],
                  hls::stream<float8> &fifo_tmp_from_task1_to_task3, int i0) {
#pragma HLS inline off
  if (i0 >= 20) {
    return;
  }
  for (int d1_0 = 0; d1_0 < 8; d1_0++) {

    for (int d0_1 = 0; d0_1 < 9; d0_1++) {

      for (int d1_1 = 0; d1_1 < 24; d1_1 += 8) {

        int d0 = d0_1;
        int d1 = d1_0 * 24 + d1_1;
        float8 tmp_fifo = fifo_tmp_from_task1_to_task3.read();
        if (d1 + 0 < 192)
          tmp[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
        if (d1 + 1 < 192)
          tmp[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
        if (d1 + 2 < 192)
          tmp[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
        if (d1 + 3 < 192)
          tmp[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
        if (d1 + 4 < 192)
          tmp[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
        if (d1 + 5 < 192)
          tmp[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
        if (d1 + 6 < 192)
          tmp[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
        if (d1 + 7 < 192)
          tmp[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      }
    }
  }
}

void read_D_FT1(float D[9][20], hls::stream<float4> &fifo_D_from_off_chip_to_S2,
                int j0, int i0) {
#pragma HLS inline off
  if (i0 >= 20 || j0 >= 11) {
    return;
  }
  for (int d0 = 0; d0 < 9; d0++) {
    for (int d1 = 0; d1 < 20; d1 += 4) {
#pragma HLS pipeline II = 1
      float4 tmp_fifo = fifo_D_from_off_chip_to_S2.read();
      D[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      D[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      D[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      D[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
    }
  }
}

void write_tmp_FT0(float tmp[9][24],
                   hls::stream<float8> &fifo_tmp_from_task1_to_task3, int j0,
                   int i0) {
#pragma HLS inline off
  if (j0 < 0 || i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 9; d0++) {
    for (int d1 = 0; d1 < 24; d1 += 8) {
#pragma HLS pipeline II = 1
      float8 tmp_fifo;
      tmp_fifo[0] = tmp[d0 + 0][d1 + 0 + 0];
      tmp_fifo[1] = tmp[d0 + 0][d1 + 0 + 1];
      tmp_fifo[2] = tmp[d0 + 0][d1 + 0 + 2];
      tmp_fifo[3] = tmp[d0 + 0][d1 + 0 + 3];
      tmp_fifo[4] = tmp[d0 + 0][d1 + 0 + 4];
      tmp_fifo[5] = tmp[d0 + 0][d1 + 0 + 5];
      tmp_fifo[6] = tmp[d0 + 0][d1 + 0 + 6];
      tmp_fifo[7] = tmp[d0 + 0][d1 + 0 + 7];
      fifo_tmp_from_task1_to_task3.write(tmp_fifo);
    }
  }
}

void write_D_FT1(float D[9][20], hls::stream<float4> &fifo_D_to_off_chip,
                 int j0, int i0) {
#pragma HLS inline off
  if (j0 < 0 || i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 9; d0++) {
    for (int d1 = 0; d1 < 20; d1 += 4) {
#pragma HLS pipeline II = 1
      float4 tmp_fifo;
      tmp_fifo[0] = D[d0 + 0][d1 + 0 + 0];
      tmp_fifo[1] = D[d0 + 0][d1 + 0 + 1];
      tmp_fifo[2] = D[d0 + 0][d1 + 0 + 2];
      tmp_fifo[3] = D[d0 + 0][d1 + 0 + 3];
      fifo_D_to_off_chip.write(tmp_fifo);
    }
  }
}

// extern "C"{
void kernel_nlp(float alpha, float beta, float8 vtmp_for_task1[4320],
                float16 vA_for_task1[2520], float16 vB_for_task1[2520],
                float4 vD_for_task2[9900], float16 vC_for_task3[2688]) {

#pragma HLS INTERFACE m_axi port = alpha offset = slave bundle = kernel_alpha
#pragma HLS INTERFACE m_axi port = beta offset = slave bundle = kernel_beta
#pragma HLS INTERFACE m_axi port = vtmp_for_task1 offset = slave bundle =      \
    kernel_vtmp_for_task1
#pragma HLS INTERFACE m_axi port = vA_for_task1 offset = slave bundle =        \
    kernel_vA_for_task1
#pragma HLS INTERFACE m_axi port = vB_for_task1 offset = slave bundle =        \
    kernel_vB_for_task1
#pragma HLS INTERFACE m_axi port = vD_for_task2 offset = slave bundle =        \
    kernel_vD_for_task2
#pragma HLS INTERFACE m_axi port = vC_for_task3 offset = slave bundle =        \
    kernel_vC_for_task3
#pragma HLS INTERFACE s_axilite port = alpha bundle = control
#pragma HLS INTERFACE s_axilite port = beta bundle = control
#pragma HLS INTERFACE s_axilite port = vtmp_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vA_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vB_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vD_for_task2 bundle = control
#pragma HLS INTERFACE s_axilite port = vC_for_task3 bundle = control
#pragma HLS DATA_PACK VARIABLE = alpha
#pragma HLS DATA_PACK VARIABLE = beta
#pragma HLS DATA_PACK VARIABLE = vtmp_for_task1
#pragma HLS DATA_PACK VARIABLE = vA_for_task1
#pragma HLS DATA_PACK VARIABLE = vB_for_task1
#pragma HLS DATA_PACK VARIABLE = vD_for_task2
#pragma HLS DATA_PACK VARIABLE = vC_for_task3
#pragma HLS INTERFACE s_axilite port = return bundle = control

#pragma HLS dataflow

  hls::stream<float8> fifo_tmp_from_task1_to_task3;
#pragma HLS stream variable = fifo_tmp_from_task1_to_task3 depth = 512
  hls::stream<float16> fifo_C_from_off_chip_to_S3;
#pragma HLS stream variable = fifo_C_from_off_chip_to_S3 depth = 512
  hls::stream<float16> fifo_A_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_A_from_off_chip_to_S1 depth = 512
  hls::stream<float16> fifo_B_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_B_from_off_chip_to_S1 depth = 512
  hls::stream<float4> fifo_D_from_off_chip_to_S2;
#pragma HLS stream variable = fifo_D_from_off_chip_to_S2 depth = 512
  hls::stream<float8> fifo_tmp_to_off_chip;
#pragma HLS stream variable = fifo_tmp_to_off_chip depth = 512
  hls::stream<float4> fifo_D_to_off_chip;
#pragma HLS stream variable = fifo_D_to_off_chip depth = 512

  load_vC_for_task3(fifo_C_from_off_chip_to_S3, vC_for_task3);
  load_vA_for_task1(fifo_A_from_off_chip_to_S1, vA_for_task1);
  load_vB_for_task1(fifo_B_from_off_chip_to_S1, vB_for_task1);
  load_vD_for_task2(fifo_D_from_off_chip_to_S2, vD_for_task2);

  FT0_level0(alpha, beta, fifo_tmp_from_task1_to_task3,
             fifo_A_from_off_chip_to_S1, fifo_B_from_off_chip_to_S1,
             fifo_tmp_to_off_chip);
  FT1_level0(alpha, beta, fifo_tmp_from_task1_to_task3,
             fifo_C_from_off_chip_to_S3, fifo_D_from_off_chip_to_S2,
             fifo_D_to_off_chip);

  store_vtmp_for_task1(fifo_tmp_to_off_chip, vtmp_for_task1);
  store_vD_for_task2(fifo_D_to_off_chip, vD_for_task2);
}
//}
