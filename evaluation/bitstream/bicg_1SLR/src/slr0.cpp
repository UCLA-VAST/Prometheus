#include "output.h"

#define READ_RANGE(Arr, data_size, l)                                          \
  (Arr.data.range((data_size) * (l) + (data_size) - 1, (data_size) * (l)))

/****************************************************
 This file was automatically generated by Prometheus
****************************************************/
void load_vp_for_task3(hls::stream<float16> &fifo_p_from_off_chip_to_S3,
                       float16 vp[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    fifo_p_from_off_chip_to_S3.write(vp[i]);
  }
}
void load_vp_for_task3(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_p_from_off_chip_to_S3,
    float16 vp[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    float16 vp_off = vp[i];
    ap_axiu<512, 0, 0, 0> vp_on;
    vp_on.data.range(31, 0) = *(uint32_t *)(&vp_off[0]);
    vp_on.data.range(63, 32) = *(uint32_t *)(&vp_off[1]);
    vp_on.data.range(95, 64) = *(uint32_t *)(&vp_off[2]);
    vp_on.data.range(127, 96) = *(uint32_t *)(&vp_off[3]);
    vp_on.data.range(159, 128) = *(uint32_t *)(&vp_off[4]);
    vp_on.data.range(191, 160) = *(uint32_t *)(&vp_off[5]);
    vp_on.data.range(223, 192) = *(uint32_t *)(&vp_off[6]);
    vp_on.data.range(255, 224) = *(uint32_t *)(&vp_off[7]);
    vp_on.data.range(287, 256) = *(uint32_t *)(&vp_off[8]);
    vp_on.data.range(319, 288) = *(uint32_t *)(&vp_off[9]);
    vp_on.data.range(351, 320) = *(uint32_t *)(&vp_off[10]);
    vp_on.data.range(383, 352) = *(uint32_t *)(&vp_off[11]);
    vp_on.data.range(415, 384) = *(uint32_t *)(&vp_off[12]);
    vp_on.data.range(447, 416) = *(uint32_t *)(&vp_off[13]);
    vp_on.data.range(479, 448) = *(uint32_t *)(&vp_off[14]);
    vp_on.data.range(511, 480) = *(uint32_t *)(&vp_off[15]);
    fifo_p_from_off_chip_to_S3.write(vp_on);
  }
}
void load_vA_for_task3(hls::stream<float16> &fifo_A_from_off_chip_to_S3,
                       float16 vA[10400]) {
#pragma HLS inline off
  for (int i = 0; i < 10250; i++) {
#pragma HLS pipeline II = 1
    fifo_A_from_off_chip_to_S3.write(vA[i]);
  }
}
void load_vA_for_task3(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S3,
    float16 vA[10400]) {
#pragma HLS inline off
  for (int i = 0; i < 10250; i++) {
#pragma HLS pipeline II = 1
    float16 vA_off = vA[i];
    ap_axiu<512, 0, 0, 0> vA_on;
    vA_on.data.range(31, 0) = *(uint32_t *)(&vA_off[0]);
    vA_on.data.range(63, 32) = *(uint32_t *)(&vA_off[1]);
    vA_on.data.range(95, 64) = *(uint32_t *)(&vA_off[2]);
    vA_on.data.range(127, 96) = *(uint32_t *)(&vA_off[3]);
    vA_on.data.range(159, 128) = *(uint32_t *)(&vA_off[4]);
    vA_on.data.range(191, 160) = *(uint32_t *)(&vA_off[5]);
    vA_on.data.range(223, 192) = *(uint32_t *)(&vA_off[6]);
    vA_on.data.range(255, 224) = *(uint32_t *)(&vA_off[7]);
    vA_on.data.range(287, 256) = *(uint32_t *)(&vA_off[8]);
    vA_on.data.range(319, 288) = *(uint32_t *)(&vA_off[9]);
    vA_on.data.range(351, 320) = *(uint32_t *)(&vA_off[10]);
    vA_on.data.range(383, 352) = *(uint32_t *)(&vA_off[11]);
    vA_on.data.range(415, 384) = *(uint32_t *)(&vA_off[12]);
    vA_on.data.range(447, 416) = *(uint32_t *)(&vA_off[13]);
    vA_on.data.range(479, 448) = *(uint32_t *)(&vA_off[14]);
    vA_on.data.range(511, 480) = *(uint32_t *)(&vA_off[15]);
    fifo_A_from_off_chip_to_S3.write(vA_on);
  }
}
void load_vA_for_task1(hls::stream<float16> &fifo_A_from_off_chip_to_S1,
                       float16 vA[10400]) {
#pragma HLS inline off
  for (int i = 0; i < 10400; i++) {
#pragma HLS pipeline II = 1
    fifo_A_from_off_chip_to_S1.write(vA[i]);
  }
}
void load_vA_for_task1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S1,
    float16 vA[10400]) {
#pragma HLS inline off
  for (int i = 0; i < 10400; i++) {
#pragma HLS pipeline II = 1
    float16 vA_off = vA[i];
    ap_axiu<512, 0, 0, 0> vA_on;
    vA_on.data.range(31, 0) = *(uint32_t *)(&vA_off[0]);
    vA_on.data.range(63, 32) = *(uint32_t *)(&vA_off[1]);
    vA_on.data.range(95, 64) = *(uint32_t *)(&vA_off[2]);
    vA_on.data.range(127, 96) = *(uint32_t *)(&vA_off[3]);
    vA_on.data.range(159, 128) = *(uint32_t *)(&vA_off[4]);
    vA_on.data.range(191, 160) = *(uint32_t *)(&vA_off[5]);
    vA_on.data.range(223, 192) = *(uint32_t *)(&vA_off[6]);
    vA_on.data.range(255, 224) = *(uint32_t *)(&vA_off[7]);
    vA_on.data.range(287, 256) = *(uint32_t *)(&vA_off[8]);
    vA_on.data.range(319, 288) = *(uint32_t *)(&vA_off[9]);
    vA_on.data.range(351, 320) = *(uint32_t *)(&vA_off[10]);
    vA_on.data.range(383, 352) = *(uint32_t *)(&vA_off[11]);
    vA_on.data.range(415, 384) = *(uint32_t *)(&vA_off[12]);
    vA_on.data.range(447, 416) = *(uint32_t *)(&vA_off[13]);
    vA_on.data.range(479, 448) = *(uint32_t *)(&vA_off[14]);
    vA_on.data.range(511, 480) = *(uint32_t *)(&vA_off[15]);
    fifo_A_from_off_chip_to_S1.write(vA_on);
  }
}
void load_vr_for_task1(hls::stream<float16> &fifo_r_from_off_chip_to_S1,
                       float16 vr[26]) {
#pragma HLS inline off
  for (int i = 0; i < 26; i++) {
#pragma HLS pipeline II = 1
    fifo_r_from_off_chip_to_S1.write(vr[i]);
  }
}
void load_vr_for_task1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_r_from_off_chip_to_S1,
    float16 vr[26]) {
#pragma HLS inline off
  for (int i = 0; i < 26; i++) {
#pragma HLS pipeline II = 1
    float16 vr_off = vr[i];
    ap_axiu<512, 0, 0, 0> vr_on;
    vr_on.data.range(31, 0) = *(uint32_t *)(&vr_off[0]);
    vr_on.data.range(63, 32) = *(uint32_t *)(&vr_off[1]);
    vr_on.data.range(95, 64) = *(uint32_t *)(&vr_off[2]);
    vr_on.data.range(127, 96) = *(uint32_t *)(&vr_off[3]);
    vr_on.data.range(159, 128) = *(uint32_t *)(&vr_off[4]);
    vr_on.data.range(191, 160) = *(uint32_t *)(&vr_off[5]);
    vr_on.data.range(223, 192) = *(uint32_t *)(&vr_off[6]);
    vr_on.data.range(255, 224) = *(uint32_t *)(&vr_off[7]);
    vr_on.data.range(287, 256) = *(uint32_t *)(&vr_off[8]);
    vr_on.data.range(319, 288) = *(uint32_t *)(&vr_off[9]);
    vr_on.data.range(351, 320) = *(uint32_t *)(&vr_off[10]);
    vr_on.data.range(383, 352) = *(uint32_t *)(&vr_off[11]);
    vr_on.data.range(415, 384) = *(uint32_t *)(&vr_off[12]);
    vr_on.data.range(447, 416) = *(uint32_t *)(&vr_off[13]);
    vr_on.data.range(479, 448) = *(uint32_t *)(&vr_off[14]);
    vr_on.data.range(511, 480) = *(uint32_t *)(&vr_off[15]);
    fifo_r_from_off_chip_to_S1.write(vr_on);
  }
}
void store_vs_for_task1(hls::stream<float16> &fifo_s_to_off_chip,
                        float16 vs[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    vs[i] = fifo_s_to_off_chip.read();
  }
}
void store_vs_for_task1(hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_s_to_off_chip,
                        float16 vs[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    float16 vs_off;
    ap_axiu<512, 0, 0, 0> vs_on = fifo_s_to_off_chip.read();
    uint32_t vs_tmp[16];
    vs_tmp[0] = vs_on.data.range(31, 0);
    vs_off[0] = *(float *)(&vs_tmp[0]);
    vs_tmp[1] = vs_on.data.range(63, 32);
    vs_off[1] = *(float *)(&vs_tmp[1]);
    vs_tmp[2] = vs_on.data.range(95, 64);
    vs_off[2] = *(float *)(&vs_tmp[2]);
    vs_tmp[3] = vs_on.data.range(127, 96);
    vs_off[3] = *(float *)(&vs_tmp[3]);
    vs_tmp[4] = vs_on.data.range(159, 128);
    vs_off[4] = *(float *)(&vs_tmp[4]);
    vs_tmp[5] = vs_on.data.range(191, 160);
    vs_off[5] = *(float *)(&vs_tmp[5]);
    vs_tmp[6] = vs_on.data.range(223, 192);
    vs_off[6] = *(float *)(&vs_tmp[6]);
    vs_tmp[7] = vs_on.data.range(255, 224);
    vs_off[7] = *(float *)(&vs_tmp[7]);
    vs_tmp[8] = vs_on.data.range(287, 256);
    vs_off[8] = *(float *)(&vs_tmp[8]);
    vs_tmp[9] = vs_on.data.range(319, 288);
    vs_off[9] = *(float *)(&vs_tmp[9]);
    vs_tmp[10] = vs_on.data.range(351, 320);
    vs_off[10] = *(float *)(&vs_tmp[10]);
    vs_tmp[11] = vs_on.data.range(383, 352);
    vs_off[11] = *(float *)(&vs_tmp[11]);
    vs_tmp[12] = vs_on.data.range(415, 384);
    vs_off[12] = *(float *)(&vs_tmp[12]);
    vs_tmp[13] = vs_on.data.range(447, 416);
    vs_off[13] = *(float *)(&vs_tmp[13]);
    vs_tmp[14] = vs_on.data.range(479, 448);
    vs_off[14] = *(float *)(&vs_tmp[14]);
    vs_tmp[15] = vs_on.data.range(511, 480);
    vs_off[15] = *(float *)(&vs_tmp[15]);
    vs[i] = vs_off;
  }
}
void store_vq_for_task3(hls::stream<float2> &fifo_q_to_off_chip,
                        float2 vq[205]) {
#pragma HLS inline off
  for (int i = 0; i < 205; i++) {
#pragma HLS pipeline II = 1
    vq[i] = fifo_q_to_off_chip.read();
  }
}
void store_vq_for_task3(hls::stream<ap_axiu<64, 0, 0, 0>> &fifo_q_to_off_chip,
                        float2 vq[205]) {
#pragma HLS inline off
  for (int i = 0; i < 205; i++) {
#pragma HLS pipeline II = 1
    float2 vq_off;
    ap_axiu<64, 0, 0, 0> vq_on = fifo_q_to_off_chip.read();
    uint32_t vq_tmp[2];
    vq_tmp[0] = vq_on.data.range(31, 0);
    vq_off[0] = *(float *)(&vq_tmp[0]);
    vq_tmp[1] = vq_on.data.range(63, 32);
    vq_off[1] = *(float *)(&vq_tmp[1]);
    vq[i] = vq_off;
  }
}
void compute_FT0_level0(hls::stream<float16> &fifo_A_from_off_chip_to_S1,
                        hls::stream<float16> &fifo_r_from_off_chip_to_S1,
                        hls::stream<float16> &fifo_s_to_off_chip, int j0,
                        float s_0[1][16], float s_1[1][16],
                        float A_0[26][16][1][16], float A_1[26][16][1][16],
                        float r[26][16]) {
#pragma HLS inline off
#pragma HLS dataflow
  read_A_FT0(A_1, fifo_A_from_off_chip_to_S1, j0 + 1);
  task0_intra(s_0, A_0, r, j0);
  task1_intra(s_0, A_0, r, j0);
  write_s_FT0(s_1, fifo_s_to_off_chip, j0 - 1);
}
void FT0_level0(hls::stream<float16> &fifo_A_from_off_chip_to_S1,
                hls::stream<float16> &fifo_r_from_off_chip_to_S1,
                hls::stream<float16> &fifo_s_to_off_chip) {
#pragma HLS inline off
  float s_0[1][16];
#pragma HLS array_partition variable = s_0 cyclic factor = 16 dim = 2
  float s_1[1][16];
#pragma HLS array_partition variable = s_1 cyclic factor = 16 dim = 2
  float A_0[26][16][1][16];
#pragma HLS array_partition variable = A_0 cyclic factor = 16 dim = 2
#pragma HLS array_partition variable = A_0 cyclic factor = 16 dim = 4
  float A_1[26][16][1][16];
#pragma HLS array_partition variable = A_1 cyclic factor = 16 dim = 2
#pragma HLS array_partition variable = A_1 cyclic factor = 16 dim = 4
  float r[26][16];
#pragma HLS array_partition variable = r cyclic factor = 16 dim = 2
  read_r_FT0(r, fifo_r_from_off_chip_to_S1);
  read_A_FT0(A_0, fifo_A_from_off_chip_to_S1, 0);
  for (int j0 = 0; j0 < 25; j0++) {

    if (j0 % 2 == 0) {
      //     read_A_FT0(A_1, fifo_A_from_off_chip_to_S1, j0+1);
      //     task0_intra(s_0, A_0, r, j0);
      //     task1_intra(s_0, A_0, r, j0);
      //     write_s_FT0(s_1, fifo_s_to_off_chip, j0-1);
      compute_FT0_level0(fifo_A_from_off_chip_to_S1, fifo_r_from_off_chip_to_S1,
                         fifo_s_to_off_chip, j0, s_0, s_1, A_0, A_1, r);
    } else if (j0 % 2 == 1) {
      //     read_A_FT0(A_0, fifo_A_from_off_chip_to_S1, j0+1);
      //     task0_intra(s_1, A_1, r, j0);
      //     task1_intra(s_1, A_1, r, j0);
      //     write_s_FT0(s_0, fifo_s_to_off_chip, j0-1);
      compute_FT0_level0(fifo_A_from_off_chip_to_S1, fifo_r_from_off_chip_to_S1,
                         fifo_s_to_off_chip, j0, s_1, s_0, A_1, A_0, r);
    }
  }
  write_s_FT0(s_0, fifo_s_to_off_chip, 24);
}
void compute_FT1_level0(hls::stream<float16> &fifo_p_from_off_chip_to_S3,
                        hls::stream<float16> &fifo_A_from_off_chip_to_S3,
                        hls::stream<float2> &fifo_q_to_off_chip, int i0,
                        float q_0[1][10], float q_1[1][10],
                        float A_0[1][10][25][16], float A_1[1][10][25][16],
                        float p[25][16]) {
#pragma HLS inline off
#pragma HLS dataflow
  read_A_FT1(A_1, fifo_A_from_off_chip_to_S3, i0 + 1);
  task2_intra(q_0, A_0, p, i0);
  task3_intra(q_0, A_0, p, i0);
  write_q_FT1(q_1, fifo_q_to_off_chip, i0 - 1);
}
void FT1_level0(hls::stream<float16> &fifo_p_from_off_chip_to_S3,
                hls::stream<float16> &fifo_A_from_off_chip_to_S3,
                hls::stream<float2> &fifo_q_to_off_chip) {
#pragma HLS inline off
  float q_0[1][10];
#pragma HLS array_partition variable = q_0 cyclic factor = 10 dim = 2
  float q_1[1][10];
#pragma HLS array_partition variable = q_1 cyclic factor = 10 dim = 2
  float A_0[1][10][25][16];
#pragma HLS array_partition variable = A_0 cyclic factor = 10 dim = 2
#pragma HLS array_partition variable = A_0 cyclic factor = 16 dim = 4
  float A_1[1][10][25][16];
#pragma HLS array_partition variable = A_1 cyclic factor = 10 dim = 2
#pragma HLS array_partition variable = A_1 cyclic factor = 16 dim = 4
  float p[25][16];
#pragma HLS array_partition variable = p cyclic factor = 16 dim = 2
  read_p_FT1(p, fifo_p_from_off_chip_to_S3);
  read_A_FT1(A_0, fifo_A_from_off_chip_to_S3, 0);
  for (int i0 = 0; i0 < 41; i0++) {

    if (i0 % 2 == 0) {
      //     read_A_FT1(A_1, fifo_A_from_off_chip_to_S3, i0+1);
      //     task2_intra(q_0, A_0, p, i0);
      //     task3_intra(q_0, A_0, p, i0);
      //     write_q_FT1(q_1, fifo_q_to_off_chip, i0-1);
      compute_FT1_level0(fifo_p_from_off_chip_to_S3, fifo_A_from_off_chip_to_S3,
                         fifo_q_to_off_chip, i0, q_0, q_1, A_0, A_1, p);
    } else if (i0 % 2 == 1) {
      //     read_A_FT1(A_0, fifo_A_from_off_chip_to_S3, i0+1);
      //     task2_intra(q_1, A_1, p, i0);
      //     task3_intra(q_1, A_1, p, i0);
      //     write_q_FT1(q_0, fifo_q_to_off_chip, i0-1);
      compute_FT1_level0(fifo_p_from_off_chip_to_S3, fifo_A_from_off_chip_to_S3,
                         fifo_q_to_off_chip, i0, q_1, q_0, A_1, A_0, p);
    }
  }
  write_q_FT1(q_0, fifo_q_to_off_chip, 40);
}
void task0_intra(float s[1][16], float A[26][16][1][16], float r[26][16],
                 int j0) {
#pragma HLS inline off
  int j;
  for (int j1 = 0; j1 < 16; j1++) {
#pragma HLS unroll
    j = j0 * 16 + j1;
    s[0][j1] = 0.0;
  }
}
void task1_intra(float s[1][16], float A[26][16][1][16], float r[26][16],
                 int j0) {
#pragma HLS inline off
  int j;
  int i;
  for (int i0 = 0; i0 < 25; i0++) {
#pragma HLS pipeline II = 2
    for (int j1 = 0; j1 < 16; j1++) {
#pragma HLS unroll
      for (int i1 = 0; i1 < 16; i1++) {
#pragma HLS unroll
        j = j0 * 16 + j1;
        i = i0 * 16 + i1;
        s[0][j1] = s[0][j1] + r[i0][i1] * A[i0][i1][0][j1];
      }
    }
  }

  for (int i0 = 25; i0 < 26; i0++) {
#pragma HLS pipeline II = 2
    for (int j1 = 0; j1 < 16; j1++) {
#pragma HLS unroll
      for (int i1 = 0; i1 < 10; i1++) {
#pragma HLS unroll
        j = j0 * 16 + j1;
        i = i0 * 16 + i1;
        s[0][j1] = s[0][j1] + r[i0][i1] * A[i0][i1][0][j1];
      }
    }
  }
}
void task2_intra(float q[1][10], float A[1][10][25][16], float p[25][16],
                 int i0) {
#pragma HLS inline off
  int i;
  for (int i1 = 0; i1 < 10; i1++) {
#pragma HLS unroll
    i = i0 * 10 + i1;
    q[0][i1] = 0.0;
  }
}
void task3_intra(float q[1][10], float A[1][10][25][16], float p[25][16],
                 int i0) {
#pragma HLS inline off
  int i;
  int j;
  for (int j0 = 0; j0 < 24; j0++) {
#pragma HLS pipeline II = 2
    for (int i1 = 0; i1 < 10; i1++) {
#pragma HLS unroll
      for (int j1 = 0; j1 < 16; j1++) {
#pragma HLS unroll
        i = i0 * 10 + i1;
        j = j0 * 16 + j1;
        q[0][i1] = q[0][i1] + A[0][i1][j0][j1] * p[j0][j1];
      }
    }
  }

  for (int j0 = 24; j0 < 25; j0++) {
#pragma HLS pipeline II = 2
    for (int i1 = 0; i1 < 10; i1++) {
#pragma HLS unroll
      for (int j1 = 0; j1 < 6; j1++) {
#pragma HLS unroll
        i = i0 * 10 + i1;
        j = j0 * 16 + j1;
        q[0][i1] = q[0][i1] + A[0][i1][j0][j1] * p[j0][j1];
      }
    }
  }
}
void read_r_FT0(float r[26][16],
                hls::stream<float16> &fifo_r_from_off_chip_to_S1) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 416; d0 += 16) {
#pragma HLS pipeline II = 1
    int d0_0 = d0 / 16;
    int d0_1 = d0 % 16;
    float16 tmp_fifo = fifo_r_from_off_chip_to_S1.read();
    r[d0_0][d0_1 + 0 + 0] = tmp_fifo[0];
    r[d0_0][d0_1 + 0 + 1] = tmp_fifo[1];
    r[d0_0][d0_1 + 0 + 2] = tmp_fifo[2];
    r[d0_0][d0_1 + 0 + 3] = tmp_fifo[3];
    r[d0_0][d0_1 + 0 + 4] = tmp_fifo[4];
    r[d0_0][d0_1 + 0 + 5] = tmp_fifo[5];
    r[d0_0][d0_1 + 0 + 6] = tmp_fifo[6];
    r[d0_0][d0_1 + 0 + 7] = tmp_fifo[7];
    r[d0_0][d0_1 + 0 + 8] = tmp_fifo[8];
    r[d0_0][d0_1 + 0 + 9] = tmp_fifo[9];
    r[d0_0][d0_1 + 0 + 10] = tmp_fifo[10];
    r[d0_0][d0_1 + 0 + 11] = tmp_fifo[11];
    r[d0_0][d0_1 + 0 + 12] = tmp_fifo[12];
    r[d0_0][d0_1 + 0 + 13] = tmp_fifo[13];
    r[d0_0][d0_1 + 0 + 14] = tmp_fifo[14];
    r[d0_0][d0_1 + 0 + 15] = tmp_fifo[15];
  }
}
void read_r_FT0(
    float r[26][16],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_r_from_off_chip_to_S1) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 416; d0 += 16) {
#pragma HLS pipeline II = 1
    int d0_0 = d0 / 16;
    int d0_1 = d0 % 16;
    ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_r_from_off_chip_to_S1.read();
    uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
    r[d0_0][d0_1 + 0 + 0] = *(float *)(&tmp_0);
    uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
    r[d0_0][d0_1 + 0 + 1] = *(float *)(&tmp_1);
    uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
    r[d0_0][d0_1 + 0 + 2] = *(float *)(&tmp_2);
    uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
    r[d0_0][d0_1 + 0 + 3] = *(float *)(&tmp_3);
    uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
    r[d0_0][d0_1 + 0 + 4] = *(float *)(&tmp_4);
    uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
    r[d0_0][d0_1 + 0 + 5] = *(float *)(&tmp_5);
    uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
    r[d0_0][d0_1 + 0 + 6] = *(float *)(&tmp_6);
    uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
    r[d0_0][d0_1 + 0 + 7] = *(float *)(&tmp_7);
    uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
    r[d0_0][d0_1 + 0 + 8] = *(float *)(&tmp_8);
    uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
    r[d0_0][d0_1 + 0 + 9] = *(float *)(&tmp_9);
    uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
    r[d0_0][d0_1 + 0 + 10] = *(float *)(&tmp_10);
    uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
    r[d0_0][d0_1 + 0 + 11] = *(float *)(&tmp_11);
    uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
    r[d0_0][d0_1 + 0 + 12] = *(float *)(&tmp_12);
    uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
    r[d0_0][d0_1 + 0 + 13] = *(float *)(&tmp_13);
    uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
    r[d0_0][d0_1 + 0 + 14] = *(float *)(&tmp_14);
    uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
    r[d0_0][d0_1 + 0 + 15] = *(float *)(&tmp_15);
  }
}
void read_A_FT0(float A[26][16][1][16],
                hls::stream<float16> &fifo_A_from_off_chip_to_S1, int j0) {
#pragma HLS inline off
  if (j0 >= 25) {
    return;
  }
  for (int d0 = 0; d0 < 416; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      int d0_0 = d0 / 16;
      int d0_1 = d0 % 16;
      int d1_0 = d1 / 16;
      int d1_1 = d1 % 16;
      float16 tmp_fifo = fifo_A_from_off_chip_to_S1.read();
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 0] = tmp_fifo[0];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 1] = tmp_fifo[1];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 2] = tmp_fifo[2];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 3] = tmp_fifo[3];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 4] = tmp_fifo[4];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 5] = tmp_fifo[5];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 6] = tmp_fifo[6];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 7] = tmp_fifo[7];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 8] = tmp_fifo[8];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 9] = tmp_fifo[9];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 10] = tmp_fifo[10];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 11] = tmp_fifo[11];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 12] = tmp_fifo[12];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 13] = tmp_fifo[13];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 14] = tmp_fifo[14];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 15] = tmp_fifo[15];
    }
  }
}
void read_A_FT0(float A[26][16][1][16],
                hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S1,
                int j0) {
#pragma HLS inline off
  if (j0 >= 25) {
    return;
  }
  for (int d0 = 0; d0 < 416; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      int d0_0 = d0 / 16;
      int d0_1 = d0 % 16;
      int d1_0 = d1 / 16;
      int d1_1 = d1 % 16;
      ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_A_from_off_chip_to_S1.read();
      uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 0] = *(float *)(&tmp_0);
      uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 1] = *(float *)(&tmp_1);
      uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 2] = *(float *)(&tmp_2);
      uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 3] = *(float *)(&tmp_3);
      uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 4] = *(float *)(&tmp_4);
      uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 5] = *(float *)(&tmp_5);
      uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 6] = *(float *)(&tmp_6);
      uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 7] = *(float *)(&tmp_7);
      uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 8] = *(float *)(&tmp_8);
      uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 9] = *(float *)(&tmp_9);
      uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 10] = *(float *)(&tmp_10);
      uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 11] = *(float *)(&tmp_11);
      uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 12] = *(float *)(&tmp_12);
      uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 13] = *(float *)(&tmp_13);
      uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 14] = *(float *)(&tmp_14);
      uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 15] = *(float *)(&tmp_15);
    }
  }
}
void read_p_FT1(float p[25][16],
                hls::stream<float16> &fifo_p_from_off_chip_to_S3) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 400; d0 += 16) {
#pragma HLS pipeline II = 1
    int d0_0 = d0 / 16;
    int d0_1 = d0 % 16;
    float16 tmp_fifo = fifo_p_from_off_chip_to_S3.read();
    p[d0_0][d0_1 + 0 + 0] = tmp_fifo[0];
    p[d0_0][d0_1 + 0 + 1] = tmp_fifo[1];
    p[d0_0][d0_1 + 0 + 2] = tmp_fifo[2];
    p[d0_0][d0_1 + 0 + 3] = tmp_fifo[3];
    p[d0_0][d0_1 + 0 + 4] = tmp_fifo[4];
    p[d0_0][d0_1 + 0 + 5] = tmp_fifo[5];
    p[d0_0][d0_1 + 0 + 6] = tmp_fifo[6];
    p[d0_0][d0_1 + 0 + 7] = tmp_fifo[7];
    p[d0_0][d0_1 + 0 + 8] = tmp_fifo[8];
    p[d0_0][d0_1 + 0 + 9] = tmp_fifo[9];
    p[d0_0][d0_1 + 0 + 10] = tmp_fifo[10];
    p[d0_0][d0_1 + 0 + 11] = tmp_fifo[11];
    p[d0_0][d0_1 + 0 + 12] = tmp_fifo[12];
    p[d0_0][d0_1 + 0 + 13] = tmp_fifo[13];
    p[d0_0][d0_1 + 0 + 14] = tmp_fifo[14];
    p[d0_0][d0_1 + 0 + 15] = tmp_fifo[15];
  }
}
void read_p_FT1(
    float p[25][16],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_p_from_off_chip_to_S3) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 400; d0 += 16) {
#pragma HLS pipeline II = 1
    int d0_0 = d0 / 16;
    int d0_1 = d0 % 16;
    ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_p_from_off_chip_to_S3.read();
    uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
    p[d0_0][d0_1 + 0 + 0] = *(float *)(&tmp_0);
    uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
    p[d0_0][d0_1 + 0 + 1] = *(float *)(&tmp_1);
    uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
    p[d0_0][d0_1 + 0 + 2] = *(float *)(&tmp_2);
    uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
    p[d0_0][d0_1 + 0 + 3] = *(float *)(&tmp_3);
    uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
    p[d0_0][d0_1 + 0 + 4] = *(float *)(&tmp_4);
    uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
    p[d0_0][d0_1 + 0 + 5] = *(float *)(&tmp_5);
    uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
    p[d0_0][d0_1 + 0 + 6] = *(float *)(&tmp_6);
    uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
    p[d0_0][d0_1 + 0 + 7] = *(float *)(&tmp_7);
    uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
    p[d0_0][d0_1 + 0 + 8] = *(float *)(&tmp_8);
    uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
    p[d0_0][d0_1 + 0 + 9] = *(float *)(&tmp_9);
    uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
    p[d0_0][d0_1 + 0 + 10] = *(float *)(&tmp_10);
    uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
    p[d0_0][d0_1 + 0 + 11] = *(float *)(&tmp_11);
    uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
    p[d0_0][d0_1 + 0 + 12] = *(float *)(&tmp_12);
    uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
    p[d0_0][d0_1 + 0 + 13] = *(float *)(&tmp_13);
    uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
    p[d0_0][d0_1 + 0 + 14] = *(float *)(&tmp_14);
    uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
    p[d0_0][d0_1 + 0 + 15] = *(float *)(&tmp_15);
  }
}
void read_A_FT1(float A[1][10][25][16],
                hls::stream<float16> &fifo_A_from_off_chip_to_S3, int i0) {
#pragma HLS inline off
  if (i0 >= 41) {
    return;
  }
  for (int d0 = 0; d0 < 10; d0++) {
    for (int d1 = 0; d1 < 400; d1 += 16) {
#pragma HLS pipeline II = 1
      int d0_0 = d0 / 10;
      int d0_1 = d0 % 10;
      int d1_0 = d1 / 16;
      int d1_1 = d1 % 16;
      float16 tmp_fifo = fifo_A_from_off_chip_to_S3.read();
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 0] = tmp_fifo[0];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 1] = tmp_fifo[1];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 2] = tmp_fifo[2];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 3] = tmp_fifo[3];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 4] = tmp_fifo[4];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 5] = tmp_fifo[5];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 6] = tmp_fifo[6];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 7] = tmp_fifo[7];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 8] = tmp_fifo[8];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 9] = tmp_fifo[9];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 10] = tmp_fifo[10];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 11] = tmp_fifo[11];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 12] = tmp_fifo[12];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 13] = tmp_fifo[13];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 14] = tmp_fifo[14];
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 15] = tmp_fifo[15];
    }
  }
}
void read_A_FT1(float A[1][10][25][16],
                hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S3,
                int i0) {
#pragma HLS inline off
  if (i0 >= 41) {
    return;
  }
  for (int d0 = 0; d0 < 10; d0++) {
    for (int d1 = 0; d1 < 400; d1 += 16) {
#pragma HLS pipeline II = 1
      int d0_0 = d0 / 10;
      int d0_1 = d0 % 10;
      int d1_0 = d1 / 16;
      int d1_1 = d1 % 16;
      ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_A_from_off_chip_to_S3.read();
      uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 0] = *(float *)(&tmp_0);
      uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 1] = *(float *)(&tmp_1);
      uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 2] = *(float *)(&tmp_2);
      uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 3] = *(float *)(&tmp_3);
      uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 4] = *(float *)(&tmp_4);
      uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 5] = *(float *)(&tmp_5);
      uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 6] = *(float *)(&tmp_6);
      uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 7] = *(float *)(&tmp_7);
      uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 8] = *(float *)(&tmp_8);
      uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 9] = *(float *)(&tmp_9);
      uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 10] = *(float *)(&tmp_10);
      uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 11] = *(float *)(&tmp_11);
      uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 12] = *(float *)(&tmp_12);
      uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 13] = *(float *)(&tmp_13);
      uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 14] = *(float *)(&tmp_14);
      uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
      A[d0_0][d0_1 + 0][d1_0][d1_1 + 0 + 15] = *(float *)(&tmp_15);
    }
  }
}
void write_s_FT0(float s[1][16], hls::stream<float16> &fifo_s_to_off_chip,
                 int j0) {
#pragma HLS inline off
  if (j0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 16; d0 += 16) {
#pragma HLS pipeline II = 1
    int d0_0 = d0 / 16;
    int d0_1 = d0 % 16;
    float16 tmp_fifo;
    tmp_fifo[0] = s[d0_0][d0_1 + 0 + 0];
    tmp_fifo[1] = s[d0_0][d0_1 + 0 + 1];
    tmp_fifo[2] = s[d0_0][d0_1 + 0 + 2];
    tmp_fifo[3] = s[d0_0][d0_1 + 0 + 3];
    tmp_fifo[4] = s[d0_0][d0_1 + 0 + 4];
    tmp_fifo[5] = s[d0_0][d0_1 + 0 + 5];
    tmp_fifo[6] = s[d0_0][d0_1 + 0 + 6];
    tmp_fifo[7] = s[d0_0][d0_1 + 0 + 7];
    tmp_fifo[8] = s[d0_0][d0_1 + 0 + 8];
    tmp_fifo[9] = s[d0_0][d0_1 + 0 + 9];
    tmp_fifo[10] = s[d0_0][d0_1 + 0 + 10];
    tmp_fifo[11] = s[d0_0][d0_1 + 0 + 11];
    tmp_fifo[12] = s[d0_0][d0_1 + 0 + 12];
    tmp_fifo[13] = s[d0_0][d0_1 + 0 + 13];
    tmp_fifo[14] = s[d0_0][d0_1 + 0 + 14];
    tmp_fifo[15] = s[d0_0][d0_1 + 0 + 15];
    fifo_s_to_off_chip.write(tmp_fifo);
  }
}
void write_s_FT0(float s[1][16],
                 hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_s_to_off_chip,
                 int j0) {
#pragma HLS inline off
  if (j0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 16; d0 += 16) {
#pragma HLS pipeline II = 1
    int d0_0 = d0 / 16;
    int d0_1 = d0 % 16;
    ap_axiu<512, 0, 0, 0> tmp_fifo;
    float tmp_0 = s[d0_0][d0_1 + 0 + 0];
    tmp_fifo.data.range(31, 0) = *(uint32_t *)(&tmp_0);
    float tmp_1 = s[d0_0][d0_1 + 0 + 1];
    tmp_fifo.data.range(63, 32) = *(uint32_t *)(&tmp_1);
    float tmp_2 = s[d0_0][d0_1 + 0 + 2];
    tmp_fifo.data.range(95, 64) = *(uint32_t *)(&tmp_2);
    float tmp_3 = s[d0_0][d0_1 + 0 + 3];
    tmp_fifo.data.range(127, 96) = *(uint32_t *)(&tmp_3);
    float tmp_4 = s[d0_0][d0_1 + 0 + 4];
    tmp_fifo.data.range(159, 128) = *(uint32_t *)(&tmp_4);
    float tmp_5 = s[d0_0][d0_1 + 0 + 5];
    tmp_fifo.data.range(191, 160) = *(uint32_t *)(&tmp_5);
    float tmp_6 = s[d0_0][d0_1 + 0 + 6];
    tmp_fifo.data.range(223, 192) = *(uint32_t *)(&tmp_6);
    float tmp_7 = s[d0_0][d0_1 + 0 + 7];
    tmp_fifo.data.range(255, 224) = *(uint32_t *)(&tmp_7);
    float tmp_8 = s[d0_0][d0_1 + 0 + 8];
    tmp_fifo.data.range(287, 256) = *(uint32_t *)(&tmp_8);
    float tmp_9 = s[d0_0][d0_1 + 0 + 9];
    tmp_fifo.data.range(319, 288) = *(uint32_t *)(&tmp_9);
    float tmp_10 = s[d0_0][d0_1 + 0 + 10];
    tmp_fifo.data.range(351, 320) = *(uint32_t *)(&tmp_10);
    float tmp_11 = s[d0_0][d0_1 + 0 + 11];
    tmp_fifo.data.range(383, 352) = *(uint32_t *)(&tmp_11);
    float tmp_12 = s[d0_0][d0_1 + 0 + 12];
    tmp_fifo.data.range(415, 384) = *(uint32_t *)(&tmp_12);
    float tmp_13 = s[d0_0][d0_1 + 0 + 13];
    tmp_fifo.data.range(447, 416) = *(uint32_t *)(&tmp_13);
    float tmp_14 = s[d0_0][d0_1 + 0 + 14];
    tmp_fifo.data.range(479, 448) = *(uint32_t *)(&tmp_14);
    float tmp_15 = s[d0_0][d0_1 + 0 + 15];
    tmp_fifo.data.range(511, 480) = *(uint32_t *)(&tmp_15);
    fifo_s_to_off_chip.write(tmp_fifo);
  }
}
void write_q_FT1(float q[1][10], hls::stream<float2> &fifo_q_to_off_chip,
                 int i0) {
#pragma HLS inline off
  if (i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 10; d0 += 2) {
#pragma HLS pipeline II = 1
    int d0_0 = d0 / 10;
    int d0_1 = d0 % 10;
    float2 tmp_fifo;
    tmp_fifo[0] = q[d0_0][d0_1 + 0 + 0];
    tmp_fifo[1] = q[d0_0][d0_1 + 0 + 1];
    fifo_q_to_off_chip.write(tmp_fifo);
  }
}
void write_q_FT1(float q[1][10],
                 hls::stream<ap_axiu<64, 0, 0, 0>> &fifo_q_to_off_chip,
                 int i0) {
#pragma HLS inline off
  if (i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 10; d0 += 2) {
#pragma HLS pipeline II = 1
    int d0_0 = d0 / 10;
    int d0_1 = d0 % 10;
    ap_axiu<64, 0, 0, 0> tmp_fifo;
    float tmp_0 = q[d0_0][d0_1 + 0 + 0];
    tmp_fifo.data.range(31, 0) = *(uint32_t *)(&tmp_0);
    float tmp_1 = q[d0_0][d0_1 + 0 + 1];
    tmp_fifo.data.range(63, 32) = *(uint32_t *)(&tmp_1);
    fifo_q_to_off_chip.write(tmp_fifo);
  }
}

void kernel_nlp_slr0(float16 vs_for_task1[25], float16 vr_for_task1[26],
                     float16 vA_for_task1[10400], float16 vA_for_task3[10400],
                     float2 vq_for_task3[205], float16 vp_for_task3[25]) {
#pragma HLS INTERFACE m_axi port = vs_for_task1 offset = slave bundle =        \
    kernel_vs_for_task1
#pragma HLS INTERFACE m_axi port = vr_for_task1 offset = slave bundle =        \
    kernel_vr_for_task1
#pragma HLS INTERFACE m_axi port = vA_for_task1 offset = slave bundle =        \
    kernel_vA_for_task1
#pragma HLS INTERFACE m_axi port = vA_for_task3 offset = slave bundle =        \
    kernel_vA_for_task3
#pragma HLS INTERFACE m_axi port = vq_for_task3 offset = slave bundle =        \
    kernel_vq_for_task3
#pragma HLS INTERFACE m_axi port = vp_for_task3 offset = slave bundle =        \
    kernel_vp_for_task3
#pragma HLS INTERFACE s_axilite port = vs_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vr_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vA_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vA_for_task3 bundle = control
#pragma HLS INTERFACE s_axilite port = vq_for_task3 bundle = control
#pragma HLS INTERFACE s_axilite port = vp_for_task3 bundle = control
#pragma HLS DATA_PACK VARIABLE = vs_for_task1
#pragma HLS DATA_PACK VARIABLE = vr_for_task1
#pragma HLS DATA_PACK VARIABLE = vA_for_task1
#pragma HLS DATA_PACK VARIABLE = vA_for_task3
#pragma HLS DATA_PACK VARIABLE = vq_for_task3
#pragma HLS DATA_PACK VARIABLE = vp_for_task3
#pragma HLS INTERFACE s_axilite port = return bundle = control
#pragma HLS dataflow
  hls::stream<float2> fifo_q_to_off_chip;
#pragma HLS stream variable = fifo_q_to_off_chip depth = 1024
  hls::stream<float16> fifo_s_to_off_chip;
#pragma HLS stream variable = fifo_s_to_off_chip depth = 1024
  hls::stream<float16> fifo_r_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_r_from_off_chip_to_S1 depth = 1024
  hls::stream<float16> fifo_A_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_A_from_off_chip_to_S1 depth = 1024
  hls::stream<float16> fifo_A_from_off_chip_to_S3;
#pragma HLS stream variable = fifo_A_from_off_chip_to_S3 depth = 1024
  hls::stream<float16> fifo_p_from_off_chip_to_S3;
#pragma HLS stream variable = fifo_p_from_off_chip_to_S3 depth = 1024
  load_vp_for_task3(fifo_p_from_off_chip_to_S3, vp_for_task3);
  load_vA_for_task3(fifo_A_from_off_chip_to_S3, vA_for_task3);
  load_vA_for_task1(fifo_A_from_off_chip_to_S1, vA_for_task1);
  load_vr_for_task1(fifo_r_from_off_chip_to_S1, vr_for_task1);
  FT0_level0(fifo_A_from_off_chip_to_S1, fifo_r_from_off_chip_to_S1,
             fifo_s_to_off_chip);
  FT1_level0(fifo_p_from_off_chip_to_S3, fifo_A_from_off_chip_to_S3,
             fifo_q_to_off_chip);
  store_vs_for_task1(fifo_s_to_off_chip, vs_for_task1);
  store_vq_for_task3(fifo_q_to_off_chip, vq_for_task3);
}
