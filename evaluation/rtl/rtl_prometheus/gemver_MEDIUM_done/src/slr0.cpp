#include "output.h"

#define READ_RANGE(Arr, data_size, l)                                          \
  (Arr.data.range((data_size) * (l) + (data_size) - 1, (data_size) * (l)))

/****************************************************
 This file was automatically generated by Prometheus
****************************************************/
void load_vy_for_task1(hls::stream<float16> &fifo_y_from_off_chip_to_S1,
                       float16 vy[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    fifo_y_from_off_chip_to_S1.write(vy[i]);
  }
}
void load_vy_for_task1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_y_from_off_chip_to_S1,
    float16 vy[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    float16 vy_off = vy[i];
    ap_axiu<512, 0, 0, 0> vy_on;
    vy_on.data.range(31, 0) = *(uint32_t *)(&vy_off[0]);
    vy_on.data.range(63, 32) = *(uint32_t *)(&vy_off[1]);
    vy_on.data.range(95, 64) = *(uint32_t *)(&vy_off[2]);
    vy_on.data.range(127, 96) = *(uint32_t *)(&vy_off[3]);
    vy_on.data.range(159, 128) = *(uint32_t *)(&vy_off[4]);
    vy_on.data.range(191, 160) = *(uint32_t *)(&vy_off[5]);
    vy_on.data.range(223, 192) = *(uint32_t *)(&vy_off[6]);
    vy_on.data.range(255, 224) = *(uint32_t *)(&vy_off[7]);
    vy_on.data.range(287, 256) = *(uint32_t *)(&vy_off[8]);
    vy_on.data.range(319, 288) = *(uint32_t *)(&vy_off[9]);
    vy_on.data.range(351, 320) = *(uint32_t *)(&vy_off[10]);
    vy_on.data.range(383, 352) = *(uint32_t *)(&vy_off[11]);
    vy_on.data.range(415, 384) = *(uint32_t *)(&vy_off[12]);
    vy_on.data.range(447, 416) = *(uint32_t *)(&vy_off[13]);
    vy_on.data.range(479, 448) = *(uint32_t *)(&vy_off[14]);
    vy_on.data.range(511, 480) = *(uint32_t *)(&vy_off[15]);
    fifo_y_from_off_chip_to_S1.write(vy_on);
  }
}
void load_vx_for_task1(hls::stream<float16> &fifo_x_from_off_chip_to_S1,
                       float16 vx[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    fifo_x_from_off_chip_to_S1.write(vx[i]);
  }
}
void load_vx_for_task1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_x_from_off_chip_to_S1,
    float16 vx[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    float16 vx_off = vx[i];
    ap_axiu<512, 0, 0, 0> vx_on;
    vx_on.data.range(31, 0) = *(uint32_t *)(&vx_off[0]);
    vx_on.data.range(63, 32) = *(uint32_t *)(&vx_off[1]);
    vx_on.data.range(95, 64) = *(uint32_t *)(&vx_off[2]);
    vx_on.data.range(127, 96) = *(uint32_t *)(&vx_off[3]);
    vx_on.data.range(159, 128) = *(uint32_t *)(&vx_off[4]);
    vx_on.data.range(191, 160) = *(uint32_t *)(&vx_off[5]);
    vx_on.data.range(223, 192) = *(uint32_t *)(&vx_off[6]);
    vx_on.data.range(255, 224) = *(uint32_t *)(&vx_off[7]);
    vx_on.data.range(287, 256) = *(uint32_t *)(&vx_off[8]);
    vx_on.data.range(319, 288) = *(uint32_t *)(&vx_off[9]);
    vx_on.data.range(351, 320) = *(uint32_t *)(&vx_off[10]);
    vx_on.data.range(383, 352) = *(uint32_t *)(&vx_off[11]);
    vx_on.data.range(415, 384) = *(uint32_t *)(&vx_off[12]);
    vx_on.data.range(447, 416) = *(uint32_t *)(&vx_off[13]);
    vx_on.data.range(479, 448) = *(uint32_t *)(&vx_off[14]);
    vx_on.data.range(511, 480) = *(uint32_t *)(&vx_off[15]);
    fifo_x_from_off_chip_to_S1.write(vx_on);
  }
}
void load_vw_for_task3(hls::stream<float8> &fifo_w_from_off_chip_to_S3,
                       float8 vw[50]) {
#pragma HLS inline off
  for (int i = 0; i < 50; i++) {
#pragma HLS pipeline II = 1
    fifo_w_from_off_chip_to_S3.write(vw[i]);
  }
}
void load_vw_for_task3(
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_w_from_off_chip_to_S3,
    float8 vw[50]) {
#pragma HLS inline off
  for (int i = 0; i < 50; i++) {
#pragma HLS pipeline II = 1
    float8 vw_off = vw[i];
    ap_axiu<256, 0, 0, 0> vw_on;
    vw_on.data.range(31, 0) = *(uint32_t *)(&vw_off[0]);
    vw_on.data.range(63, 32) = *(uint32_t *)(&vw_off[1]);
    vw_on.data.range(95, 64) = *(uint32_t *)(&vw_off[2]);
    vw_on.data.range(127, 96) = *(uint32_t *)(&vw_off[3]);
    vw_on.data.range(159, 128) = *(uint32_t *)(&vw_off[4]);
    vw_on.data.range(191, 160) = *(uint32_t *)(&vw_off[5]);
    vw_on.data.range(223, 192) = *(uint32_t *)(&vw_off[6]);
    vw_on.data.range(255, 224) = *(uint32_t *)(&vw_off[7]);
    fifo_w_from_off_chip_to_S3.write(vw_on);
  }
}
void load_ve2_for_task0(hls::stream<float16> &fifo_e2_from_off_chip_to_S0,
                        float16 ve2[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    fifo_e2_from_off_chip_to_S0.write(ve2[i]);
  }
}
void load_ve2_for_task0(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_e2_from_off_chip_to_S0,
    float16 ve2[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    float16 ve2_off = ve2[i];
    ap_axiu<512, 0, 0, 0> ve2_on;
    ve2_on.data.range(31, 0) = *(uint32_t *)(&ve2_off[0]);
    ve2_on.data.range(63, 32) = *(uint32_t *)(&ve2_off[1]);
    ve2_on.data.range(95, 64) = *(uint32_t *)(&ve2_off[2]);
    ve2_on.data.range(127, 96) = *(uint32_t *)(&ve2_off[3]);
    ve2_on.data.range(159, 128) = *(uint32_t *)(&ve2_off[4]);
    ve2_on.data.range(191, 160) = *(uint32_t *)(&ve2_off[5]);
    ve2_on.data.range(223, 192) = *(uint32_t *)(&ve2_off[6]);
    ve2_on.data.range(255, 224) = *(uint32_t *)(&ve2_off[7]);
    ve2_on.data.range(287, 256) = *(uint32_t *)(&ve2_off[8]);
    ve2_on.data.range(319, 288) = *(uint32_t *)(&ve2_off[9]);
    ve2_on.data.range(351, 320) = *(uint32_t *)(&ve2_off[10]);
    ve2_on.data.range(383, 352) = *(uint32_t *)(&ve2_off[11]);
    ve2_on.data.range(415, 384) = *(uint32_t *)(&ve2_off[12]);
    ve2_on.data.range(447, 416) = *(uint32_t *)(&ve2_off[13]);
    ve2_on.data.range(479, 448) = *(uint32_t *)(&ve2_off[14]);
    ve2_on.data.range(511, 480) = *(uint32_t *)(&ve2_off[15]);
    fifo_e2_from_off_chip_to_S0.write(ve2_on);
  }
}
void load_vA_for_task0(hls::stream<float16> &fifo_A_from_off_chip_to_S0,
                       float16 vA[10000]) {
#pragma HLS inline off
  for (int i = 0; i < 10000; i++) {
#pragma HLS pipeline II = 1
    fifo_A_from_off_chip_to_S0.write(vA[i]);
  }
}
void load_vA_for_task0(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S0,
    float16 vA[10000]) {
#pragma HLS inline off
  for (int i = 0; i < 10000; i++) {
#pragma HLS pipeline II = 1
    float16 vA_off = vA[i];
    ap_axiu<512, 0, 0, 0> vA_on;
    vA_on.data.range(31, 0) = *(uint32_t *)(&vA_off[0]);
    vA_on.data.range(63, 32) = *(uint32_t *)(&vA_off[1]);
    vA_on.data.range(95, 64) = *(uint32_t *)(&vA_off[2]);
    vA_on.data.range(127, 96) = *(uint32_t *)(&vA_off[3]);
    vA_on.data.range(159, 128) = *(uint32_t *)(&vA_off[4]);
    vA_on.data.range(191, 160) = *(uint32_t *)(&vA_off[5]);
    vA_on.data.range(223, 192) = *(uint32_t *)(&vA_off[6]);
    vA_on.data.range(255, 224) = *(uint32_t *)(&vA_off[7]);
    vA_on.data.range(287, 256) = *(uint32_t *)(&vA_off[8]);
    vA_on.data.range(319, 288) = *(uint32_t *)(&vA_off[9]);
    vA_on.data.range(351, 320) = *(uint32_t *)(&vA_off[10]);
    vA_on.data.range(383, 352) = *(uint32_t *)(&vA_off[11]);
    vA_on.data.range(415, 384) = *(uint32_t *)(&vA_off[12]);
    vA_on.data.range(447, 416) = *(uint32_t *)(&vA_off[13]);
    vA_on.data.range(479, 448) = *(uint32_t *)(&vA_off[14]);
    vA_on.data.range(511, 480) = *(uint32_t *)(&vA_off[15]);
    fifo_A_from_off_chip_to_S0.write(vA_on);
  }
}
void load_ve1_for_task0(hls::stream<float16> &fifo_e1_from_off_chip_to_S0,
                        float16 ve1[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    fifo_e1_from_off_chip_to_S0.write(ve1[i]);
  }
}
void load_ve1_for_task0(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_e1_from_off_chip_to_S0,
    float16 ve1[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    float16 ve1_off = ve1[i];
    ap_axiu<512, 0, 0, 0> ve1_on;
    ve1_on.data.range(31, 0) = *(uint32_t *)(&ve1_off[0]);
    ve1_on.data.range(63, 32) = *(uint32_t *)(&ve1_off[1]);
    ve1_on.data.range(95, 64) = *(uint32_t *)(&ve1_off[2]);
    ve1_on.data.range(127, 96) = *(uint32_t *)(&ve1_off[3]);
    ve1_on.data.range(159, 128) = *(uint32_t *)(&ve1_off[4]);
    ve1_on.data.range(191, 160) = *(uint32_t *)(&ve1_off[5]);
    ve1_on.data.range(223, 192) = *(uint32_t *)(&ve1_off[6]);
    ve1_on.data.range(255, 224) = *(uint32_t *)(&ve1_off[7]);
    ve1_on.data.range(287, 256) = *(uint32_t *)(&ve1_off[8]);
    ve1_on.data.range(319, 288) = *(uint32_t *)(&ve1_off[9]);
    ve1_on.data.range(351, 320) = *(uint32_t *)(&ve1_off[10]);
    ve1_on.data.range(383, 352) = *(uint32_t *)(&ve1_off[11]);
    ve1_on.data.range(415, 384) = *(uint32_t *)(&ve1_off[12]);
    ve1_on.data.range(447, 416) = *(uint32_t *)(&ve1_off[13]);
    ve1_on.data.range(479, 448) = *(uint32_t *)(&ve1_off[14]);
    ve1_on.data.range(511, 480) = *(uint32_t *)(&ve1_off[15]);
    fifo_e1_from_off_chip_to_S0.write(ve1_on);
  }
}
void load_vu2_for_task0(hls::stream<float16> &fifo_u2_from_off_chip_to_S0,
                        float16 vu2[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    fifo_u2_from_off_chip_to_S0.write(vu2[i]);
  }
}
void load_vu2_for_task0(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_u2_from_off_chip_to_S0,
    float16 vu2[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    float16 vu2_off = vu2[i];
    ap_axiu<512, 0, 0, 0> vu2_on;
    vu2_on.data.range(31, 0) = *(uint32_t *)(&vu2_off[0]);
    vu2_on.data.range(63, 32) = *(uint32_t *)(&vu2_off[1]);
    vu2_on.data.range(95, 64) = *(uint32_t *)(&vu2_off[2]);
    vu2_on.data.range(127, 96) = *(uint32_t *)(&vu2_off[3]);
    vu2_on.data.range(159, 128) = *(uint32_t *)(&vu2_off[4]);
    vu2_on.data.range(191, 160) = *(uint32_t *)(&vu2_off[5]);
    vu2_on.data.range(223, 192) = *(uint32_t *)(&vu2_off[6]);
    vu2_on.data.range(255, 224) = *(uint32_t *)(&vu2_off[7]);
    vu2_on.data.range(287, 256) = *(uint32_t *)(&vu2_off[8]);
    vu2_on.data.range(319, 288) = *(uint32_t *)(&vu2_off[9]);
    vu2_on.data.range(351, 320) = *(uint32_t *)(&vu2_off[10]);
    vu2_on.data.range(383, 352) = *(uint32_t *)(&vu2_off[11]);
    vu2_on.data.range(415, 384) = *(uint32_t *)(&vu2_off[12]);
    vu2_on.data.range(447, 416) = *(uint32_t *)(&vu2_off[13]);
    vu2_on.data.range(479, 448) = *(uint32_t *)(&vu2_off[14]);
    vu2_on.data.range(511, 480) = *(uint32_t *)(&vu2_off[15]);
    fifo_u2_from_off_chip_to_S0.write(vu2_on);
  }
}
void load_vu1_for_task0(hls::stream<float16> &fifo_u1_from_off_chip_to_S0,
                        float16 vu1[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    fifo_u1_from_off_chip_to_S0.write(vu1[i]);
  }
}
void load_vu1_for_task0(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_u1_from_off_chip_to_S0,
    float16 vu1[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    float16 vu1_off = vu1[i];
    ap_axiu<512, 0, 0, 0> vu1_on;
    vu1_on.data.range(31, 0) = *(uint32_t *)(&vu1_off[0]);
    vu1_on.data.range(63, 32) = *(uint32_t *)(&vu1_off[1]);
    vu1_on.data.range(95, 64) = *(uint32_t *)(&vu1_off[2]);
    vu1_on.data.range(127, 96) = *(uint32_t *)(&vu1_off[3]);
    vu1_on.data.range(159, 128) = *(uint32_t *)(&vu1_off[4]);
    vu1_on.data.range(191, 160) = *(uint32_t *)(&vu1_off[5]);
    vu1_on.data.range(223, 192) = *(uint32_t *)(&vu1_off[6]);
    vu1_on.data.range(255, 224) = *(uint32_t *)(&vu1_off[7]);
    vu1_on.data.range(287, 256) = *(uint32_t *)(&vu1_off[8]);
    vu1_on.data.range(319, 288) = *(uint32_t *)(&vu1_off[9]);
    vu1_on.data.range(351, 320) = *(uint32_t *)(&vu1_off[10]);
    vu1_on.data.range(383, 352) = *(uint32_t *)(&vu1_off[11]);
    vu1_on.data.range(415, 384) = *(uint32_t *)(&vu1_off[12]);
    vu1_on.data.range(447, 416) = *(uint32_t *)(&vu1_off[13]);
    vu1_on.data.range(479, 448) = *(uint32_t *)(&vu1_off[14]);
    vu1_on.data.range(511, 480) = *(uint32_t *)(&vu1_off[15]);
    fifo_u1_from_off_chip_to_S0.write(vu1_on);
  }
}
void load_vz_for_task2(hls::stream<float16> &fifo_z_from_off_chip_to_S2,
                       float16 vz[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    fifo_z_from_off_chip_to_S2.write(vz[i]);
  }
}
void load_vz_for_task2(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_z_from_off_chip_to_S2,
    float16 vz[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    float16 vz_off = vz[i];
    ap_axiu<512, 0, 0, 0> vz_on;
    vz_on.data.range(31, 0) = *(uint32_t *)(&vz_off[0]);
    vz_on.data.range(63, 32) = *(uint32_t *)(&vz_off[1]);
    vz_on.data.range(95, 64) = *(uint32_t *)(&vz_off[2]);
    vz_on.data.range(127, 96) = *(uint32_t *)(&vz_off[3]);
    vz_on.data.range(159, 128) = *(uint32_t *)(&vz_off[4]);
    vz_on.data.range(191, 160) = *(uint32_t *)(&vz_off[5]);
    vz_on.data.range(223, 192) = *(uint32_t *)(&vz_off[6]);
    vz_on.data.range(255, 224) = *(uint32_t *)(&vz_off[7]);
    vz_on.data.range(287, 256) = *(uint32_t *)(&vz_off[8]);
    vz_on.data.range(319, 288) = *(uint32_t *)(&vz_off[9]);
    vz_on.data.range(351, 320) = *(uint32_t *)(&vz_off[10]);
    vz_on.data.range(383, 352) = *(uint32_t *)(&vz_off[11]);
    vz_on.data.range(415, 384) = *(uint32_t *)(&vz_off[12]);
    vz_on.data.range(447, 416) = *(uint32_t *)(&vz_off[13]);
    vz_on.data.range(479, 448) = *(uint32_t *)(&vz_off[14]);
    vz_on.data.range(511, 480) = *(uint32_t *)(&vz_off[15]);
    fifo_z_from_off_chip_to_S2.write(vz_on);
  }
}
void store_vx_for_task1(hls::stream<float16> &fifo_x_to_off_chip,
                        float16 vx[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    vx[i] = fifo_x_to_off_chip.read();
  }
}
void store_vx_for_task1(hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_x_to_off_chip,
                        float16 vx[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    float16 vx_off;
    ap_axiu<512, 0, 0, 0> vx_on = fifo_x_to_off_chip.read();
    uint32_t vx_tmp[16];
    vx_tmp[0] = vx_on.data.range(31, 0);
    vx_off[0] = *(float *)(&vx_tmp[0]);
    vx_tmp[1] = vx_on.data.range(63, 32);
    vx_off[1] = *(float *)(&vx_tmp[1]);
    vx_tmp[2] = vx_on.data.range(95, 64);
    vx_off[2] = *(float *)(&vx_tmp[2]);
    vx_tmp[3] = vx_on.data.range(127, 96);
    vx_off[3] = *(float *)(&vx_tmp[3]);
    vx_tmp[4] = vx_on.data.range(159, 128);
    vx_off[4] = *(float *)(&vx_tmp[4]);
    vx_tmp[5] = vx_on.data.range(191, 160);
    vx_off[5] = *(float *)(&vx_tmp[5]);
    vx_tmp[6] = vx_on.data.range(223, 192);
    vx_off[6] = *(float *)(&vx_tmp[6]);
    vx_tmp[7] = vx_on.data.range(255, 224);
    vx_off[7] = *(float *)(&vx_tmp[7]);
    vx_tmp[8] = vx_on.data.range(287, 256);
    vx_off[8] = *(float *)(&vx_tmp[8]);
    vx_tmp[9] = vx_on.data.range(319, 288);
    vx_off[9] = *(float *)(&vx_tmp[9]);
    vx_tmp[10] = vx_on.data.range(351, 320);
    vx_off[10] = *(float *)(&vx_tmp[10]);
    vx_tmp[11] = vx_on.data.range(383, 352);
    vx_off[11] = *(float *)(&vx_tmp[11]);
    vx_tmp[12] = vx_on.data.range(415, 384);
    vx_off[12] = *(float *)(&vx_tmp[12]);
    vx_tmp[13] = vx_on.data.range(447, 416);
    vx_off[13] = *(float *)(&vx_tmp[13]);
    vx_tmp[14] = vx_on.data.range(479, 448);
    vx_off[14] = *(float *)(&vx_tmp[14]);
    vx_tmp[15] = vx_on.data.range(511, 480);
    vx_off[15] = *(float *)(&vx_tmp[15]);
    vx[i] = vx_off;
  }
}
void store_vA_for_task0(hls::stream<float16> &fifo_A_to_off_chip,
                        float16 vA[10000]) {
#pragma HLS inline off
  for (int i = 0; i < 10000; i++) {
#pragma HLS pipeline II = 1
    vA[i] = fifo_A_to_off_chip.read();
  }
}
void store_vA_for_task0(hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_to_off_chip,
                        float16 vA[10000]) {
#pragma HLS inline off
  for (int i = 0; i < 10000; i++) {
#pragma HLS pipeline II = 1
    float16 vA_off;
    ap_axiu<512, 0, 0, 0> vA_on = fifo_A_to_off_chip.read();
    uint32_t vA_tmp[16];
    vA_tmp[0] = vA_on.data.range(31, 0);
    vA_off[0] = *(float *)(&vA_tmp[0]);
    vA_tmp[1] = vA_on.data.range(63, 32);
    vA_off[1] = *(float *)(&vA_tmp[1]);
    vA_tmp[2] = vA_on.data.range(95, 64);
    vA_off[2] = *(float *)(&vA_tmp[2]);
    vA_tmp[3] = vA_on.data.range(127, 96);
    vA_off[3] = *(float *)(&vA_tmp[3]);
    vA_tmp[4] = vA_on.data.range(159, 128);
    vA_off[4] = *(float *)(&vA_tmp[4]);
    vA_tmp[5] = vA_on.data.range(191, 160);
    vA_off[5] = *(float *)(&vA_tmp[5]);
    vA_tmp[6] = vA_on.data.range(223, 192);
    vA_off[6] = *(float *)(&vA_tmp[6]);
    vA_tmp[7] = vA_on.data.range(255, 224);
    vA_off[7] = *(float *)(&vA_tmp[7]);
    vA_tmp[8] = vA_on.data.range(287, 256);
    vA_off[8] = *(float *)(&vA_tmp[8]);
    vA_tmp[9] = vA_on.data.range(319, 288);
    vA_off[9] = *(float *)(&vA_tmp[9]);
    vA_tmp[10] = vA_on.data.range(351, 320);
    vA_off[10] = *(float *)(&vA_tmp[10]);
    vA_tmp[11] = vA_on.data.range(383, 352);
    vA_off[11] = *(float *)(&vA_tmp[11]);
    vA_tmp[12] = vA_on.data.range(415, 384);
    vA_off[12] = *(float *)(&vA_tmp[12]);
    vA_tmp[13] = vA_on.data.range(447, 416);
    vA_off[13] = *(float *)(&vA_tmp[13]);
    vA_tmp[14] = vA_on.data.range(479, 448);
    vA_off[14] = *(float *)(&vA_tmp[14]);
    vA_tmp[15] = vA_on.data.range(511, 480);
    vA_off[15] = *(float *)(&vA_tmp[15]);
    vA[i] = vA_off;
  }
}
void store_vw_for_task3(hls::stream<float8> &fifo_w_to_off_chip,
                        float8 vw[50]) {
#pragma HLS inline off
  for (int i = 0; i < 50; i++) {
#pragma HLS pipeline II = 1
    vw[i] = fifo_w_to_off_chip.read();
  }
}
void store_vw_for_task3(hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_w_to_off_chip,
                        float8 vw[50]) {
#pragma HLS inline off
  for (int i = 0; i < 50; i++) {
#pragma HLS pipeline II = 1
    float8 vw_off;
    ap_axiu<256, 0, 0, 0> vw_on = fifo_w_to_off_chip.read();
    uint32_t vw_tmp[8];
    vw_tmp[0] = vw_on.data.range(31, 0);
    vw_off[0] = *(float *)(&vw_tmp[0]);
    vw_tmp[1] = vw_on.data.range(63, 32);
    vw_off[1] = *(float *)(&vw_tmp[1]);
    vw_tmp[2] = vw_on.data.range(95, 64);
    vw_off[2] = *(float *)(&vw_tmp[2]);
    vw_tmp[3] = vw_on.data.range(127, 96);
    vw_off[3] = *(float *)(&vw_tmp[3]);
    vw_tmp[4] = vw_on.data.range(159, 128);
    vw_off[4] = *(float *)(&vw_tmp[4]);
    vw_tmp[5] = vw_on.data.range(191, 160);
    vw_off[5] = *(float *)(&vw_tmp[5]);
    vw_tmp[6] = vw_on.data.range(223, 192);
    vw_off[6] = *(float *)(&vw_tmp[6]);
    vw_tmp[7] = vw_on.data.range(255, 224);
    vw_off[7] = *(float *)(&vw_tmp[7]);
    vw[i] = vw_off;
  }
}
void FT0_level0(float alpha, float beta,
                hls::stream<float16> &fifo_A_from_task0_to_task1,
                hls::stream<float16> &fifo_A_from_task0_to_task3,
                hls::stream<float16> &fifo_e2_from_off_chip_to_S0,
                hls::stream<float16> &fifo_A_from_off_chip_to_S0,
                hls::stream<float16> &fifo_e1_from_off_chip_to_S0,
                hls::stream<float16> &fifo_u2_from_off_chip_to_S0,
                hls::stream<float16> &fifo_u1_from_off_chip_to_S0,
                hls::stream<float16> &fifo_A_to_off_chip) {
#pragma HLS inline off
  float e1_0[16];
  // FT0
#pragma HLS array_partition variable = e1_0 cyclic factor = 16 dim = 1
  float e1_1[16];
  // FT0
#pragma HLS array_partition variable = e1_1 cyclic factor = 16 dim = 1
  float u1[400];
#pragma HLS array_partition variable = u1 cyclic factor = 40 dim = 1
  float u2[400];
#pragma HLS array_partition variable = u2 cyclic factor = 40 dim = 1
  float e2[400];
#pragma HLS array_partition variable = e2 cyclic factor = 16 dim = 1
  read_u1_FT0(u1, fifo_u1_from_off_chip_to_S0);
  read_u2_FT0(u2, fifo_u2_from_off_chip_to_S0);
  read_e2_FT0(e2, fifo_e2_from_off_chip_to_S0);
  read_e1_FT0(e1_0, fifo_e1_from_off_chip_to_S0, 0);
  for (int j0 = 0; j0 < 25; j0++) {
    if (j0 % 2 == 0) {
      read_e1_FT0(e1_1, fifo_e1_from_off_chip_to_S0, j0 + 1);
      FT0_level1(alpha, beta, fifo_A_from_task0_to_task1,
                 fifo_A_from_task0_to_task3, fifo_e2_from_off_chip_to_S0,
                 fifo_A_from_off_chip_to_S0, fifo_e1_from_off_chip_to_S0,
                 fifo_u2_from_off_chip_to_S0, fifo_u1_from_off_chip_to_S0,
                 fifo_A_to_off_chip, e1_0, u1, u2, e2, j0);
    } else if (j0 % 2 == 1) {
      read_e1_FT0(e1_0, fifo_e1_from_off_chip_to_S0, j0 + 1);
      FT0_level1(alpha, beta, fifo_A_from_task0_to_task1,
                 fifo_A_from_task0_to_task3, fifo_e2_from_off_chip_to_S0,
                 fifo_A_from_off_chip_to_S0, fifo_e1_from_off_chip_to_S0,
                 fifo_u2_from_off_chip_to_S0, fifo_u1_from_off_chip_to_S0,
                 fifo_A_to_off_chip, e1_1, u1, u2, e2, j0);
    }
  }
}
void compute_FT0_level1(float alpha, float beta,
                        hls::stream<float16> &fifo_A_from_task0_to_task1,
                        hls::stream<float16> &fifo_A_from_task0_to_task3,
                        hls::stream<float16> &fifo_e2_from_off_chip_to_S0,
                        hls::stream<float16> &fifo_A_from_off_chip_to_S0,
                        hls::stream<float16> &fifo_e1_from_off_chip_to_S0,
                        hls::stream<float16> &fifo_u2_from_off_chip_to_S0,
                        hls::stream<float16> &fifo_u1_from_off_chip_to_S0,
                        hls::stream<float16> &fifo_A_to_off_chip, float e1[16],
                        float u1[400], float u2[400], float e2[400], int j0,
                        int i0, float A_0[40][16], float A_1[40][16],
                        float A_2[40][16]) {
#pragma HLS inline off
#pragma HLS dataflow
  read_A_FT0(A_0, fifo_A_from_off_chip_to_S0, i0 + 1, j0);
  task0_intra(alpha, beta, e1, u1, u2, e2, j0, A_1, i0);
  write_A_FT0(A_2, fifo_A_from_task0_to_task1, i0 - 1, j0);
  write_A_FT0(A_2, fifo_A_from_task0_to_task3, i0 - 1, j0);
  write_A_FT0(A_2, fifo_A_to_off_chip, i0 - 1, j0);
}
void FT0_level1(float alpha, float beta,
                hls::stream<float16> &fifo_A_from_task0_to_task1,
                hls::stream<float16> &fifo_A_from_task0_to_task3,
                hls::stream<float16> &fifo_e2_from_off_chip_to_S0,
                hls::stream<float16> &fifo_A_from_off_chip_to_S0,
                hls::stream<float16> &fifo_e1_from_off_chip_to_S0,
                hls::stream<float16> &fifo_u2_from_off_chip_to_S0,
                hls::stream<float16> &fifo_u1_from_off_chip_to_S0,
                hls::stream<float16> &fifo_A_to_off_chip, float e1[16],
                float u1[400], float u2[400], float e2[400], int j0) {
#pragma HLS inline off
  float A_0[40][16];
  // FT0
#pragma HLS array_partition variable = A_0 cyclic factor = 40 dim = 1
#pragma HLS array_partition variable = A_0 cyclic factor = 16 dim = 2
  float A_1[40][16];
  // FT0
#pragma HLS array_partition variable = A_1 cyclic factor = 40 dim = 1
#pragma HLS array_partition variable = A_1 cyclic factor = 16 dim = 2
  float A_2[40][16];
  // FT0
#pragma HLS array_partition variable = A_2 cyclic factor = 40 dim = 1
#pragma HLS array_partition variable = A_2 cyclic factor = 16 dim = 2
  read_A_FT0(A_0, fifo_A_from_off_chip_to_S0, 0, j0);
  for (int i0 = 0; i0 < 10; i0++) {

    if (i0 % 3 == 0) {
      //     read_A_FT0(A_1, fifo_A_from_off_chip_to_S0, i0+1, j0);
      //     task0_intra(alpha, beta, e1, u1, u2, e2, j0, A_0, i0);
      //     write_A_FT0(A_2, fifo_A_from_task0_to_task1, i0-1, j0);
      //     write_A_FT0(A_2, fifo_A_from_task0_to_task3, i0-1, j0);
      //     write_A_FT0(A_2, fifo_A_to_off_chip, i0-1, j0);
      compute_FT0_level1(
          alpha, beta, fifo_A_from_task0_to_task1, fifo_A_from_task0_to_task3,
          fifo_e2_from_off_chip_to_S0, fifo_A_from_off_chip_to_S0,
          fifo_e1_from_off_chip_to_S0, fifo_u2_from_off_chip_to_S0,
          fifo_u1_from_off_chip_to_S0, fifo_A_to_off_chip, e1, u1, u2, e2, j0,
          i0, A_1, A_0, A_2);
    } else if (i0 % 3 == 1) {
      //     read_A_FT0(A_2, fifo_A_from_off_chip_to_S0, i0+1, j0);
      //     task0_intra(alpha, beta, e1, u1, u2, e2, j0, A_1, i0);
      //     write_A_FT0(A_0, fifo_A_from_task0_to_task1, i0-1, j0);
      //     write_A_FT0(A_0, fifo_A_from_task0_to_task3, i0-1, j0);
      //     write_A_FT0(A_0, fifo_A_to_off_chip, i0-1, j0);
      compute_FT0_level1(
          alpha, beta, fifo_A_from_task0_to_task1, fifo_A_from_task0_to_task3,
          fifo_e2_from_off_chip_to_S0, fifo_A_from_off_chip_to_S0,
          fifo_e1_from_off_chip_to_S0, fifo_u2_from_off_chip_to_S0,
          fifo_u1_from_off_chip_to_S0, fifo_A_to_off_chip, e1, u1, u2, e2, j0,
          i0, A_2, A_1, A_0);
    } else if (i0 % 3 == 2) {
      //     read_A_FT0(A_0, fifo_A_from_off_chip_to_S0, i0+1, j0);
      //     task0_intra(alpha, beta, e1, u1, u2, e2, j0, A_2, i0);
      //     write_A_FT0(A_1, fifo_A_from_task0_to_task1, i0-1, j0);
      //     write_A_FT0(A_1, fifo_A_from_task0_to_task3, i0-1, j0);
      //     write_A_FT0(A_1, fifo_A_to_off_chip, i0-1, j0);
      compute_FT0_level1(
          alpha, beta, fifo_A_from_task0_to_task1, fifo_A_from_task0_to_task3,
          fifo_e2_from_off_chip_to_S0, fifo_A_from_off_chip_to_S0,
          fifo_e1_from_off_chip_to_S0, fifo_u2_from_off_chip_to_S0,
          fifo_u1_from_off_chip_to_S0, fifo_A_to_off_chip, e1, u1, u2, e2, j0,
          i0, A_0, A_2, A_1);
    }
  }
  write_A_FT0(A_0, fifo_A_from_task0_to_task1, 9, j0);
  write_A_FT0(A_0, fifo_A_from_task0_to_task3, 9, j0);
  write_A_FT0(A_0, fifo_A_to_off_chip, 9, j0);
}
void compute_FT1_level0(float alpha, float beta,
                        hls::stream<float16> &fifo_A_from_task0_to_task1,
                        hls::stream<float16> &fifo_y_from_off_chip_to_S1,
                        hls::stream<float16> &fifo_x_from_off_chip_to_S1,
                        hls::stream<float16> &fifo_x_from_task2_to_task3,
                        hls::stream<float16> &fifo_z_from_off_chip_to_S2,
                        hls::stream<float16> &fifo_x_to_off_chip, int i0,
                        float x_0[16], float x_1[16], float x_2[16],
                        float A_0[400][16], float A_1[400][16],
                        float A_2[400][16], float y[400], float z[400]) {
#pragma HLS inline off
#pragma HLS dataflow
  read_x_FT1(x_0, fifo_x_from_off_chip_to_S1, i0 + 1);
  read_A_FT1(A_0, fifo_A_from_task0_to_task1, i0 + 1);
  task1_intra(alpha, beta, x_1, A_1, y, z, i0);
  task2_intra(alpha, beta, x_1, A_1, y, z, i0);
  write_x_FT1(x_2, fifo_x_from_task2_to_task3, i0 - 1);
  write_x_FT1(x_2, fifo_x_to_off_chip, i0 - 1);
}
void FT1_level0(float alpha, float beta,
                hls::stream<float16> &fifo_A_from_task0_to_task1,
                hls::stream<float16> &fifo_y_from_off_chip_to_S1,
                hls::stream<float16> &fifo_x_from_off_chip_to_S1,
                hls::stream<float16> &fifo_x_from_task2_to_task3,
                hls::stream<float16> &fifo_z_from_off_chip_to_S2,
                hls::stream<float16> &fifo_x_to_off_chip) {
#pragma HLS inline off
  float x_0[16];
  // FT1
#pragma HLS array_partition variable = x_0 cyclic factor = 16 dim = 1
  float x_1[16];
  // FT1
#pragma HLS array_partition variable = x_1 cyclic factor = 16 dim = 1
  float x_2[16];
  // FT1
#pragma HLS array_partition variable = x_2 cyclic factor = 16 dim = 1
  float A_0[400][16];
  // FT1
#pragma HLS array_partition variable = A_0 cyclic factor = 1 dim = 1
#pragma HLS array_partition variable = A_0 cyclic factor = 16 dim = 2
  float A_1[400][16];
  // FT1
#pragma HLS array_partition variable = A_1 cyclic factor = 1 dim = 1
#pragma HLS array_partition variable = A_1 cyclic factor = 16 dim = 2
  float A_2[400][16];
  // FT1
#pragma HLS array_partition variable = A_2 cyclic factor = 1 dim = 1
#pragma HLS array_partition variable = A_2 cyclic factor = 16 dim = 2
  float y[400];
#pragma HLS array_partition variable = y cyclic factor = 1 dim = 1
  float z[400];
#pragma HLS array_partition variable = z cyclic factor = 16 dim = 1
  read_y_FT1(y, fifo_y_from_off_chip_to_S1);
  read_z_FT1(z, fifo_z_from_off_chip_to_S2);
  read_x_FT1(x_0, fifo_x_from_off_chip_to_S1, 0);
  read_A_FT1(A_0, fifo_A_from_task0_to_task1, 0);
  for (int i0 = 0; i0 < 25; i0++) {
    if (i0 % 3 == 0) {
      //     read_x_FT1(x_1, fifo_x_from_off_chip_to_S1, i0+1);
      //     read_A_FT1(A_1, fifo_A_from_task0_to_task1, i0+1);
      //     task1_intra(alpha, beta, x_0, A_0, y, z, i0);
      //     task2_intra(alpha, beta, x_0, A_0, y, z, i0);
      //     write_x_FT1(x_2, fifo_x_from_task2_to_task3, i0-1);
      //     write_x_FT1(x_2, fifo_x_to_off_chip, i0-1);
      compute_FT1_level0(alpha, beta, fifo_A_from_task0_to_task1,
                         fifo_y_from_off_chip_to_S1, fifo_x_from_off_chip_to_S1,
                         fifo_x_from_task2_to_task3, fifo_z_from_off_chip_to_S2,
                         fifo_x_to_off_chip, i0, x_1, x_0, x_2, A_1, A_0, A_2,
                         y, z);
    } else if (i0 % 3 == 1) {
      //     read_x_FT1(x_2, fifo_x_from_off_chip_to_S1, i0+1);
      //     read_A_FT1(A_2, fifo_A_from_task0_to_task1, i0+1);
      //     task1_intra(alpha, beta, x_1, A_1, y, z, i0);
      //     task2_intra(alpha, beta, x_1, A_1, y, z, i0);
      //     write_x_FT1(x_0, fifo_x_from_task2_to_task3, i0-1);
      //     write_x_FT1(x_0, fifo_x_to_off_chip, i0-1);
      compute_FT1_level0(alpha, beta, fifo_A_from_task0_to_task1,
                         fifo_y_from_off_chip_to_S1, fifo_x_from_off_chip_to_S1,
                         fifo_x_from_task2_to_task3, fifo_z_from_off_chip_to_S2,
                         fifo_x_to_off_chip, i0, x_2, x_1, x_0, A_2, A_1, A_0,
                         y, z);
    } else if (i0 % 3 == 2) {
      //     read_x_FT1(x_0, fifo_x_from_off_chip_to_S1, i0+1);
      //     read_A_FT1(A_0, fifo_A_from_task0_to_task1, i0+1);
      //     task1_intra(alpha, beta, x_2, A_2, y, z, i0);
      //     task2_intra(alpha, beta, x_2, A_2, y, z, i0);
      //     write_x_FT1(x_1, fifo_x_from_task2_to_task3, i0-1);
      //     write_x_FT1(x_1, fifo_x_to_off_chip, i0-1);
      compute_FT1_level0(alpha, beta, fifo_A_from_task0_to_task1,
                         fifo_y_from_off_chip_to_S1, fifo_x_from_off_chip_to_S1,
                         fifo_x_from_task2_to_task3, fifo_z_from_off_chip_to_S2,
                         fifo_x_to_off_chip, i0, x_0, x_2, x_1, A_0, A_2, A_1,
                         y, z);
    }
  }
  write_x_FT1(x_0, fifo_x_from_task2_to_task3, 24);
  write_x_FT1(x_0, fifo_x_to_off_chip, 24);
}
void compute_FT2_level0(float alpha, float beta,
                        hls::stream<float16> &fifo_A_from_task0_to_task3,
                        hls::stream<float16> &fifo_x_from_task2_to_task3,
                        hls::stream<float8> &fifo_w_from_off_chip_to_S3,
                        hls::stream<float8> &fifo_w_to_off_chip, int i0,
                        float w_0[40], float w_1[40], float w_2[40],
                        float A[400][400], float x[400]) {
#pragma HLS inline off
#pragma HLS dataflow
  read_w_FT2(w_0, fifo_w_from_off_chip_to_S3, i0 + 1);
  task3_intra(alpha, beta, w_1, A, x, i0);
  write_w_FT2(w_2, fifo_w_to_off_chip, i0 - 1);
}
void FT2_level0(float alpha, float beta,
                hls::stream<float16> &fifo_A_from_task0_to_task3,
                hls::stream<float16> &fifo_x_from_task2_to_task3,
                hls::stream<float8> &fifo_w_from_off_chip_to_S3,
                hls::stream<float8> &fifo_w_to_off_chip) {
#pragma HLS inline off
  float w_0[40];
  // FT2
#pragma HLS array_partition variable = w_0 cyclic factor = 40 dim = 1
  float w_1[40];
  // FT2
#pragma HLS array_partition variable = w_1 cyclic factor = 40 dim = 1
  float w_2[40];
  // FT2
#pragma HLS array_partition variable = w_2 cyclic factor = 40 dim = 1
  float A[400][400];
#pragma HLS array_partition variable = A cyclic factor = 40 dim = 1
#pragma HLS array_partition variable = A cyclic factor = 20 dim = 2
  float x[400];
#pragma HLS array_partition variable = x cyclic factor = 20 dim = 1
  read_A_FT2(A, fifo_A_from_task0_to_task3);
  read_x_FT2(x, fifo_x_from_task2_to_task3);
  read_w_FT2(w_0, fifo_w_from_off_chip_to_S3, 0);
  for (int i0 = 0; i0 < 10; i0++) {
    if (i0 % 3 == 0) {
      //     read_w_FT2(w_1, fifo_w_from_off_chip_to_S3, i0+1);
      //     task3_intra(alpha, beta, w_0, A, x, i0);
      //     write_w_FT2(w_2, fifo_w_to_off_chip, i0-1);
      compute_FT2_level0(alpha, beta, fifo_A_from_task0_to_task3,
                         fifo_x_from_task2_to_task3, fifo_w_from_off_chip_to_S3,
                         fifo_w_to_off_chip, i0, w_1, w_0, w_2, A, x);
    } else if (i0 % 3 == 1) {
      //     read_w_FT2(w_2, fifo_w_from_off_chip_to_S3, i0+1);
      //     task3_intra(alpha, beta, w_1, A, x, i0);
      //     write_w_FT2(w_0, fifo_w_to_off_chip, i0-1);
      compute_FT2_level0(alpha, beta, fifo_A_from_task0_to_task3,
                         fifo_x_from_task2_to_task3, fifo_w_from_off_chip_to_S3,
                         fifo_w_to_off_chip, i0, w_2, w_1, w_0, A, x);
    } else if (i0 % 3 == 2) {
      //     read_w_FT2(w_0, fifo_w_from_off_chip_to_S3, i0+1);
      //     task3_intra(alpha, beta, w_2, A, x, i0);
      //     write_w_FT2(w_1, fifo_w_to_off_chip, i0-1);
      compute_FT2_level0(alpha, beta, fifo_A_from_task0_to_task3,
                         fifo_x_from_task2_to_task3, fifo_w_from_off_chip_to_S3,
                         fifo_w_to_off_chip, i0, w_0, w_2, w_1, A, x);
    }
  }
  write_w_FT2(w_0, fifo_w_to_off_chip, 9);
}
void task0_intra(float alpha, float beta, float e1[16], float u1[400],
                 float u2[400], float e2[400], int j0, float A[40][16],
                 int i0) {
#pragma HLS inline off
  int j;
  int i;
  for (int j1 = 0; j1 < 16; j1++) {
#pragma HLS unroll
    for (int i1 = 0; i1 < 40; i1++) {
#pragma HLS unroll
      j = j0 * 16 + j1;
      i = i0 * 40 + i1;
      A[i1][j1] = A[i1][j1] + u1[i] * e1[j1] + u2[i] * e2[j];
    }
  }
}
void task1_intra(float alpha, float beta, float x[16], float A[400][16],
                 float y[400], float z[400], int i0) {
#pragma HLS inline off
  int i;
  int j;
  for (int j0 = 0; j0 < 400; j0++) {
#pragma HLS pipeline II = 2
    for (int i1 = 0; i1 < 16; i1++) {
#pragma HLS unroll
      for (int j1 = 0; j1 < 1; j1++) {
#pragma HLS unroll
        i = i0 * 16 + i1;
        j = j0 * 1 + j1;
        x[i1] = x[i1] + beta * A[j][i1] * y[j];
      }
    }
  }
}
void task2_intra(float alpha, float beta, float x[16], float A[400][16],
                 float y[400], float z[400], int i0) {
#pragma HLS inline off
  int i;
  for (int i1 = 0; i1 < 16; i1++) {
#pragma HLS unroll
    i = i0 * 16 + i1;
    x[i1] = x[i1] + z[i];
  }
}
void task3_intra(float alpha, float beta, float w[40], float A[400][400],
                 float x[400], int i0) {
#pragma HLS inline off
  int i;
  int j;
  for (int j0 = 0; j0 < 20; j0++) {
#pragma HLS pipeline II = 2
    for (int i1 = 0; i1 < 40; i1++) {
#pragma HLS unroll
      for (int j1 = 0; j1 < 20; j1++) {
#pragma HLS unroll
        i = i0 * 40 + i1;
        j = j0 * 20 + j1;
        w[i1] = w[i1] + alpha * A[i][j] * x[j];
      }
    }
  }
}
void read_u1_FT0(float u1[400],
                 hls::stream<float16> &fifo_u1_from_off_chip_to_S0) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 400; d0 += 16) {
#pragma HLS pipeline II = 1
    float16 tmp_fifo = fifo_u1_from_off_chip_to_S0.read();
    u1[d0 + 0 + 0] = tmp_fifo[0];
    u1[d0 + 0 + 1] = tmp_fifo[1];
    u1[d0 + 0 + 2] = tmp_fifo[2];
    u1[d0 + 0 + 3] = tmp_fifo[3];
    u1[d0 + 0 + 4] = tmp_fifo[4];
    u1[d0 + 0 + 5] = tmp_fifo[5];
    u1[d0 + 0 + 6] = tmp_fifo[6];
    u1[d0 + 0 + 7] = tmp_fifo[7];
    u1[d0 + 0 + 8] = tmp_fifo[8];
    u1[d0 + 0 + 9] = tmp_fifo[9];
    u1[d0 + 0 + 10] = tmp_fifo[10];
    u1[d0 + 0 + 11] = tmp_fifo[11];
    u1[d0 + 0 + 12] = tmp_fifo[12];
    u1[d0 + 0 + 13] = tmp_fifo[13];
    u1[d0 + 0 + 14] = tmp_fifo[14];
    u1[d0 + 0 + 15] = tmp_fifo[15];
  }
}
void read_u1_FT0(
    float u1[400],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_u1_from_off_chip_to_S0) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 400; d0 += 16) {
#pragma HLS pipeline II = 1
    ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_u1_from_off_chip_to_S0.read();
    uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
    u1[d0 + 0 + 0] = *(float *)(&tmp_0);
    uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
    u1[d0 + 0 + 1] = *(float *)(&tmp_1);
    uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
    u1[d0 + 0 + 2] = *(float *)(&tmp_2);
    uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
    u1[d0 + 0 + 3] = *(float *)(&tmp_3);
    uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
    u1[d0 + 0 + 4] = *(float *)(&tmp_4);
    uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
    u1[d0 + 0 + 5] = *(float *)(&tmp_5);
    uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
    u1[d0 + 0 + 6] = *(float *)(&tmp_6);
    uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
    u1[d0 + 0 + 7] = *(float *)(&tmp_7);
    uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
    u1[d0 + 0 + 8] = *(float *)(&tmp_8);
    uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
    u1[d0 + 0 + 9] = *(float *)(&tmp_9);
    uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
    u1[d0 + 0 + 10] = *(float *)(&tmp_10);
    uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
    u1[d0 + 0 + 11] = *(float *)(&tmp_11);
    uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
    u1[d0 + 0 + 12] = *(float *)(&tmp_12);
    uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
    u1[d0 + 0 + 13] = *(float *)(&tmp_13);
    uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
    u1[d0 + 0 + 14] = *(float *)(&tmp_14);
    uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
    u1[d0 + 0 + 15] = *(float *)(&tmp_15);
  }
}
void read_u2_FT0(float u2[400],
                 hls::stream<float16> &fifo_u2_from_off_chip_to_S0) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 400; d0 += 16) {
#pragma HLS pipeline II = 1
    float16 tmp_fifo = fifo_u2_from_off_chip_to_S0.read();
    u2[d0 + 0 + 0] = tmp_fifo[0];
    u2[d0 + 0 + 1] = tmp_fifo[1];
    u2[d0 + 0 + 2] = tmp_fifo[2];
    u2[d0 + 0 + 3] = tmp_fifo[3];
    u2[d0 + 0 + 4] = tmp_fifo[4];
    u2[d0 + 0 + 5] = tmp_fifo[5];
    u2[d0 + 0 + 6] = tmp_fifo[6];
    u2[d0 + 0 + 7] = tmp_fifo[7];
    u2[d0 + 0 + 8] = tmp_fifo[8];
    u2[d0 + 0 + 9] = tmp_fifo[9];
    u2[d0 + 0 + 10] = tmp_fifo[10];
    u2[d0 + 0 + 11] = tmp_fifo[11];
    u2[d0 + 0 + 12] = tmp_fifo[12];
    u2[d0 + 0 + 13] = tmp_fifo[13];
    u2[d0 + 0 + 14] = tmp_fifo[14];
    u2[d0 + 0 + 15] = tmp_fifo[15];
  }
}
void read_u2_FT0(
    float u2[400],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_u2_from_off_chip_to_S0) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 400; d0 += 16) {
#pragma HLS pipeline II = 1
    ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_u2_from_off_chip_to_S0.read();
    uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
    u2[d0 + 0 + 0] = *(float *)(&tmp_0);
    uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
    u2[d0 + 0 + 1] = *(float *)(&tmp_1);
    uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
    u2[d0 + 0 + 2] = *(float *)(&tmp_2);
    uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
    u2[d0 + 0 + 3] = *(float *)(&tmp_3);
    uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
    u2[d0 + 0 + 4] = *(float *)(&tmp_4);
    uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
    u2[d0 + 0 + 5] = *(float *)(&tmp_5);
    uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
    u2[d0 + 0 + 6] = *(float *)(&tmp_6);
    uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
    u2[d0 + 0 + 7] = *(float *)(&tmp_7);
    uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
    u2[d0 + 0 + 8] = *(float *)(&tmp_8);
    uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
    u2[d0 + 0 + 9] = *(float *)(&tmp_9);
    uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
    u2[d0 + 0 + 10] = *(float *)(&tmp_10);
    uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
    u2[d0 + 0 + 11] = *(float *)(&tmp_11);
    uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
    u2[d0 + 0 + 12] = *(float *)(&tmp_12);
    uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
    u2[d0 + 0 + 13] = *(float *)(&tmp_13);
    uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
    u2[d0 + 0 + 14] = *(float *)(&tmp_14);
    uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
    u2[d0 + 0 + 15] = *(float *)(&tmp_15);
  }
}
void read_e2_FT0(float e2[400],
                 hls::stream<float16> &fifo_e2_from_off_chip_to_S0) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 400; d0 += 16) {
#pragma HLS pipeline II = 1
    float16 tmp_fifo = fifo_e2_from_off_chip_to_S0.read();
    e2[d0 + 0 + 0] = tmp_fifo[0];
    e2[d0 + 0 + 1] = tmp_fifo[1];
    e2[d0 + 0 + 2] = tmp_fifo[2];
    e2[d0 + 0 + 3] = tmp_fifo[3];
    e2[d0 + 0 + 4] = tmp_fifo[4];
    e2[d0 + 0 + 5] = tmp_fifo[5];
    e2[d0 + 0 + 6] = tmp_fifo[6];
    e2[d0 + 0 + 7] = tmp_fifo[7];
    e2[d0 + 0 + 8] = tmp_fifo[8];
    e2[d0 + 0 + 9] = tmp_fifo[9];
    e2[d0 + 0 + 10] = tmp_fifo[10];
    e2[d0 + 0 + 11] = tmp_fifo[11];
    e2[d0 + 0 + 12] = tmp_fifo[12];
    e2[d0 + 0 + 13] = tmp_fifo[13];
    e2[d0 + 0 + 14] = tmp_fifo[14];
    e2[d0 + 0 + 15] = tmp_fifo[15];
  }
}
void read_e2_FT0(
    float e2[400],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_e2_from_off_chip_to_S0) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 400; d0 += 16) {
#pragma HLS pipeline II = 1
    ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_e2_from_off_chip_to_S0.read();
    uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
    e2[d0 + 0 + 0] = *(float *)(&tmp_0);
    uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
    e2[d0 + 0 + 1] = *(float *)(&tmp_1);
    uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
    e2[d0 + 0 + 2] = *(float *)(&tmp_2);
    uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
    e2[d0 + 0 + 3] = *(float *)(&tmp_3);
    uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
    e2[d0 + 0 + 4] = *(float *)(&tmp_4);
    uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
    e2[d0 + 0 + 5] = *(float *)(&tmp_5);
    uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
    e2[d0 + 0 + 6] = *(float *)(&tmp_6);
    uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
    e2[d0 + 0 + 7] = *(float *)(&tmp_7);
    uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
    e2[d0 + 0 + 8] = *(float *)(&tmp_8);
    uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
    e2[d0 + 0 + 9] = *(float *)(&tmp_9);
    uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
    e2[d0 + 0 + 10] = *(float *)(&tmp_10);
    uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
    e2[d0 + 0 + 11] = *(float *)(&tmp_11);
    uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
    e2[d0 + 0 + 12] = *(float *)(&tmp_12);
    uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
    e2[d0 + 0 + 13] = *(float *)(&tmp_13);
    uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
    e2[d0 + 0 + 14] = *(float *)(&tmp_14);
    uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
    e2[d0 + 0 + 15] = *(float *)(&tmp_15);
  }
}
void read_e1_FT0(float e1[16],
                 hls::stream<float16> &fifo_e1_from_off_chip_to_S0, int j0) {
#pragma HLS inline off
  if (j0 >= 25) {
    return;
  }
  for (int d0 = 0; d0 < 16; d0 += 16) {
#pragma HLS pipeline II = 1
    float16 tmp_fifo = fifo_e1_from_off_chip_to_S0.read();
    e1[d0 + 0 + 0] = tmp_fifo[0];
    e1[d0 + 0 + 1] = tmp_fifo[1];
    e1[d0 + 0 + 2] = tmp_fifo[2];
    e1[d0 + 0 + 3] = tmp_fifo[3];
    e1[d0 + 0 + 4] = tmp_fifo[4];
    e1[d0 + 0 + 5] = tmp_fifo[5];
    e1[d0 + 0 + 6] = tmp_fifo[6];
    e1[d0 + 0 + 7] = tmp_fifo[7];
    e1[d0 + 0 + 8] = tmp_fifo[8];
    e1[d0 + 0 + 9] = tmp_fifo[9];
    e1[d0 + 0 + 10] = tmp_fifo[10];
    e1[d0 + 0 + 11] = tmp_fifo[11];
    e1[d0 + 0 + 12] = tmp_fifo[12];
    e1[d0 + 0 + 13] = tmp_fifo[13];
    e1[d0 + 0 + 14] = tmp_fifo[14];
    e1[d0 + 0 + 15] = tmp_fifo[15];
  }
}
void read_e1_FT0(
    float e1[16],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_e1_from_off_chip_to_S0, int j0) {
#pragma HLS inline off
  if (j0 >= 25) {
    return;
  }
  for (int d0 = 0; d0 < 16; d0 += 16) {
#pragma HLS pipeline II = 1
    ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_e1_from_off_chip_to_S0.read();
    uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
    e1[d0 + 0 + 0] = *(float *)(&tmp_0);
    uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
    e1[d0 + 0 + 1] = *(float *)(&tmp_1);
    uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
    e1[d0 + 0 + 2] = *(float *)(&tmp_2);
    uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
    e1[d0 + 0 + 3] = *(float *)(&tmp_3);
    uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
    e1[d0 + 0 + 4] = *(float *)(&tmp_4);
    uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
    e1[d0 + 0 + 5] = *(float *)(&tmp_5);
    uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
    e1[d0 + 0 + 6] = *(float *)(&tmp_6);
    uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
    e1[d0 + 0 + 7] = *(float *)(&tmp_7);
    uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
    e1[d0 + 0 + 8] = *(float *)(&tmp_8);
    uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
    e1[d0 + 0 + 9] = *(float *)(&tmp_9);
    uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
    e1[d0 + 0 + 10] = *(float *)(&tmp_10);
    uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
    e1[d0 + 0 + 11] = *(float *)(&tmp_11);
    uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
    e1[d0 + 0 + 12] = *(float *)(&tmp_12);
    uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
    e1[d0 + 0 + 13] = *(float *)(&tmp_13);
    uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
    e1[d0 + 0 + 14] = *(float *)(&tmp_14);
    uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
    e1[d0 + 0 + 15] = *(float *)(&tmp_15);
  }
}
void read_A_FT0(float A[40][16],
                hls::stream<float16> &fifo_A_from_off_chip_to_S0, int i0,
                int j0) {
#pragma HLS inline off
  if (j0 >= 25 || i0 >= 10) {
    return;
  }
  for (int d0 = 0; d0 < 40; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_A_from_off_chip_to_S0.read();
      A[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      A[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      A[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      A[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      A[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      A[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      A[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      A[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      A[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      A[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      A[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      A[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      A[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      A[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      A[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      A[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}
void read_A_FT0(float A[40][16],
                hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S0,
                int i0, int j0) {
#pragma HLS inline off
  if (j0 >= 25 || i0 >= 10) {
    return;
  }
  for (int d0 = 0; d0 < 40; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_A_from_off_chip_to_S0.read();
      uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
      A[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
      uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
      A[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
      uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
      A[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
      uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
      A[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
      uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
      A[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
      uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
      A[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
      uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
      A[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
      uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
      A[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
      uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
      A[d0 + 0][d1 + 0 + 8] = *(float *)(&tmp_8);
      uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
      A[d0 + 0][d1 + 0 + 9] = *(float *)(&tmp_9);
      uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
      A[d0 + 0][d1 + 0 + 10] = *(float *)(&tmp_10);
      uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
      A[d0 + 0][d1 + 0 + 11] = *(float *)(&tmp_11);
      uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
      A[d0 + 0][d1 + 0 + 12] = *(float *)(&tmp_12);
      uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
      A[d0 + 0][d1 + 0 + 13] = *(float *)(&tmp_13);
      uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
      A[d0 + 0][d1 + 0 + 14] = *(float *)(&tmp_14);
      uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
      A[d0 + 0][d1 + 0 + 15] = *(float *)(&tmp_15);
    }
  }
}
void read_y_FT1(float y[400],
                hls::stream<float16> &fifo_y_from_off_chip_to_S1) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 400; d0 += 16) {
#pragma HLS pipeline II = 1
    float16 tmp_fifo = fifo_y_from_off_chip_to_S1.read();
    y[d0 + 0 + 0] = tmp_fifo[0];
    y[d0 + 0 + 1] = tmp_fifo[1];
    y[d0 + 0 + 2] = tmp_fifo[2];
    y[d0 + 0 + 3] = tmp_fifo[3];
    y[d0 + 0 + 4] = tmp_fifo[4];
    y[d0 + 0 + 5] = tmp_fifo[5];
    y[d0 + 0 + 6] = tmp_fifo[6];
    y[d0 + 0 + 7] = tmp_fifo[7];
    y[d0 + 0 + 8] = tmp_fifo[8];
    y[d0 + 0 + 9] = tmp_fifo[9];
    y[d0 + 0 + 10] = tmp_fifo[10];
    y[d0 + 0 + 11] = tmp_fifo[11];
    y[d0 + 0 + 12] = tmp_fifo[12];
    y[d0 + 0 + 13] = tmp_fifo[13];
    y[d0 + 0 + 14] = tmp_fifo[14];
    y[d0 + 0 + 15] = tmp_fifo[15];
  }
}
void read_y_FT1(
    float y[400],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_y_from_off_chip_to_S1) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 400; d0 += 16) {
#pragma HLS pipeline II = 1
    ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_y_from_off_chip_to_S1.read();
    uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
    y[d0 + 0 + 0] = *(float *)(&tmp_0);
    uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
    y[d0 + 0 + 1] = *(float *)(&tmp_1);
    uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
    y[d0 + 0 + 2] = *(float *)(&tmp_2);
    uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
    y[d0 + 0 + 3] = *(float *)(&tmp_3);
    uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
    y[d0 + 0 + 4] = *(float *)(&tmp_4);
    uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
    y[d0 + 0 + 5] = *(float *)(&tmp_5);
    uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
    y[d0 + 0 + 6] = *(float *)(&tmp_6);
    uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
    y[d0 + 0 + 7] = *(float *)(&tmp_7);
    uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
    y[d0 + 0 + 8] = *(float *)(&tmp_8);
    uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
    y[d0 + 0 + 9] = *(float *)(&tmp_9);
    uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
    y[d0 + 0 + 10] = *(float *)(&tmp_10);
    uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
    y[d0 + 0 + 11] = *(float *)(&tmp_11);
    uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
    y[d0 + 0 + 12] = *(float *)(&tmp_12);
    uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
    y[d0 + 0 + 13] = *(float *)(&tmp_13);
    uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
    y[d0 + 0 + 14] = *(float *)(&tmp_14);
    uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
    y[d0 + 0 + 15] = *(float *)(&tmp_15);
  }
}
void read_z_FT1(float z[400],
                hls::stream<float16> &fifo_z_from_off_chip_to_S2) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 400; d0 += 16) {
#pragma HLS pipeline II = 1
    float16 tmp_fifo = fifo_z_from_off_chip_to_S2.read();
    z[d0 + 0 + 0] = tmp_fifo[0];
    z[d0 + 0 + 1] = tmp_fifo[1];
    z[d0 + 0 + 2] = tmp_fifo[2];
    z[d0 + 0 + 3] = tmp_fifo[3];
    z[d0 + 0 + 4] = tmp_fifo[4];
    z[d0 + 0 + 5] = tmp_fifo[5];
    z[d0 + 0 + 6] = tmp_fifo[6];
    z[d0 + 0 + 7] = tmp_fifo[7];
    z[d0 + 0 + 8] = tmp_fifo[8];
    z[d0 + 0 + 9] = tmp_fifo[9];
    z[d0 + 0 + 10] = tmp_fifo[10];
    z[d0 + 0 + 11] = tmp_fifo[11];
    z[d0 + 0 + 12] = tmp_fifo[12];
    z[d0 + 0 + 13] = tmp_fifo[13];
    z[d0 + 0 + 14] = tmp_fifo[14];
    z[d0 + 0 + 15] = tmp_fifo[15];
  }
}
void read_z_FT1(
    float z[400],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_z_from_off_chip_to_S2) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 400; d0 += 16) {
#pragma HLS pipeline II = 1
    ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_z_from_off_chip_to_S2.read();
    uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
    z[d0 + 0 + 0] = *(float *)(&tmp_0);
    uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
    z[d0 + 0 + 1] = *(float *)(&tmp_1);
    uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
    z[d0 + 0 + 2] = *(float *)(&tmp_2);
    uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
    z[d0 + 0 + 3] = *(float *)(&tmp_3);
    uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
    z[d0 + 0 + 4] = *(float *)(&tmp_4);
    uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
    z[d0 + 0 + 5] = *(float *)(&tmp_5);
    uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
    z[d0 + 0 + 6] = *(float *)(&tmp_6);
    uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
    z[d0 + 0 + 7] = *(float *)(&tmp_7);
    uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
    z[d0 + 0 + 8] = *(float *)(&tmp_8);
    uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
    z[d0 + 0 + 9] = *(float *)(&tmp_9);
    uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
    z[d0 + 0 + 10] = *(float *)(&tmp_10);
    uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
    z[d0 + 0 + 11] = *(float *)(&tmp_11);
    uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
    z[d0 + 0 + 12] = *(float *)(&tmp_12);
    uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
    z[d0 + 0 + 13] = *(float *)(&tmp_13);
    uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
    z[d0 + 0 + 14] = *(float *)(&tmp_14);
    uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
    z[d0 + 0 + 15] = *(float *)(&tmp_15);
  }
}
void read_x_FT1(float x[16], hls::stream<float16> &fifo_x_from_off_chip_to_S1,
                int i0) {
#pragma HLS inline off
  if (i0 >= 25) {
    return;
  }
  for (int d0 = 0; d0 < 16; d0 += 16) {
#pragma HLS pipeline II = 1
    float16 tmp_fifo = fifo_x_from_off_chip_to_S1.read();
    x[d0 + 0 + 0] = tmp_fifo[0];
    x[d0 + 0 + 1] = tmp_fifo[1];
    x[d0 + 0 + 2] = tmp_fifo[2];
    x[d0 + 0 + 3] = tmp_fifo[3];
    x[d0 + 0 + 4] = tmp_fifo[4];
    x[d0 + 0 + 5] = tmp_fifo[5];
    x[d0 + 0 + 6] = tmp_fifo[6];
    x[d0 + 0 + 7] = tmp_fifo[7];
    x[d0 + 0 + 8] = tmp_fifo[8];
    x[d0 + 0 + 9] = tmp_fifo[9];
    x[d0 + 0 + 10] = tmp_fifo[10];
    x[d0 + 0 + 11] = tmp_fifo[11];
    x[d0 + 0 + 12] = tmp_fifo[12];
    x[d0 + 0 + 13] = tmp_fifo[13];
    x[d0 + 0 + 14] = tmp_fifo[14];
    x[d0 + 0 + 15] = tmp_fifo[15];
  }
}
void read_x_FT1(float x[16],
                hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_x_from_off_chip_to_S1,
                int i0) {
#pragma HLS inline off
  if (i0 >= 25) {
    return;
  }
  for (int d0 = 0; d0 < 16; d0 += 16) {
#pragma HLS pipeline II = 1
    ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_x_from_off_chip_to_S1.read();
    uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
    x[d0 + 0 + 0] = *(float *)(&tmp_0);
    uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
    x[d0 + 0 + 1] = *(float *)(&tmp_1);
    uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
    x[d0 + 0 + 2] = *(float *)(&tmp_2);
    uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
    x[d0 + 0 + 3] = *(float *)(&tmp_3);
    uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
    x[d0 + 0 + 4] = *(float *)(&tmp_4);
    uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
    x[d0 + 0 + 5] = *(float *)(&tmp_5);
    uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
    x[d0 + 0 + 6] = *(float *)(&tmp_6);
    uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
    x[d0 + 0 + 7] = *(float *)(&tmp_7);
    uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
    x[d0 + 0 + 8] = *(float *)(&tmp_8);
    uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
    x[d0 + 0 + 9] = *(float *)(&tmp_9);
    uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
    x[d0 + 0 + 10] = *(float *)(&tmp_10);
    uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
    x[d0 + 0 + 11] = *(float *)(&tmp_11);
    uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
    x[d0 + 0 + 12] = *(float *)(&tmp_12);
    uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
    x[d0 + 0 + 13] = *(float *)(&tmp_13);
    uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
    x[d0 + 0 + 14] = *(float *)(&tmp_14);
    uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
    x[d0 + 0 + 15] = *(float *)(&tmp_15);
  }
}
void read_A_FT1(float A[400][16],
                hls::stream<float16> &fifo_A_from_task0_to_task1, int i0) {
#pragma HLS inline off
  if (i0 >= 25) {
    return;
  }
  for (int d0_0 = 0; d0_0 < 10; d0_0++) {

    for (int d0_1 = 0; d0_1 < 40; d0_1++) {

      for (int d1_1 = 0; d1_1 < 16; d1_1 += 16) {

        int d0 = d0_0 * 40 + d0_1;
        int d1 = d1_1;
        float16 tmp_fifo = fifo_A_from_task0_to_task1.read();
        if (d1 + 0 < 16)
          A[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
        if (d1 + 1 < 16)
          A[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
        if (d1 + 2 < 16)
          A[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
        if (d1 + 3 < 16)
          A[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
        if (d1 + 4 < 16)
          A[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
        if (d1 + 5 < 16)
          A[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
        if (d1 + 6 < 16)
          A[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
        if (d1 + 7 < 16)
          A[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
        if (d1 + 8 < 16)
          A[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
        if (d1 + 9 < 16)
          A[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
        if (d1 + 10 < 16)
          A[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
        if (d1 + 11 < 16)
          A[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
        if (d1 + 12 < 16)
          A[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
        if (d1 + 13 < 16)
          A[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
        if (d1 + 14 < 16)
          A[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
        if (d1 + 15 < 16)
          A[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
      }
    }
  }
}
void read_A_FT1(float A[400][16],
                hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_task0_to_task1,
                int i0) {
#pragma HLS inline off
  if (i0 >= 25) {
    return;
  }
  for (int d0_0 = 0; d0_0 < 10; d0_0++) {

    for (int d0_1 = 0; d0_1 < 40; d0_1++) {

      for (int d1_1 = 0; d1_1 < 16; d1_1 += 16) {

        int d0 = d0_0 * 40 + d0_1;
        int d1 = d1_1;
        ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_A_from_task0_to_task1.read();
        if (d1 + 0 < 16) {
          uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
          A[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
        }
        if (d1 + 1 < 16) {
          uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
          A[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
        }
        if (d1 + 2 < 16) {
          uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
          A[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
        }
        if (d1 + 3 < 16) {
          uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
          A[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
        }
        if (d1 + 4 < 16) {
          uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
          A[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
        }
        if (d1 + 5 < 16) {
          uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
          A[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
        }
        if (d1 + 6 < 16) {
          uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
          A[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
        }
        if (d1 + 7 < 16) {
          uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
          A[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
        }
        if (d1 + 8 < 16) {
          uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
          A[d0 + 0][d1 + 0 + 8] = *(float *)(&tmp_8);
        }
        if (d1 + 9 < 16) {
          uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
          A[d0 + 0][d1 + 0 + 9] = *(float *)(&tmp_9);
        }
        if (d1 + 10 < 16) {
          uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
          A[d0 + 0][d1 + 0 + 10] = *(float *)(&tmp_10);
        }
        if (d1 + 11 < 16) {
          uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
          A[d0 + 0][d1 + 0 + 11] = *(float *)(&tmp_11);
        }
        if (d1 + 12 < 16) {
          uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
          A[d0 + 0][d1 + 0 + 12] = *(float *)(&tmp_12);
        }
        if (d1 + 13 < 16) {
          uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
          A[d0 + 0][d1 + 0 + 13] = *(float *)(&tmp_13);
        }
        if (d1 + 14 < 16) {
          uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
          A[d0 + 0][d1 + 0 + 14] = *(float *)(&tmp_14);
        }
        if (d1 + 15 < 16) {
          uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
          A[d0 + 0][d1 + 0 + 15] = *(float *)(&tmp_15);
        }
      }
    }
  }
}
void read_A_FT2(float A[400][400],
                hls::stream<float16> &fifo_A_from_task0_to_task3) {
#pragma HLS inline off
  for (int d1_0 = 0; d1_0 < 25; d1_0++) {

    for (int d0_0 = 0; d0_0 < 10; d0_0++) {

      for (int d0_1 = 0; d0_1 < 40; d0_1++) {

        for (int d1_1 = 0; d1_1 < 16; d1_1 += 16) {

          int d0 = d0_0 * 40 + d0_1;
          int d1 = d1_0 * 16 + d1_1;
          float16 tmp_fifo = fifo_A_from_task0_to_task3.read();
          if (d1 + 0 < 400)
            A[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
          if (d1 + 1 < 400)
            A[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
          if (d1 + 2 < 400)
            A[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
          if (d1 + 3 < 400)
            A[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
          if (d1 + 4 < 400)
            A[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
          if (d1 + 5 < 400)
            A[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
          if (d1 + 6 < 400)
            A[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
          if (d1 + 7 < 400)
            A[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
          if (d1 + 8 < 400)
            A[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
          if (d1 + 9 < 400)
            A[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
          if (d1 + 10 < 400)
            A[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
          if (d1 + 11 < 400)
            A[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
          if (d1 + 12 < 400)
            A[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
          if (d1 + 13 < 400)
            A[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
          if (d1 + 14 < 400)
            A[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
          if (d1 + 15 < 400)
            A[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
        }
      }
    }
  }
}
void read_A_FT2(
    float A[400][400],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_task0_to_task3) {
#pragma HLS inline off
  for (int d1_0 = 0; d1_0 < 25; d1_0++) {

    for (int d0_0 = 0; d0_0 < 10; d0_0++) {

      for (int d0_1 = 0; d0_1 < 40; d0_1++) {

        for (int d1_1 = 0; d1_1 < 16; d1_1 += 16) {

          int d0 = d0_0 * 40 + d0_1;
          int d1 = d1_0 * 16 + d1_1;
          ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_A_from_task0_to_task3.read();
          if (d1 + 0 < 400) {
            uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
            A[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
          }
          if (d1 + 1 < 400) {
            uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
            A[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
          }
          if (d1 + 2 < 400) {
            uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
            A[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
          }
          if (d1 + 3 < 400) {
            uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
            A[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
          }
          if (d1 + 4 < 400) {
            uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
            A[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
          }
          if (d1 + 5 < 400) {
            uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
            A[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
          }
          if (d1 + 6 < 400) {
            uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
            A[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
          }
          if (d1 + 7 < 400) {
            uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
            A[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
          }
          if (d1 + 8 < 400) {
            uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
            A[d0 + 0][d1 + 0 + 8] = *(float *)(&tmp_8);
          }
          if (d1 + 9 < 400) {
            uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
            A[d0 + 0][d1 + 0 + 9] = *(float *)(&tmp_9);
          }
          if (d1 + 10 < 400) {
            uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
            A[d0 + 0][d1 + 0 + 10] = *(float *)(&tmp_10);
          }
          if (d1 + 11 < 400) {
            uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
            A[d0 + 0][d1 + 0 + 11] = *(float *)(&tmp_11);
          }
          if (d1 + 12 < 400) {
            uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
            A[d0 + 0][d1 + 0 + 12] = *(float *)(&tmp_12);
          }
          if (d1 + 13 < 400) {
            uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
            A[d0 + 0][d1 + 0 + 13] = *(float *)(&tmp_13);
          }
          if (d1 + 14 < 400) {
            uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
            A[d0 + 0][d1 + 0 + 14] = *(float *)(&tmp_14);
          }
          if (d1 + 15 < 400) {
            uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
            A[d0 + 0][d1 + 0 + 15] = *(float *)(&tmp_15);
          }
        }
      }
    }
  }
}
void read_x_FT2(float x[400],
                hls::stream<float16> &fifo_x_from_task2_to_task3) {
#pragma HLS inline off
  for (int d0_0 = 0; d0_0 < 25; d0_0++) {

    for (int d0_1 = 0; d0_1 < 16; d0_1 += 16) {

      int d0 = d0_0 * 16 + d0_1;
      float16 tmp_fifo = fifo_x_from_task2_to_task3.read();
      if (d0 + 0 < 400)
        x[d0 + 0 + 0] = tmp_fifo[0];
      if (d0 + 1 < 400)
        x[d0 + 0 + 1] = tmp_fifo[1];
      if (d0 + 2 < 400)
        x[d0 + 0 + 2] = tmp_fifo[2];
      if (d0 + 3 < 400)
        x[d0 + 0 + 3] = tmp_fifo[3];
      if (d0 + 4 < 400)
        x[d0 + 0 + 4] = tmp_fifo[4];
      if (d0 + 5 < 400)
        x[d0 + 0 + 5] = tmp_fifo[5];
      if (d0 + 6 < 400)
        x[d0 + 0 + 6] = tmp_fifo[6];
      if (d0 + 7 < 400)
        x[d0 + 0 + 7] = tmp_fifo[7];
      if (d0 + 8 < 400)
        x[d0 + 0 + 8] = tmp_fifo[8];
      if (d0 + 9 < 400)
        x[d0 + 0 + 9] = tmp_fifo[9];
      if (d0 + 10 < 400)
        x[d0 + 0 + 10] = tmp_fifo[10];
      if (d0 + 11 < 400)
        x[d0 + 0 + 11] = tmp_fifo[11];
      if (d0 + 12 < 400)
        x[d0 + 0 + 12] = tmp_fifo[12];
      if (d0 + 13 < 400)
        x[d0 + 0 + 13] = tmp_fifo[13];
      if (d0 + 14 < 400)
        x[d0 + 0 + 14] = tmp_fifo[14];
      if (d0 + 15 < 400)
        x[d0 + 0 + 15] = tmp_fifo[15];
    }
  }
}
void read_x_FT2(
    float x[400],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_x_from_task2_to_task3) {
#pragma HLS inline off
  for (int d0_0 = 0; d0_0 < 25; d0_0++) {

    for (int d0_1 = 0; d0_1 < 16; d0_1 += 16) {

      int d0 = d0_0 * 16 + d0_1;
      ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_x_from_task2_to_task3.read();
      if (d0 + 0 < 400) {
        uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
        x[d0 + 0 + 0] = *(float *)(&tmp_0);
      }
      if (d0 + 1 < 400) {
        uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
        x[d0 + 0 + 1] = *(float *)(&tmp_1);
      }
      if (d0 + 2 < 400) {
        uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
        x[d0 + 0 + 2] = *(float *)(&tmp_2);
      }
      if (d0 + 3 < 400) {
        uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
        x[d0 + 0 + 3] = *(float *)(&tmp_3);
      }
      if (d0 + 4 < 400) {
        uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
        x[d0 + 0 + 4] = *(float *)(&tmp_4);
      }
      if (d0 + 5 < 400) {
        uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
        x[d0 + 0 + 5] = *(float *)(&tmp_5);
      }
      if (d0 + 6 < 400) {
        uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
        x[d0 + 0 + 6] = *(float *)(&tmp_6);
      }
      if (d0 + 7 < 400) {
        uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
        x[d0 + 0 + 7] = *(float *)(&tmp_7);
      }
      if (d0 + 8 < 400) {
        uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
        x[d0 + 0 + 8] = *(float *)(&tmp_8);
      }
      if (d0 + 9 < 400) {
        uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
        x[d0 + 0 + 9] = *(float *)(&tmp_9);
      }
      if (d0 + 10 < 400) {
        uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
        x[d0 + 0 + 10] = *(float *)(&tmp_10);
      }
      if (d0 + 11 < 400) {
        uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
        x[d0 + 0 + 11] = *(float *)(&tmp_11);
      }
      if (d0 + 12 < 400) {
        uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
        x[d0 + 0 + 12] = *(float *)(&tmp_12);
      }
      if (d0 + 13 < 400) {
        uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
        x[d0 + 0 + 13] = *(float *)(&tmp_13);
      }
      if (d0 + 14 < 400) {
        uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
        x[d0 + 0 + 14] = *(float *)(&tmp_14);
      }
      if (d0 + 15 < 400) {
        uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
        x[d0 + 0 + 15] = *(float *)(&tmp_15);
      }
    }
  }
}
void read_w_FT2(float w[40], hls::stream<float8> &fifo_w_from_off_chip_to_S3,
                int i0) {
#pragma HLS inline off
  if (i0 >= 10) {
    return;
  }
  for (int d0 = 0; d0 < 40; d0 += 8) {
#pragma HLS pipeline II = 1
    float8 tmp_fifo = fifo_w_from_off_chip_to_S3.read();
    w[d0 + 0 + 0] = tmp_fifo[0];
    w[d0 + 0 + 1] = tmp_fifo[1];
    w[d0 + 0 + 2] = tmp_fifo[2];
    w[d0 + 0 + 3] = tmp_fifo[3];
    w[d0 + 0 + 4] = tmp_fifo[4];
    w[d0 + 0 + 5] = tmp_fifo[5];
    w[d0 + 0 + 6] = tmp_fifo[6];
    w[d0 + 0 + 7] = tmp_fifo[7];
  }
}
void read_w_FT2(float w[40],
                hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_w_from_off_chip_to_S3,
                int i0) {
#pragma HLS inline off
  if (i0 >= 10) {
    return;
  }
  for (int d0 = 0; d0 < 40; d0 += 8) {
#pragma HLS pipeline II = 1
    ap_axiu<256, 0, 0, 0> tmp_fifo = fifo_w_from_off_chip_to_S3.read();
    uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
    w[d0 + 0 + 0] = *(float *)(&tmp_0);
    uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
    w[d0 + 0 + 1] = *(float *)(&tmp_1);
    uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
    w[d0 + 0 + 2] = *(float *)(&tmp_2);
    uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
    w[d0 + 0 + 3] = *(float *)(&tmp_3);
    uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
    w[d0 + 0 + 4] = *(float *)(&tmp_4);
    uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
    w[d0 + 0 + 5] = *(float *)(&tmp_5);
    uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
    w[d0 + 0 + 6] = *(float *)(&tmp_6);
    uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
    w[d0 + 0 + 7] = *(float *)(&tmp_7);
  }
}
void write_A_FT0(float A[40][16],
                 hls::stream<float16> &fifo_A_from_task0_to_task1, int i0,
                 int j0) {
#pragma HLS inline off
  if (i0 < 0 || j0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 40; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo;
      tmp_fifo[0] = A[d0 + 0][d1 + 0 + 0];
      tmp_fifo[1] = A[d0 + 0][d1 + 0 + 1];
      tmp_fifo[2] = A[d0 + 0][d1 + 0 + 2];
      tmp_fifo[3] = A[d0 + 0][d1 + 0 + 3];
      tmp_fifo[4] = A[d0 + 0][d1 + 0 + 4];
      tmp_fifo[5] = A[d0 + 0][d1 + 0 + 5];
      tmp_fifo[6] = A[d0 + 0][d1 + 0 + 6];
      tmp_fifo[7] = A[d0 + 0][d1 + 0 + 7];
      tmp_fifo[8] = A[d0 + 0][d1 + 0 + 8];
      tmp_fifo[9] = A[d0 + 0][d1 + 0 + 9];
      tmp_fifo[10] = A[d0 + 0][d1 + 0 + 10];
      tmp_fifo[11] = A[d0 + 0][d1 + 0 + 11];
      tmp_fifo[12] = A[d0 + 0][d1 + 0 + 12];
      tmp_fifo[13] = A[d0 + 0][d1 + 0 + 13];
      tmp_fifo[14] = A[d0 + 0][d1 + 0 + 14];
      tmp_fifo[15] = A[d0 + 0][d1 + 0 + 15];
      fifo_A_from_task0_to_task1.write(tmp_fifo);
    }
  }
}
void write_A_FT0(float A[40][16],
                 hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_task0_to_task1,
                 int i0, int j0) {
#pragma HLS inline off
  if (i0 < 0 || j0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 40; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      ap_axiu<512, 0, 0, 0> tmp_fifo;
      float tmp_0 = A[d0 + 0][d1 + 0 + 0];
      tmp_fifo.data.range(31, 0) = *(uint32_t *)(&tmp_0);
      float tmp_1 = A[d0 + 0][d1 + 0 + 1];
      tmp_fifo.data.range(63, 32) = *(uint32_t *)(&tmp_1);
      float tmp_2 = A[d0 + 0][d1 + 0 + 2];
      tmp_fifo.data.range(95, 64) = *(uint32_t *)(&tmp_2);
      float tmp_3 = A[d0 + 0][d1 + 0 + 3];
      tmp_fifo.data.range(127, 96) = *(uint32_t *)(&tmp_3);
      float tmp_4 = A[d0 + 0][d1 + 0 + 4];
      tmp_fifo.data.range(159, 128) = *(uint32_t *)(&tmp_4);
      float tmp_5 = A[d0 + 0][d1 + 0 + 5];
      tmp_fifo.data.range(191, 160) = *(uint32_t *)(&tmp_5);
      float tmp_6 = A[d0 + 0][d1 + 0 + 6];
      tmp_fifo.data.range(223, 192) = *(uint32_t *)(&tmp_6);
      float tmp_7 = A[d0 + 0][d1 + 0 + 7];
      tmp_fifo.data.range(255, 224) = *(uint32_t *)(&tmp_7);
      float tmp_8 = A[d0 + 0][d1 + 0 + 8];
      tmp_fifo.data.range(287, 256) = *(uint32_t *)(&tmp_8);
      float tmp_9 = A[d0 + 0][d1 + 0 + 9];
      tmp_fifo.data.range(319, 288) = *(uint32_t *)(&tmp_9);
      float tmp_10 = A[d0 + 0][d1 + 0 + 10];
      tmp_fifo.data.range(351, 320) = *(uint32_t *)(&tmp_10);
      float tmp_11 = A[d0 + 0][d1 + 0 + 11];
      tmp_fifo.data.range(383, 352) = *(uint32_t *)(&tmp_11);
      float tmp_12 = A[d0 + 0][d1 + 0 + 12];
      tmp_fifo.data.range(415, 384) = *(uint32_t *)(&tmp_12);
      float tmp_13 = A[d0 + 0][d1 + 0 + 13];
      tmp_fifo.data.range(447, 416) = *(uint32_t *)(&tmp_13);
      float tmp_14 = A[d0 + 0][d1 + 0 + 14];
      tmp_fifo.data.range(479, 448) = *(uint32_t *)(&tmp_14);
      float tmp_15 = A[d0 + 0][d1 + 0 + 15];
      tmp_fifo.data.range(511, 480) = *(uint32_t *)(&tmp_15);
      fifo_A_from_task0_to_task1.write(tmp_fifo);
    }
  }
}
void write_x_FT1(float x[16], hls::stream<float16> &fifo_x_from_task2_to_task3,
                 int i0) {
#pragma HLS inline off
  if (i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 16; d0 += 16) {
#pragma HLS pipeline II = 1
    float16 tmp_fifo;
    tmp_fifo[0] = x[d0 + 0 + 0];
    tmp_fifo[1] = x[d0 + 0 + 1];
    tmp_fifo[2] = x[d0 + 0 + 2];
    tmp_fifo[3] = x[d0 + 0 + 3];
    tmp_fifo[4] = x[d0 + 0 + 4];
    tmp_fifo[5] = x[d0 + 0 + 5];
    tmp_fifo[6] = x[d0 + 0 + 6];
    tmp_fifo[7] = x[d0 + 0 + 7];
    tmp_fifo[8] = x[d0 + 0 + 8];
    tmp_fifo[9] = x[d0 + 0 + 9];
    tmp_fifo[10] = x[d0 + 0 + 10];
    tmp_fifo[11] = x[d0 + 0 + 11];
    tmp_fifo[12] = x[d0 + 0 + 12];
    tmp_fifo[13] = x[d0 + 0 + 13];
    tmp_fifo[14] = x[d0 + 0 + 14];
    tmp_fifo[15] = x[d0 + 0 + 15];
    fifo_x_from_task2_to_task3.write(tmp_fifo);
  }
}
void write_x_FT1(float x[16],
                 hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_x_from_task2_to_task3,
                 int i0) {
#pragma HLS inline off
  if (i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 16; d0 += 16) {
#pragma HLS pipeline II = 1
    ap_axiu<512, 0, 0, 0> tmp_fifo;
    float tmp_0 = x[d0 + 0 + 0];
    tmp_fifo.data.range(31, 0) = *(uint32_t *)(&tmp_0);
    float tmp_1 = x[d0 + 0 + 1];
    tmp_fifo.data.range(63, 32) = *(uint32_t *)(&tmp_1);
    float tmp_2 = x[d0 + 0 + 2];
    tmp_fifo.data.range(95, 64) = *(uint32_t *)(&tmp_2);
    float tmp_3 = x[d0 + 0 + 3];
    tmp_fifo.data.range(127, 96) = *(uint32_t *)(&tmp_3);
    float tmp_4 = x[d0 + 0 + 4];
    tmp_fifo.data.range(159, 128) = *(uint32_t *)(&tmp_4);
    float tmp_5 = x[d0 + 0 + 5];
    tmp_fifo.data.range(191, 160) = *(uint32_t *)(&tmp_5);
    float tmp_6 = x[d0 + 0 + 6];
    tmp_fifo.data.range(223, 192) = *(uint32_t *)(&tmp_6);
    float tmp_7 = x[d0 + 0 + 7];
    tmp_fifo.data.range(255, 224) = *(uint32_t *)(&tmp_7);
    float tmp_8 = x[d0 + 0 + 8];
    tmp_fifo.data.range(287, 256) = *(uint32_t *)(&tmp_8);
    float tmp_9 = x[d0 + 0 + 9];
    tmp_fifo.data.range(319, 288) = *(uint32_t *)(&tmp_9);
    float tmp_10 = x[d0 + 0 + 10];
    tmp_fifo.data.range(351, 320) = *(uint32_t *)(&tmp_10);
    float tmp_11 = x[d0 + 0 + 11];
    tmp_fifo.data.range(383, 352) = *(uint32_t *)(&tmp_11);
    float tmp_12 = x[d0 + 0 + 12];
    tmp_fifo.data.range(415, 384) = *(uint32_t *)(&tmp_12);
    float tmp_13 = x[d0 + 0 + 13];
    tmp_fifo.data.range(447, 416) = *(uint32_t *)(&tmp_13);
    float tmp_14 = x[d0 + 0 + 14];
    tmp_fifo.data.range(479, 448) = *(uint32_t *)(&tmp_14);
    float tmp_15 = x[d0 + 0 + 15];
    tmp_fifo.data.range(511, 480) = *(uint32_t *)(&tmp_15);
    fifo_x_from_task2_to_task3.write(tmp_fifo);
  }
}
void write_w_FT2(float w[40], hls::stream<float8> &fifo_w_to_off_chip, int i0) {
#pragma HLS inline off
  if (i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 40; d0 += 8) {
#pragma HLS pipeline II = 1
    float8 tmp_fifo;
    tmp_fifo[0] = w[d0 + 0 + 0];
    tmp_fifo[1] = w[d0 + 0 + 1];
    tmp_fifo[2] = w[d0 + 0 + 2];
    tmp_fifo[3] = w[d0 + 0 + 3];
    tmp_fifo[4] = w[d0 + 0 + 4];
    tmp_fifo[5] = w[d0 + 0 + 5];
    tmp_fifo[6] = w[d0 + 0 + 6];
    tmp_fifo[7] = w[d0 + 0 + 7];
    fifo_w_to_off_chip.write(tmp_fifo);
  }
}
void write_w_FT2(float w[40],
                 hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_w_to_off_chip,
                 int i0) {
#pragma HLS inline off
  if (i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 40; d0 += 8) {
#pragma HLS pipeline II = 1
    ap_axiu<256, 0, 0, 0> tmp_fifo;
    float tmp_0 = w[d0 + 0 + 0];
    tmp_fifo.data.range(31, 0) = *(uint32_t *)(&tmp_0);
    float tmp_1 = w[d0 + 0 + 1];
    tmp_fifo.data.range(63, 32) = *(uint32_t *)(&tmp_1);
    float tmp_2 = w[d0 + 0 + 2];
    tmp_fifo.data.range(95, 64) = *(uint32_t *)(&tmp_2);
    float tmp_3 = w[d0 + 0 + 3];
    tmp_fifo.data.range(127, 96) = *(uint32_t *)(&tmp_3);
    float tmp_4 = w[d0 + 0 + 4];
    tmp_fifo.data.range(159, 128) = *(uint32_t *)(&tmp_4);
    float tmp_5 = w[d0 + 0 + 5];
    tmp_fifo.data.range(191, 160) = *(uint32_t *)(&tmp_5);
    float tmp_6 = w[d0 + 0 + 6];
    tmp_fifo.data.range(223, 192) = *(uint32_t *)(&tmp_6);
    float tmp_7 = w[d0 + 0 + 7];
    tmp_fifo.data.range(255, 224) = *(uint32_t *)(&tmp_7);
    fifo_w_to_off_chip.write(tmp_fifo);
  }
}

void kernel_nlp_slr0(float alpha, float beta, float16 vA_for_task0[10000],
                     float16 vu1_for_task0[25], float16 ve1_for_task0[25],
                     float16 vu2_for_task0[25], float16 ve2_for_task0[25],
                     float16 vx_for_task1[25], float16 vy_for_task1[25],
                     float16 vz_for_task2[25], float8 vw_for_task3[50]) {
#pragma HLS INTERFACE m_axi port = alpha offset = slave bundle = kernel_alpha
#pragma HLS INTERFACE m_axi port = beta offset = slave bundle = kernel_beta
#pragma HLS INTERFACE m_axi port = vA_for_task0 offset = slave bundle =        \
    kernel_vA_for_task0
#pragma HLS INTERFACE m_axi port = vu1_for_task0 offset = slave bundle =       \
    kernel_vu1_for_task0
#pragma HLS INTERFACE m_axi port = ve1_for_task0 offset = slave bundle =       \
    kernel_ve1_for_task0
#pragma HLS INTERFACE m_axi port = vu2_for_task0 offset = slave bundle =       \
    kernel_vu2_for_task0
#pragma HLS INTERFACE m_axi port = ve2_for_task0 offset = slave bundle =       \
    kernel_ve2_for_task0
#pragma HLS INTERFACE m_axi port = vx_for_task1 offset = slave bundle =        \
    kernel_vx_for_task1
#pragma HLS INTERFACE m_axi port = vy_for_task1 offset = slave bundle =        \
    kernel_vy_for_task1
#pragma HLS INTERFACE m_axi port = vz_for_task2 offset = slave bundle =        \
    kernel_vz_for_task2
#pragma HLS INTERFACE m_axi port = vw_for_task3 offset = slave bundle =        \
    kernel_vw_for_task3
#pragma HLS INTERFACE s_axilite port = alpha bundle = control
#pragma HLS INTERFACE s_axilite port = beta bundle = control
#pragma HLS INTERFACE s_axilite port = vA_for_task0 bundle = control
#pragma HLS INTERFACE s_axilite port = vu1_for_task0 bundle = control
#pragma HLS INTERFACE s_axilite port = ve1_for_task0 bundle = control
#pragma HLS INTERFACE s_axilite port = vu2_for_task0 bundle = control
#pragma HLS INTERFACE s_axilite port = ve2_for_task0 bundle = control
#pragma HLS INTERFACE s_axilite port = vx_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vy_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vz_for_task2 bundle = control
#pragma HLS INTERFACE s_axilite port = vw_for_task3 bundle = control
#pragma HLS DATA_PACK VARIABLE = alpha
#pragma HLS DATA_PACK VARIABLE = beta
#pragma HLS DATA_PACK VARIABLE = vA_for_task0
#pragma HLS DATA_PACK VARIABLE = vu1_for_task0
#pragma HLS DATA_PACK VARIABLE = ve1_for_task0
#pragma HLS DATA_PACK VARIABLE = vu2_for_task0
#pragma HLS DATA_PACK VARIABLE = ve2_for_task0
#pragma HLS DATA_PACK VARIABLE = vx_for_task1
#pragma HLS DATA_PACK VARIABLE = vy_for_task1
#pragma HLS DATA_PACK VARIABLE = vz_for_task2
#pragma HLS DATA_PACK VARIABLE = vw_for_task3
#pragma HLS INTERFACE s_axilite port = return bundle = control
#pragma HLS dataflow
  hls::stream<float16> fifo_A_from_task0_to_task3;
#pragma HLS stream variable = fifo_A_from_task0_to_task3 depth = 1024
  hls::stream<float16> fifo_x_from_task2_to_task3;
#pragma HLS stream variable = fifo_x_from_task2_to_task3 depth = 1024
  hls::stream<float16> fifo_A_from_task0_to_task1;
#pragma HLS stream variable = fifo_A_from_task0_to_task1 depth = 1024
  hls::stream<float8> fifo_w_to_off_chip;
#pragma HLS stream variable = fifo_w_to_off_chip depth = 1024
  hls::stream<float16> fifo_A_to_off_chip;
#pragma HLS stream variable = fifo_A_to_off_chip depth = 1024
  hls::stream<float16> fifo_x_to_off_chip;
#pragma HLS stream variable = fifo_x_to_off_chip depth = 1024
  hls::stream<float16> fifo_z_from_off_chip_to_S2;
#pragma HLS stream variable = fifo_z_from_off_chip_to_S2 depth = 1024
  hls::stream<float16> fifo_u1_from_off_chip_to_S0;
#pragma HLS stream variable = fifo_u1_from_off_chip_to_S0 depth = 1024
  hls::stream<float16> fifo_u2_from_off_chip_to_S0;
#pragma HLS stream variable = fifo_u2_from_off_chip_to_S0 depth = 1024
  hls::stream<float16> fifo_e1_from_off_chip_to_S0;
#pragma HLS stream variable = fifo_e1_from_off_chip_to_S0 depth = 1024
  hls::stream<float16> fifo_A_from_off_chip_to_S0;
#pragma HLS stream variable = fifo_A_from_off_chip_to_S0 depth = 1024
  hls::stream<float16> fifo_e2_from_off_chip_to_S0;
#pragma HLS stream variable = fifo_e2_from_off_chip_to_S0 depth = 1024
  hls::stream<float8> fifo_w_from_off_chip_to_S3;
#pragma HLS stream variable = fifo_w_from_off_chip_to_S3 depth = 1024
  hls::stream<float16> fifo_x_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_x_from_off_chip_to_S1 depth = 1024
  hls::stream<float16> fifo_y_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_y_from_off_chip_to_S1 depth = 1024
  load_vy_for_task1(fifo_y_from_off_chip_to_S1, vy_for_task1);
  load_vx_for_task1(fifo_x_from_off_chip_to_S1, vx_for_task1);
  load_vw_for_task3(fifo_w_from_off_chip_to_S3, vw_for_task3);
  load_ve2_for_task0(fifo_e2_from_off_chip_to_S0, ve2_for_task0);
  load_vA_for_task0(fifo_A_from_off_chip_to_S0, vA_for_task0);
  load_ve1_for_task0(fifo_e1_from_off_chip_to_S0, ve1_for_task0);
  load_vu2_for_task0(fifo_u2_from_off_chip_to_S0, vu2_for_task0);
  load_vu1_for_task0(fifo_u1_from_off_chip_to_S0, vu1_for_task0);
  load_vz_for_task2(fifo_z_from_off_chip_to_S2, vz_for_task2);
  FT0_level0(alpha, beta, fifo_A_from_task0_to_task1,
             fifo_A_from_task0_to_task3, fifo_e2_from_off_chip_to_S0,
             fifo_A_from_off_chip_to_S0, fifo_e1_from_off_chip_to_S0,
             fifo_u2_from_off_chip_to_S0, fifo_u1_from_off_chip_to_S0,
             fifo_A_to_off_chip);
  FT1_level0(alpha, beta, fifo_A_from_task0_to_task1,
             fifo_y_from_off_chip_to_S1, fifo_x_from_off_chip_to_S1,
             fifo_x_from_task2_to_task3, fifo_z_from_off_chip_to_S2,
             fifo_x_to_off_chip);
  FT2_level0(alpha, beta, fifo_A_from_task0_to_task3,
             fifo_x_from_task2_to_task3, fifo_w_from_off_chip_to_S3,
             fifo_w_to_off_chip);
  store_vx_for_task1(fifo_x_to_off_chip, vx_for_task1);
  store_vA_for_task0(fifo_A_to_off_chip, vA_for_task0);
  store_vw_for_task3(fifo_w_to_off_chip, vw_for_task3);
}
