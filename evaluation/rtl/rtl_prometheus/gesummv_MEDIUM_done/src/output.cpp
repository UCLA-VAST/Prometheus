#include "output_2.h"

#define READ_RANGE(Arr, data_size, l)                                          \
  (Arr.data.range((data_size) * (l) + (data_size) - 1, (data_size) * (l)))

/****************************************************
 This file was automatically generated by Prometheus
****************************************************/
void load_vB_for_task3(hls::stream<float16> &fifo_B_from_off_chip_to_S3,
                       float16 vB[4000]) {
#pragma HLS inline off
  for (int i = 0; i < 4000; i++) {
#pragma HLS pipeline II = 1
    fifo_B_from_off_chip_to_S3.write(vB[i]);
  }
}

void load_vr_for_task3(hls::stream<float16> &fifo_r_from_off_chip_to_S3,
                       float16 vr[16]) {
#pragma HLS inline off
  for (int i = 0; i < 16; i++) {
#pragma HLS pipeline II = 1
    fifo_r_from_off_chip_to_S3.write(vr[i]);
  }
}

void load_vw_for_task1(hls::stream<float16> &fifo_w_from_off_chip_to_S1,
                       float16 vw[16]) {
#pragma HLS inline off
  for (int i = 0; i < 16; i++) {
#pragma HLS pipeline II = 1
    fifo_w_from_off_chip_to_S1.write(vw[i]);
  }
}

void load_vA_for_task1(hls::stream<float16> &fifo_A_from_off_chip_to_S1,
                       float16 vA[4000]) {
#pragma HLS inline off
  for (int i = 0; i < 4000; i++) {
#pragma HLS pipeline II = 1
    fifo_A_from_off_chip_to_S1.write(vA[i]);
  }
}

void store_vtmp_for_task1(hls::stream<float1> &fifo_tmp_to_off_chip,
                          float1 vtmp[250]) {
#pragma HLS inline off
  for (int i = 0; i < 250; i++) {
#pragma HLS pipeline II = 1
    vtmp[i] = fifo_tmp_to_off_chip.read();
  }
}

void store_vy_for_task3(hls::stream<float1> &fifo_y_to_off_chip,
                        float1 vy[250]) {
#pragma HLS inline off
  for (int i = 0; i < 250; i++) {
#pragma HLS pipeline II = 1
    vy[i] = fifo_y_to_off_chip.read();
  }
}

void compute_FT0_level0(float alpha, float beta,
                        hls::stream<float1> &fifo_tmp_from_task1_to_task4,
                        hls::stream<float16> &fifo_w_from_off_chip_to_S1,
                        hls::stream<float16> &fifo_A_from_off_chip_to_S1,
                        hls::stream<float1> &fifo_tmp_to_off_chip, int i0,
                        float tmp_0[5], float tmp_1[5], float A_0[5][255],
                        float A_1[5][255], float w[255]) {
#pragma HLS inline off
#pragma HLS dataflow
  read_A_FT0(A_1, fifo_A_from_off_chip_to_S1, i0 + 1);
  task0_intra(alpha, beta, tmp_0, A_0, w, i0);
  task1_intra(alpha, beta, tmp_0, A_0, w, i0);
  write_tmp_FT0(tmp_1, fifo_tmp_from_task1_to_task4, i0 - 1);
  write_tmp_FT0(tmp_1, fifo_tmp_to_off_chip, i0 - 1);
}

void FT0_level0(float alpha, float beta,
                hls::stream<float1> &fifo_tmp_from_task1_to_task4,
                hls::stream<float16> &fifo_w_from_off_chip_to_S1,
                hls::stream<float16> &fifo_A_from_off_chip_to_S1,
                hls::stream<float1> &fifo_tmp_to_off_chip) {
#pragma HLS inline off
  float tmp_0[5];
  // FT0
#pragma HLS array_partition variable = tmp_0 cyclic factor = 5 dim = 1
  float tmp_1[5];
  // FT0
#pragma HLS array_partition variable = tmp_1 cyclic factor = 5 dim = 1
  float A_0[5][255];
  // FT0
#pragma HLS array_partition variable = A_0 cyclic factor = 5 dim = 1
#pragma HLS array_partition variable = A_0 cyclic factor = 85 dim = 2
  float A_1[5][255];
  // FT0
#pragma HLS array_partition variable = A_1 cyclic factor = 5 dim = 1
#pragma HLS array_partition variable = A_1 cyclic factor = 85 dim = 2
  float w[255];
#pragma HLS array_partition variable = w cyclic factor = 85 dim = 1
  read_w_FT0(w, fifo_w_from_off_chip_to_S1);
  read_A_FT0(A_0, fifo_A_from_off_chip_to_S1, 0);
  for (int i0 = 0; i0 < 50; i0++) {

    if (i0 % 2 == 0) {
      //     read_A_FT0(A_1, fifo_A_from_off_chip_to_S1, i0+1);
      //     task0_intra(alpha, beta, tmp_0, A_0, w, i0);
      //     task1_intra(alpha, beta, tmp_0, A_0, w, i0);
      //     write_tmp_FT0(tmp_1, fifo_tmp_from_task1_to_task4, i0-1);
      //     write_tmp_FT0(tmp_1, fifo_tmp_to_off_chip, i0-1);
      compute_FT0_level0(alpha, beta, fifo_tmp_from_task1_to_task4,
                         fifo_w_from_off_chip_to_S1, fifo_A_from_off_chip_to_S1,
                         fifo_tmp_to_off_chip, i0, tmp_0, tmp_1, A_0, A_1, w);
    } else if (i0 % 2 == 1) {
      //     read_A_FT0(A_0, fifo_A_from_off_chip_to_S1, i0+1);
      //     task0_intra(alpha, beta, tmp_1, A_1, w, i0);
      //     task1_intra(alpha, beta, tmp_1, A_1, w, i0);
      //     write_tmp_FT0(tmp_0, fifo_tmp_from_task1_to_task4, i0-1);
      //     write_tmp_FT0(tmp_0, fifo_tmp_to_off_chip, i0-1);
      compute_FT0_level0(alpha, beta, fifo_tmp_from_task1_to_task4,
                         fifo_w_from_off_chip_to_S1, fifo_A_from_off_chip_to_S1,
                         fifo_tmp_to_off_chip, i0, tmp_1, tmp_0, A_1, A_0, w);
    }
  }
  write_tmp_FT0(tmp_1, fifo_tmp_from_task1_to_task4, 49);
  write_tmp_FT0(tmp_1, fifo_tmp_to_off_chip, 49);
}
void compute_FT1_level0(float alpha, float beta,
                        hls::stream<float1> &fifo_tmp_from_task1_to_task4,
                        hls::stream<float16> &fifo_B_from_off_chip_to_S3,
                        hls::stream<float16> &fifo_r_from_off_chip_to_S3,
                        hls::stream<float1> &fifo_y_to_off_chip, int i0,
                        float y_0[5], float y_1[5], float B_0[5][256],
                        float B_1[5][256], float tmp_0[5], float tmp_1[5],
                        float r[256]) {
#pragma HLS inline off
#pragma HLS dataflow
  read_B_FT1(B_1, fifo_B_from_off_chip_to_S3, i0 + 1);
  read_tmp_FT1(tmp_1, fifo_tmp_from_task1_to_task4, i0 + 1);
  task2_intra(alpha, beta, y_0, B_0, tmp_0, r, i0);
  task3_intra(alpha, beta, y_0, B_0, tmp_0, r, i0);
  task4_intra(alpha, beta, y_0, B_0, tmp_0, r, i0);
  write_y_FT1(y_1, fifo_y_to_off_chip, i0 - 1);
}

void FT1_level0(float alpha, float beta,
                hls::stream<float1> &fifo_tmp_from_task1_to_task4,
                hls::stream<float16> &fifo_B_from_off_chip_to_S3,
                hls::stream<float16> &fifo_r_from_off_chip_to_S3,
                hls::stream<float1> &fifo_y_to_off_chip) {
#pragma HLS inline off
  float y_0[5];
  // FT1
#pragma HLS array_partition variable = y_0 cyclic factor = 5 dim = 1
  float y_1[5];
  // FT1
#pragma HLS array_partition variable = y_1 cyclic factor = 5 dim = 1
  float B_0[5][256];
  // FT1
#pragma HLS array_partition variable = B_0 cyclic factor = 5 dim = 1
#pragma HLS array_partition variable = B_0 cyclic factor = 64 dim = 2
  float B_1[5][256];
  // FT1
#pragma HLS array_partition variable = B_1 cyclic factor = 5 dim = 1
#pragma HLS array_partition variable = B_1 cyclic factor = 64 dim = 2
  float tmp_0[5];
  // FT1
#pragma HLS array_partition variable = tmp_0 cyclic factor = 5 dim = 1
  float tmp_1[5];
  // FT1
#pragma HLS array_partition variable = tmp_1 cyclic factor = 5 dim = 1
  float r[256];
#pragma HLS array_partition variable = r cyclic factor = 64 dim = 1
  read_r_FT1(r, fifo_r_from_off_chip_to_S3);
  read_B_FT1(B_0, fifo_B_from_off_chip_to_S3, 0);
  read_tmp_FT1(tmp_0, fifo_tmp_from_task1_to_task4, 0);
  for (int i0 = 0; i0 < 50; i0++) {

    if (i0 % 2 == 0) {
      //     read_B_FT1(B_1, fifo_B_from_off_chip_to_S3, i0+1);
      //     read_tmp_FT1(tmp_1, fifo_tmp_from_task1_to_task4, i0+1);
      //     task2_intra(alpha, beta, y_0, B_0, tmp_0, r, i0);
      //     task3_intra(alpha, beta, y_0, B_0, tmp_0, r, i0);
      //     task4_intra(alpha, beta, y_0, B_0, tmp_0, r, i0);
      //     write_y_FT1(y_1, fifo_y_to_off_chip, i0-1);
      compute_FT1_level0(alpha, beta, fifo_tmp_from_task1_to_task4,
                         fifo_B_from_off_chip_to_S3, fifo_r_from_off_chip_to_S3,
                         fifo_y_to_off_chip, i0, y_0, y_1, B_0, B_1, tmp_0,
                         tmp_1, r);
    } else if (i0 % 2 == 1) {
      //     read_B_FT1(B_0, fifo_B_from_off_chip_to_S3, i0+1);
      //     read_tmp_FT1(tmp_0, fifo_tmp_from_task1_to_task4, i0+1);
      //     task2_intra(alpha, beta, y_1, B_1, tmp_1, r, i0);
      //     task3_intra(alpha, beta, y_1, B_1, tmp_1, r, i0);
      //     task4_intra(alpha, beta, y_1, B_1, tmp_1, r, i0);
      //     write_y_FT1(y_0, fifo_y_to_off_chip, i0-1);
      compute_FT1_level0(alpha, beta, fifo_tmp_from_task1_to_task4,
                         fifo_B_from_off_chip_to_S3, fifo_r_from_off_chip_to_S3,
                         fifo_y_to_off_chip, i0, y_1, y_0, B_1, B_0, tmp_1,
                         tmp_0, r);
    }
  }
  write_y_FT1(y_1, fifo_y_to_off_chip, 49);
}
void task0_intra(float alpha, float beta, float tmp[5], float A[5][255],
                 float w[255], int i0) {
#pragma HLS inline off
  int i;
  for (int i1 = 0; i1 < 5; i1++) {
#pragma HLS unroll
    i = i0 * 5 + i1;
    tmp[i1] = 0.0;
  }
}

void task1_intra(float alpha, float beta, float tmp[5], float A[5][255],
                 float w[255], int i0) {
#pragma HLS inline off
  int i;
  int j;
  for (int j0 = 0; j0 < 3; j0++) {
#pragma HLS pipeline II = 2
    for (int i1 = 0; i1 < 5; i1++) {
#pragma HLS unroll
      for (int j1 = 0; j1 < 85; j1++) {
#pragma HLS unroll
        i = i0 * 5 + i1;
        j = j0 * 85 + j1;
        tmp[i1] = tmp[i1] + A[i1][j] * w[j];
      }
    }
  }
}

void task2_intra(float alpha, float beta, float y[5], float B[5][256],
                 float tmp[5], float r[256], int i0) {
#pragma HLS inline off
  int i;
  for (int i1 = 0; i1 < 5; i1++) {
#pragma HLS unroll
    i = i0 * 5 + i1;
    y[i1] = 0.0;
  }
}

void task3_intra(float alpha, float beta, float y[5], float B[5][256],
                 float tmp[5], float r[256], int i0) {
#pragma HLS inline off
  int i;
  int j;
  for (int j0 = 0; j0 < 4; j0++) {
#pragma HLS pipeline II = 2
    for (int i1 = 0; i1 < 5; i1++) {
#pragma HLS unroll
      for (int j1 = 0; j1 < 64; j1++) {
#pragma HLS unroll
        i = i0 * 5 + i1;
        j = j0 * 64 + j1;
        y[i1] = y[i1] + B[i1][j] * r[j];
      }
    }
  }
}

void task4_intra(float alpha, float beta, float y[5], float B[5][256],
                 float tmp[5], float r[256], int i0) {
#pragma HLS inline off
  int i;
  for (int i1 = 0; i1 < 5; i1++) {
#pragma HLS unroll
    i = i0 * 5 + i1;
    y[i1] = y[i1] * beta + alpha * tmp[i1];
  }
}

void read_w_FT0(float w[255],
                hls::stream<float16> &fifo_w_from_off_chip_to_S1) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 255; d0 += 16) {
#pragma HLS pipeline II = 1
    float16 tmp_fifo = fifo_w_from_off_chip_to_S1.read();
    w[d0 + 0 + 0] = tmp_fifo[0];
    w[d0 + 0 + 1] = tmp_fifo[1];
    w[d0 + 0 + 2] = tmp_fifo[2];
    w[d0 + 0 + 3] = tmp_fifo[3];
    w[d0 + 0 + 4] = tmp_fifo[4];
    w[d0 + 0 + 5] = tmp_fifo[5];
    w[d0 + 0 + 6] = tmp_fifo[6];
    w[d0 + 0 + 7] = tmp_fifo[7];
    w[d0 + 0 + 8] = tmp_fifo[8];
    w[d0 + 0 + 9] = tmp_fifo[9];
    w[d0 + 0 + 10] = tmp_fifo[10];
    w[d0 + 0 + 11] = tmp_fifo[11];
    w[d0 + 0 + 12] = tmp_fifo[12];
    w[d0 + 0 + 13] = tmp_fifo[13];
    w[d0 + 0 + 14] = tmp_fifo[14];
    w[d0 + 0 + 15] = tmp_fifo[15];
  }
}

void read_A_FT0(float A[5][255],
                hls::stream<float16> &fifo_A_from_off_chip_to_S1, int i0) {
#pragma HLS inline off
  if (i0 >= 50) {
    return;
  }
  for (int d0 = 0; d0 < 5; d0++) {
    for (int d1 = 0; d1 < 255; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_A_from_off_chip_to_S1.read();
      A[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      A[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      A[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      A[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      A[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      A[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      A[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      A[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      A[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      A[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      A[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      A[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      A[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      A[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      A[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      A[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}

void read_r_FT1(float r[256],
                hls::stream<float16> &fifo_r_from_off_chip_to_S3) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 256; d0 += 16) {
#pragma HLS pipeline II = 1
    float16 tmp_fifo = fifo_r_from_off_chip_to_S3.read();
    r[d0 + 0 + 0] = tmp_fifo[0];
    r[d0 + 0 + 1] = tmp_fifo[1];
    r[d0 + 0 + 2] = tmp_fifo[2];
    r[d0 + 0 + 3] = tmp_fifo[3];
    r[d0 + 0 + 4] = tmp_fifo[4];
    r[d0 + 0 + 5] = tmp_fifo[5];
    r[d0 + 0 + 6] = tmp_fifo[6];
    r[d0 + 0 + 7] = tmp_fifo[7];
    r[d0 + 0 + 8] = tmp_fifo[8];
    r[d0 + 0 + 9] = tmp_fifo[9];
    r[d0 + 0 + 10] = tmp_fifo[10];
    r[d0 + 0 + 11] = tmp_fifo[11];
    r[d0 + 0 + 12] = tmp_fifo[12];
    r[d0 + 0 + 13] = tmp_fifo[13];
    r[d0 + 0 + 14] = tmp_fifo[14];
    r[d0 + 0 + 15] = tmp_fifo[15];
  }
}

void read_B_FT1(float B[5][256],
                hls::stream<float16> &fifo_B_from_off_chip_to_S3, int i0) {
#pragma HLS inline off
  if (i0 >= 50) {
    return;
  }
  for (int d0 = 0; d0 < 5; d0++) {
    for (int d1 = 0; d1 < 256; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_B_from_off_chip_to_S3.read();
      B[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      B[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      B[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      B[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      B[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      B[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      B[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      B[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      B[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      B[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      B[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      B[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      B[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      B[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      B[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      B[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}

void read_tmp_FT1(float tmp[5],
                  hls::stream<float1> &fifo_tmp_from_task1_to_task4, int i0) {
#pragma HLS inline off
  if (i0 >= 50) {
    return;
  }
  for (int d0_1 = 0; d0_1 < 5; d0_1 += 1) {

    int d0 = d0_1;
    float1 tmp_fifo = fifo_tmp_from_task1_to_task4.read();
    if (d0 + 0 < 5)
      tmp[d0 + 0 + 0] = tmp_fifo[0];
  }
}

void write_tmp_FT0(float tmp[5],
                   hls::stream<float1> &fifo_tmp_from_task1_to_task4, int i0) {
#pragma HLS inline off
  if (i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 5; d0 += 1) {
#pragma HLS pipeline II = 1
    float1 tmp_fifo;
    tmp_fifo[0] = tmp[d0 + 0 + 0];
    fifo_tmp_from_task1_to_task4.write(tmp_fifo);
  }
}

void write_y_FT1(float y[5], hls::stream<float1> &fifo_y_to_off_chip, int i0) {
#pragma HLS inline off
  if (i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 5; d0 += 1) {
#pragma HLS pipeline II = 1
    float1 tmp_fifo;
    tmp_fifo[0] = y[d0 + 0 + 0];
    fifo_y_to_off_chip.write(tmp_fifo);
  }
}

// extern "C"{
void kernel_nlp(float alpha, float beta, float1 vtmp_for_task1[250],
                float16 vA_for_task1[4000], float16 vw_for_task1[16],
                float1 vy_for_task3[250], float16 vB_for_task3[4000],
                float16 vr_for_task3[16]) {

#pragma HLS INTERFACE m_axi port = alpha offset = slave bundle = kernel_alpha
#pragma HLS INTERFACE m_axi port = beta offset = slave bundle = kernel_beta
#pragma HLS INTERFACE m_axi port = vtmp_for_task1 offset = slave bundle =      \
    kernel_vtmp_for_task1
#pragma HLS INTERFACE m_axi port = vA_for_task1 offset = slave bundle =        \
    kernel_vA_for_task1
#pragma HLS INTERFACE m_axi port = vw_for_task1 offset = slave bundle =        \
    kernel_vw_for_task1
#pragma HLS INTERFACE m_axi port = vy_for_task3 offset = slave bundle =        \
    kernel_vy_for_task3
#pragma HLS INTERFACE m_axi port = vB_for_task3 offset = slave bundle =        \
    kernel_vB_for_task3
#pragma HLS INTERFACE m_axi port = vr_for_task3 offset = slave bundle =        \
    kernel_vr_for_task3
#pragma HLS INTERFACE s_axilite port = alpha bundle = control
#pragma HLS INTERFACE s_axilite port = beta bundle = control
#pragma HLS INTERFACE s_axilite port = vtmp_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vA_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vw_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vy_for_task3 bundle = control
#pragma HLS INTERFACE s_axilite port = vB_for_task3 bundle = control
#pragma HLS INTERFACE s_axilite port = vr_for_task3 bundle = control
#pragma HLS DATA_PACK VARIABLE = alpha
#pragma HLS DATA_PACK VARIABLE = beta
#pragma HLS DATA_PACK VARIABLE = vtmp_for_task1
#pragma HLS DATA_PACK VARIABLE = vA_for_task1
#pragma HLS DATA_PACK VARIABLE = vw_for_task1
#pragma HLS DATA_PACK VARIABLE = vy_for_task3
#pragma HLS DATA_PACK VARIABLE = vB_for_task3
#pragma HLS DATA_PACK VARIABLE = vr_for_task3
#pragma HLS INTERFACE s_axilite port = return bundle = control

#pragma HLS dataflow

  hls::stream<float1> fifo_tmp_from_task1_to_task4;
#pragma HLS stream variable = fifo_tmp_from_task1_to_task4 depth = 512
  hls::stream<float16> fifo_B_from_off_chip_to_S3;
#pragma HLS stream variable = fifo_B_from_off_chip_to_S3 depth = 512
  hls::stream<float16> fifo_r_from_off_chip_to_S3;
#pragma HLS stream variable = fifo_r_from_off_chip_to_S3 depth = 512
  hls::stream<float16> fifo_w_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_w_from_off_chip_to_S1 depth = 512
  hls::stream<float16> fifo_A_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_A_from_off_chip_to_S1 depth = 512
  hls::stream<float1> fifo_tmp_to_off_chip;
#pragma HLS stream variable = fifo_tmp_to_off_chip depth = 512
  hls::stream<float1> fifo_y_to_off_chip;
#pragma HLS stream variable = fifo_y_to_off_chip depth = 512

  load_vB_for_task3(fifo_B_from_off_chip_to_S3, vB_for_task3);
  load_vr_for_task3(fifo_r_from_off_chip_to_S3, vr_for_task3);
  load_vw_for_task1(fifo_w_from_off_chip_to_S1, vw_for_task1);
  load_vA_for_task1(fifo_A_from_off_chip_to_S1, vA_for_task1);

  FT0_level0(alpha, beta, fifo_tmp_from_task1_to_task4,
             fifo_w_from_off_chip_to_S1, fifo_A_from_off_chip_to_S1,
             fifo_tmp_to_off_chip);
  FT1_level0(alpha, beta, fifo_tmp_from_task1_to_task4,
             fifo_B_from_off_chip_to_S3, fifo_r_from_off_chip_to_S3,
             fifo_y_to_off_chip);

  store_vtmp_for_task1(fifo_tmp_to_off_chip, vtmp_for_task1);
  store_vy_for_task3(fifo_y_to_off_chip, vy_for_task3);
}
//}
