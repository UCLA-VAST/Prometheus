#include "output.h"

#define READ_RANGE(Arr, data_size, l)                                          \
  (Arr.data.range((data_size) * (l) + (data_size) - 1, (data_size) * (l)))

/****************************************************
 This file was automatically generated by Prometheus
****************************************************/
void load_vA2_for_task2(hls::stream<float4> &fifo_A2_from_off_chip_to_S2,
                        float4 vA2[50]) {
#pragma HLS inline off
  for (int i = 0; i < 50; i++) {
#pragma HLS pipeline II = 1
    fifo_A2_from_off_chip_to_S2.write(vA2[i]);
  }
}
void load_vA2_for_task2(
    hls::stream<ap_axiu<128, 0, 0, 0>> &fifo_A2_from_off_chip_to_S2,
    float4 vA2[50]) {
#pragma HLS inline off
  for (int i = 0; i < 50; i++) {
#pragma HLS pipeline II = 1
    float4 vA2_off = vA2[i];
    ap_axiu<128, 0, 0, 0> vA2_on;
    vA2_on.data.range(31, 0) = *(uint32_t *)(&vA2_off[0]);
    vA2_on.data.range(63, 32) = *(uint32_t *)(&vA2_off[1]);
    vA2_on.data.range(95, 64) = *(uint32_t *)(&vA2_off[2]);
    vA2_on.data.range(127, 96) = *(uint32_t *)(&vA2_off[3]);
    fifo_A2_from_off_chip_to_S2.write(vA2_on);
  }
}
void load_vB2_for_task2(hls::stream<float16> &fifo_B2_from_off_chip_to_S2,
                        float16 vB2[3000]) {
#pragma HLS inline off
  for (int i = 0; i < 3000; i++) {
#pragma HLS pipeline II = 1
    fifo_B2_from_off_chip_to_S2.write(vB2[i]);
  }
}
void load_vB2_for_task2(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_B2_from_off_chip_to_S2,
    float16 vB2[3000]) {
#pragma HLS inline off
  for (int i = 0; i < 3000; i++) {
#pragma HLS pipeline II = 1
    float16 vB2_off = vB2[i];
    ap_axiu<512, 0, 0, 0> vB2_on;
    vB2_on.data.range(31, 0) = *(uint32_t *)(&vB2_off[0]);
    vB2_on.data.range(63, 32) = *(uint32_t *)(&vB2_off[1]);
    vB2_on.data.range(95, 64) = *(uint32_t *)(&vB2_off[2]);
    vB2_on.data.range(127, 96) = *(uint32_t *)(&vB2_off[3]);
    vB2_on.data.range(159, 128) = *(uint32_t *)(&vB2_off[4]);
    vB2_on.data.range(191, 160) = *(uint32_t *)(&vB2_off[5]);
    vB2_on.data.range(223, 192) = *(uint32_t *)(&vB2_off[6]);
    vB2_on.data.range(255, 224) = *(uint32_t *)(&vB2_off[7]);
    vB2_on.data.range(287, 256) = *(uint32_t *)(&vB2_off[8]);
    vB2_on.data.range(319, 288) = *(uint32_t *)(&vB2_off[9]);
    vB2_on.data.range(351, 320) = *(uint32_t *)(&vB2_off[10]);
    vB2_on.data.range(383, 352) = *(uint32_t *)(&vB2_off[11]);
    vB2_on.data.range(415, 384) = *(uint32_t *)(&vB2_off[12]);
    vB2_on.data.range(447, 416) = *(uint32_t *)(&vB2_off[13]);
    vB2_on.data.range(479, 448) = *(uint32_t *)(&vB2_off[14]);
    vB2_on.data.range(511, 480) = *(uint32_t *)(&vB2_off[15]);
    fifo_B2_from_off_chip_to_S2.write(vB2_on);
  }
}
void load_vC_for_task2(hls::stream<float16> &fifo_C_from_off_chip_to_S2,
                       float16 vC[3000]) {
#pragma HLS inline off
  for (int i = 0; i < 3000; i++) {
#pragma HLS pipeline II = 1
    fifo_C_from_off_chip_to_S2.write(vC[i]);
  }
}
void load_vC_for_task2(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_C_from_off_chip_to_S2,
    float16 vC[3000]) {
#pragma HLS inline off
  for (int i = 0; i < 3000; i++) {
#pragma HLS pipeline II = 1
    float16 vC_off = vC[i];
    ap_axiu<512, 0, 0, 0> vC_on;
    vC_on.data.range(31, 0) = *(uint32_t *)(&vC_off[0]);
    vC_on.data.range(63, 32) = *(uint32_t *)(&vC_off[1]);
    vC_on.data.range(95, 64) = *(uint32_t *)(&vC_off[2]);
    vC_on.data.range(127, 96) = *(uint32_t *)(&vC_off[3]);
    vC_on.data.range(159, 128) = *(uint32_t *)(&vC_off[4]);
    vC_on.data.range(191, 160) = *(uint32_t *)(&vC_off[5]);
    vC_on.data.range(223, 192) = *(uint32_t *)(&vC_off[6]);
    vC_on.data.range(255, 224) = *(uint32_t *)(&vC_off[7]);
    vC_on.data.range(287, 256) = *(uint32_t *)(&vC_off[8]);
    vC_on.data.range(319, 288) = *(uint32_t *)(&vC_off[9]);
    vC_on.data.range(351, 320) = *(uint32_t *)(&vC_off[10]);
    vC_on.data.range(383, 352) = *(uint32_t *)(&vC_off[11]);
    vC_on.data.range(415, 384) = *(uint32_t *)(&vC_off[12]);
    vC_on.data.range(447, 416) = *(uint32_t *)(&vC_off[13]);
    vC_on.data.range(479, 448) = *(uint32_t *)(&vC_off[14]);
    vC_on.data.range(511, 480) = *(uint32_t *)(&vC_off[15]);
    fifo_C_from_off_chip_to_S2.write(vC_on);
  }
}
void load_vA3_for_task3(hls::stream<float16> &fifo_A3_from_off_chip_to_S3,
                        float16 vA3[2600]) {
#pragma HLS inline off
  for (int i = 0; i < 2600; i++) {
#pragma HLS pipeline II = 1
    fifo_A3_from_off_chip_to_S3.write(vA3[i]);
  }
}
void load_vA3_for_task3(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A3_from_off_chip_to_S3,
    float16 vA3[2600]) {
#pragma HLS inline off
  for (int i = 0; i < 2600; i++) {
#pragma HLS pipeline II = 1
    float16 vA3_off = vA3[i];
    ap_axiu<512, 0, 0, 0> vA3_on;
    vA3_on.data.range(31, 0) = *(uint32_t *)(&vA3_off[0]);
    vA3_on.data.range(63, 32) = *(uint32_t *)(&vA3_off[1]);
    vA3_on.data.range(95, 64) = *(uint32_t *)(&vA3_off[2]);
    vA3_on.data.range(127, 96) = *(uint32_t *)(&vA3_off[3]);
    vA3_on.data.range(159, 128) = *(uint32_t *)(&vA3_off[4]);
    vA3_on.data.range(191, 160) = *(uint32_t *)(&vA3_off[5]);
    vA3_on.data.range(223, 192) = *(uint32_t *)(&vA3_off[6]);
    vA3_on.data.range(255, 224) = *(uint32_t *)(&vA3_off[7]);
    vA3_on.data.range(287, 256) = *(uint32_t *)(&vA3_off[8]);
    vA3_on.data.range(319, 288) = *(uint32_t *)(&vA3_off[9]);
    vA3_on.data.range(351, 320) = *(uint32_t *)(&vA3_off[10]);
    vA3_on.data.range(383, 352) = *(uint32_t *)(&vA3_off[11]);
    vA3_on.data.range(415, 384) = *(uint32_t *)(&vA3_off[12]);
    vA3_on.data.range(447, 416) = *(uint32_t *)(&vA3_off[13]);
    vA3_on.data.range(479, 448) = *(uint32_t *)(&vA3_off[14]);
    vA3_on.data.range(511, 480) = *(uint32_t *)(&vA3_off[15]);
    fifo_A3_from_off_chip_to_S3.write(vA3_on);
  }
}
void load_vB3_for_task3(hls::stream<float16> &fifo_B3_from_off_chip_to_S3,
                        float16 vB3[3000]) {
#pragma HLS inline off
  for (int i = 0; i < 3000; i++) {
#pragma HLS pipeline II = 1
    fifo_B3_from_off_chip_to_S3.write(vB3[i]);
  }
}
void load_vB3_for_task3(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_B3_from_off_chip_to_S3,
    float16 vB3[3000]) {
#pragma HLS inline off
  for (int i = 0; i < 3000; i++) {
#pragma HLS pipeline II = 1
    float16 vB3_off = vB3[i];
    ap_axiu<512, 0, 0, 0> vB3_on;
    vB3_on.data.range(31, 0) = *(uint32_t *)(&vB3_off[0]);
    vB3_on.data.range(63, 32) = *(uint32_t *)(&vB3_off[1]);
    vB3_on.data.range(95, 64) = *(uint32_t *)(&vB3_off[2]);
    vB3_on.data.range(127, 96) = *(uint32_t *)(&vB3_off[3]);
    vB3_on.data.range(159, 128) = *(uint32_t *)(&vB3_off[4]);
    vB3_on.data.range(191, 160) = *(uint32_t *)(&vB3_off[5]);
    vB3_on.data.range(223, 192) = *(uint32_t *)(&vB3_off[6]);
    vB3_on.data.range(255, 224) = *(uint32_t *)(&vB3_off[7]);
    vB3_on.data.range(287, 256) = *(uint32_t *)(&vB3_off[8]);
    vB3_on.data.range(319, 288) = *(uint32_t *)(&vB3_off[9]);
    vB3_on.data.range(351, 320) = *(uint32_t *)(&vB3_off[10]);
    vB3_on.data.range(383, 352) = *(uint32_t *)(&vB3_off[11]);
    vB3_on.data.range(415, 384) = *(uint32_t *)(&vB3_off[12]);
    vB3_on.data.range(447, 416) = *(uint32_t *)(&vB3_off[13]);
    vB3_on.data.range(479, 448) = *(uint32_t *)(&vB3_off[14]);
    vB3_on.data.range(511, 480) = *(uint32_t *)(&vB3_off[15]);
    fifo_B3_from_off_chip_to_S3.write(vB3_on);
  }
}
void load_vA1_for_task1(hls::stream<float16> &fifo_A1_from_off_chip_to_S1,
                        float16 vA1[2600]) {
#pragma HLS inline off
  for (int i = 0; i < 2600; i++) {
#pragma HLS pipeline II = 1
    fifo_A1_from_off_chip_to_S1.write(vA1[i]);
  }
}
void load_vA1_for_task1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A1_from_off_chip_to_S1,
    float16 vA1[2600]) {
#pragma HLS inline off
  for (int i = 0; i < 2600; i++) {
#pragma HLS pipeline II = 1
    float16 vA1_off = vA1[i];
    ap_axiu<512, 0, 0, 0> vA1_on;
    vA1_on.data.range(31, 0) = *(uint32_t *)(&vA1_off[0]);
    vA1_on.data.range(63, 32) = *(uint32_t *)(&vA1_off[1]);
    vA1_on.data.range(95, 64) = *(uint32_t *)(&vA1_off[2]);
    vA1_on.data.range(127, 96) = *(uint32_t *)(&vA1_off[3]);
    vA1_on.data.range(159, 128) = *(uint32_t *)(&vA1_off[4]);
    vA1_on.data.range(191, 160) = *(uint32_t *)(&vA1_off[5]);
    vA1_on.data.range(223, 192) = *(uint32_t *)(&vA1_off[6]);
    vA1_on.data.range(255, 224) = *(uint32_t *)(&vA1_off[7]);
    vA1_on.data.range(287, 256) = *(uint32_t *)(&vA1_off[8]);
    vA1_on.data.range(319, 288) = *(uint32_t *)(&vA1_off[9]);
    vA1_on.data.range(351, 320) = *(uint32_t *)(&vA1_off[10]);
    vA1_on.data.range(383, 352) = *(uint32_t *)(&vA1_off[11]);
    vA1_on.data.range(415, 384) = *(uint32_t *)(&vA1_off[12]);
    vA1_on.data.range(447, 416) = *(uint32_t *)(&vA1_off[13]);
    vA1_on.data.range(479, 448) = *(uint32_t *)(&vA1_off[14]);
    vA1_on.data.range(511, 480) = *(uint32_t *)(&vA1_off[15]);
    fifo_A1_from_off_chip_to_S1.write(vA1_on);
  }
}
void load_vB1_for_task1(hls::stream<float16> &fifo_B1_from_off_chip_to_S1,
                        float16 vB1[3120]) {
#pragma HLS inline off
  for (int i = 0; i < 3120; i++) {
#pragma HLS pipeline II = 1
    fifo_B1_from_off_chip_to_S1.write(vB1[i]);
  }
}
void load_vB1_for_task1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_B1_from_off_chip_to_S1,
    float16 vB1[3120]) {
#pragma HLS inline off
  for (int i = 0; i < 3120; i++) {
#pragma HLS pipeline II = 1
    float16 vB1_off = vB1[i];
    ap_axiu<512, 0, 0, 0> vB1_on;
    vB1_on.data.range(31, 0) = *(uint32_t *)(&vB1_off[0]);
    vB1_on.data.range(63, 32) = *(uint32_t *)(&vB1_off[1]);
    vB1_on.data.range(95, 64) = *(uint32_t *)(&vB1_off[2]);
    vB1_on.data.range(127, 96) = *(uint32_t *)(&vB1_off[3]);
    vB1_on.data.range(159, 128) = *(uint32_t *)(&vB1_off[4]);
    vB1_on.data.range(191, 160) = *(uint32_t *)(&vB1_off[5]);
    vB1_on.data.range(223, 192) = *(uint32_t *)(&vB1_off[6]);
    vB1_on.data.range(255, 224) = *(uint32_t *)(&vB1_off[7]);
    vB1_on.data.range(287, 256) = *(uint32_t *)(&vB1_off[8]);
    vB1_on.data.range(319, 288) = *(uint32_t *)(&vB1_off[9]);
    vB1_on.data.range(351, 320) = *(uint32_t *)(&vB1_off[10]);
    vB1_on.data.range(383, 352) = *(uint32_t *)(&vB1_off[11]);
    vB1_on.data.range(415, 384) = *(uint32_t *)(&vB1_off[12]);
    vB1_on.data.range(447, 416) = *(uint32_t *)(&vB1_off[13]);
    vB1_on.data.range(479, 448) = *(uint32_t *)(&vB1_off[14]);
    vB1_on.data.range(511, 480) = *(uint32_t *)(&vB1_off[15]);
    fifo_B1_from_off_chip_to_S1.write(vB1_on);
  }
}
void store_vC_for_task2(hls::stream<float16> &fifo_C_to_off_chip,
                        float16 vC[3000]) {
#pragma HLS inline off
  for (int i = 0; i < 3000; i++) {
#pragma HLS pipeline II = 1
    vC[i] = fifo_C_to_off_chip.read();
  }
}
void store_vC_for_task2(hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_C_to_off_chip,
                        float16 vC[3000]) {
#pragma HLS inline off
  for (int i = 0; i < 3000; i++) {
#pragma HLS pipeline II = 1
    float16 vC_off;
    ap_axiu<512, 0, 0, 0> vC_on = fifo_C_to_off_chip.read();
    uint32_t vC_tmp[16];
    vC_tmp[0] = vC_on.data.range(31, 0);
    vC_off[0] = *(float *)(&vC_tmp[0]);
    vC_tmp[1] = vC_on.data.range(63, 32);
    vC_off[1] = *(float *)(&vC_tmp[1]);
    vC_tmp[2] = vC_on.data.range(95, 64);
    vC_off[2] = *(float *)(&vC_tmp[2]);
    vC_tmp[3] = vC_on.data.range(127, 96);
    vC_off[3] = *(float *)(&vC_tmp[3]);
    vC_tmp[4] = vC_on.data.range(159, 128);
    vC_off[4] = *(float *)(&vC_tmp[4]);
    vC_tmp[5] = vC_on.data.range(191, 160);
    vC_off[5] = *(float *)(&vC_tmp[5]);
    vC_tmp[6] = vC_on.data.range(223, 192);
    vC_off[6] = *(float *)(&vC_tmp[6]);
    vC_tmp[7] = vC_on.data.range(255, 224);
    vC_off[7] = *(float *)(&vC_tmp[7]);
    vC_tmp[8] = vC_on.data.range(287, 256);
    vC_off[8] = *(float *)(&vC_tmp[8]);
    vC_tmp[9] = vC_on.data.range(319, 288);
    vC_off[9] = *(float *)(&vC_tmp[9]);
    vC_tmp[10] = vC_on.data.range(351, 320);
    vC_off[10] = *(float *)(&vC_tmp[10]);
    vC_tmp[11] = vC_on.data.range(383, 352);
    vC_off[11] = *(float *)(&vC_tmp[11]);
    vC_tmp[12] = vC_on.data.range(415, 384);
    vC_off[12] = *(float *)(&vC_tmp[12]);
    vC_tmp[13] = vC_on.data.range(447, 416);
    vC_off[13] = *(float *)(&vC_tmp[13]);
    vC_tmp[14] = vC_on.data.range(479, 448);
    vC_off[14] = *(float *)(&vC_tmp[14]);
    vC_tmp[15] = vC_on.data.range(511, 480);
    vC_off[15] = *(float *)(&vC_tmp[15]);
    vC[i] = vC_off;
  }
}
void store_vtmp_for_task1(hls::stream<float16> &fifo_tmp_to_off_chip,
                          float16 vtmp[3000]) {
#pragma HLS inline off
  for (int i = 0; i < 3000; i++) {
#pragma HLS pipeline II = 1
    vtmp[i] = fifo_tmp_to_off_chip.read();
  }
}
void store_vtmp_for_task1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_tmp_to_off_chip,
    float16 vtmp[3000]) {
#pragma HLS inline off
  for (int i = 0; i < 3000; i++) {
#pragma HLS pipeline II = 1
    float16 vtmp_off;
    ap_axiu<512, 0, 0, 0> vtmp_on = fifo_tmp_to_off_chip.read();
    uint32_t vtmp_tmp[16];
    vtmp_tmp[0] = vtmp_on.data.range(31, 0);
    vtmp_off[0] = *(float *)(&vtmp_tmp[0]);
    vtmp_tmp[1] = vtmp_on.data.range(63, 32);
    vtmp_off[1] = *(float *)(&vtmp_tmp[1]);
    vtmp_tmp[2] = vtmp_on.data.range(95, 64);
    vtmp_off[2] = *(float *)(&vtmp_tmp[2]);
    vtmp_tmp[3] = vtmp_on.data.range(127, 96);
    vtmp_off[3] = *(float *)(&vtmp_tmp[3]);
    vtmp_tmp[4] = vtmp_on.data.range(159, 128);
    vtmp_off[4] = *(float *)(&vtmp_tmp[4]);
    vtmp_tmp[5] = vtmp_on.data.range(191, 160);
    vtmp_off[5] = *(float *)(&vtmp_tmp[5]);
    vtmp_tmp[6] = vtmp_on.data.range(223, 192);
    vtmp_off[6] = *(float *)(&vtmp_tmp[6]);
    vtmp_tmp[7] = vtmp_on.data.range(255, 224);
    vtmp_off[7] = *(float *)(&vtmp_tmp[7]);
    vtmp_tmp[8] = vtmp_on.data.range(287, 256);
    vtmp_off[8] = *(float *)(&vtmp_tmp[8]);
    vtmp_tmp[9] = vtmp_on.data.range(319, 288);
    vtmp_off[9] = *(float *)(&vtmp_tmp[9]);
    vtmp_tmp[10] = vtmp_on.data.range(351, 320);
    vtmp_off[10] = *(float *)(&vtmp_tmp[10]);
    vtmp_tmp[11] = vtmp_on.data.range(383, 352);
    vtmp_off[11] = *(float *)(&vtmp_tmp[11]);
    vtmp_tmp[12] = vtmp_on.data.range(415, 384);
    vtmp_off[12] = *(float *)(&vtmp_tmp[12]);
    vtmp_tmp[13] = vtmp_on.data.range(447, 416);
    vtmp_off[13] = *(float *)(&vtmp_tmp[13]);
    vtmp_tmp[14] = vtmp_on.data.range(479, 448);
    vtmp_off[14] = *(float *)(&vtmp_tmp[14]);
    vtmp_tmp[15] = vtmp_on.data.range(511, 480);
    vtmp_off[15] = *(float *)(&vtmp_tmp[15]);
    vtmp[i] = vtmp_off;
  }
}
void FT0_level0(float alpha, float beta,
                hls::stream<float16> &fifo_tmp_from_task1_to_task2,
                hls::stream<float16> &fifo_A1_from_off_chip_to_S1,
                hls::stream<float16> &fifo_B1_from_off_chip_to_S1,
                hls::stream<float16> &fifo_tmp_to_off_chip) {
#pragma HLS inline off
  float B1_0[208][16];
  // FT0
#pragma HLS array_partition variable = B1_0 cyclic factor = 4 dim = 1
#pragma HLS array_partition variable = B1_0 cyclic factor = 16 dim = 2
  float B1_1[208][16];
  // FT0
#pragma HLS array_partition variable = B1_1 cyclic factor = 4 dim = 1
#pragma HLS array_partition variable = B1_1 cyclic factor = 16 dim = 2
  float A1[200][208];
#pragma HLS array_partition variable = A1 cyclic factor = 20 dim = 1
#pragma HLS array_partition variable = A1 cyclic factor = 4 dim = 2
  read_A1_FT0(A1, fifo_A1_from_off_chip_to_S1);
  read_B1_FT0(B1_0, fifo_B1_from_off_chip_to_S1, 0);
  for (int j0 = 0; j0 < 15; j0++) {
    if (j0 % 2 == 0) {
      read_B1_FT0(B1_1, fifo_B1_from_off_chip_to_S1, j0 + 1);
      FT0_level1(alpha, beta, fifo_tmp_from_task1_to_task2,
                 fifo_A1_from_off_chip_to_S1, fifo_B1_from_off_chip_to_S1,
                 fifo_tmp_to_off_chip, B1_0, A1, j0);
    } else if (j0 % 2 == 1) {
      read_B1_FT0(B1_0, fifo_B1_from_off_chip_to_S1, j0 + 1);
      FT0_level1(alpha, beta, fifo_tmp_from_task1_to_task2,
                 fifo_A1_from_off_chip_to_S1, fifo_B1_from_off_chip_to_S1,
                 fifo_tmp_to_off_chip, B1_1, A1, j0);
    }
  }
}
void compute_FT0_level1(float alpha, float beta,
                        hls::stream<float16> &fifo_tmp_from_task1_to_task2,
                        hls::stream<float16> &fifo_A1_from_off_chip_to_S1,
                        hls::stream<float16> &fifo_B1_from_off_chip_to_S1,
                        hls::stream<float16> &fifo_tmp_to_off_chip,
                        float B1[208][16], float A1[200][208], int j0, int i0,
                        float tmp_0[20][16], float tmp_1[20][16]) {
#pragma HLS inline off
#pragma HLS dataflow
  task0_intra(alpha, beta, B1, A1, j0, tmp_0, i0);
  task1_intra(alpha, beta, B1, A1, j0, tmp_0, i0);
  write_tmp_FT0(tmp_1, fifo_tmp_from_task1_to_task2, i0 - 1, j0);
  write_tmp_FT0(tmp_1, fifo_tmp_to_off_chip, i0 - 1, j0);
}
void FT0_level1(float alpha, float beta,
                hls::stream<float16> &fifo_tmp_from_task1_to_task2,
                hls::stream<float16> &fifo_A1_from_off_chip_to_S1,
                hls::stream<float16> &fifo_B1_from_off_chip_to_S1,
                hls::stream<float16> &fifo_tmp_to_off_chip, float B1[208][16],
                float A1[200][208], int j0) {
#pragma HLS inline off
  float tmp_0[20][16];
  // FT0
#pragma HLS array_partition variable = tmp_0 cyclic factor = 20 dim = 1
#pragma HLS array_partition variable = tmp_0 cyclic factor = 16 dim = 2
  float tmp_1[20][16];
  // FT0
#pragma HLS array_partition variable = tmp_1 cyclic factor = 20 dim = 1
#pragma HLS array_partition variable = tmp_1 cyclic factor = 16 dim = 2
  for (int i0 = 0; i0 < 10; i0++) {

    if (i0 % 2 == 0) {
      //     task0_intra(alpha, beta, B1, A1, j0, tmp_0, i0);
      //     task1_intra(alpha, beta, B1, A1, j0, tmp_0, i0);
      //     write_tmp_FT0(tmp_1, fifo_tmp_from_task1_to_task2, i0-1, j0);
      //     write_tmp_FT0(tmp_1, fifo_tmp_to_off_chip, i0-1, j0);
      compute_FT0_level1(alpha, beta, fifo_tmp_from_task1_to_task2,
                         fifo_A1_from_off_chip_to_S1,
                         fifo_B1_from_off_chip_to_S1, fifo_tmp_to_off_chip, B1,
                         A1, j0, i0, tmp_0, tmp_1);
    } else if (i0 % 2 == 1) {
      //     task0_intra(alpha, beta, B1, A1, j0, tmp_1, i0);
      //     task1_intra(alpha, beta, B1, A1, j0, tmp_1, i0);
      //     write_tmp_FT0(tmp_0, fifo_tmp_from_task1_to_task2, i0-1, j0);
      //     write_tmp_FT0(tmp_0, fifo_tmp_to_off_chip, i0-1, j0);
      compute_FT0_level1(alpha, beta, fifo_tmp_from_task1_to_task2,
                         fifo_A1_from_off_chip_to_S1,
                         fifo_B1_from_off_chip_to_S1, fifo_tmp_to_off_chip, B1,
                         A1, j0, i0, tmp_1, tmp_0);
    }
  }
  write_tmp_FT0(tmp_1, fifo_tmp_from_task1_to_task2, 9, j0);
  write_tmp_FT0(tmp_1, fifo_tmp_to_off_chip, 9, j0);
}
void FT1_level0(float alpha, float beta,
                hls::stream<float16> &fifo_tmp_from_task1_to_task2,
                hls::stream<float4> &fifo_A2_from_off_chip_to_S2,
                hls::stream<float16> &fifo_B2_from_off_chip_to_S2,
                hls::stream<float16> &fifo_C_from_off_chip_to_S2,
                hls::stream<float16> &fifo_A3_from_off_chip_to_S3,
                hls::stream<float16> &fifo_B3_from_off_chip_to_S3,
                hls::stream<float16> &fifo_C_to_off_chip) {
#pragma HLS inline off
  float B3_0[200][16];
  // FT1
#pragma HLS array_partition variable = B3_0 cyclic factor = 5 dim = 1
#pragma HLS array_partition variable = B3_0 cyclic factor = 16 dim = 2
  float B3_1[200][16];
  // FT1
#pragma HLS array_partition variable = B3_1 cyclic factor = 5 dim = 1
#pragma HLS array_partition variable = B3_1 cyclic factor = 16 dim = 2
  float A2_0[200];
#pragma HLS array_partition variable = A2_0 cyclic factor = 20 dim = 1
  float A2_1[200];
#pragma HLS array_partition variable = A2_1 cyclic factor = 20 dim = 1
  float A2_2[200];
#pragma HLS array_partition variable = A2_2 cyclic factor = 20 dim = 1
  float A3[200][200];
#pragma HLS array_partition variable = A3 cyclic factor = 5 dim = 1
#pragma HLS array_partition variable = A3 cyclic factor = 20 dim = 2
  read_A3_FT1(A3, fifo_A3_from_off_chip_to_S3);
  read_B3_FT1(B3_0, fifo_B3_from_off_chip_to_S3, 0);
  for (int j0 = 0; j0 < 15; j0++) {
    if (j0 % 2 == 0) {
      read_B3_FT1(B3_1, fifo_B3_from_off_chip_to_S3, j0 + 1);
      FT1_level1(alpha, beta, fifo_tmp_from_task1_to_task2,
                 fifo_A2_from_off_chip_to_S2, fifo_B2_from_off_chip_to_S2,
                 fifo_C_from_off_chip_to_S2, fifo_A3_from_off_chip_to_S3,
                 fifo_B3_from_off_chip_to_S3, fifo_C_to_off_chip, B3_0, A2_0,
                 A2_1, A2_2, A3, j0);
    } else if (j0 % 2 == 1) {
      read_B3_FT1(B3_0, fifo_B3_from_off_chip_to_S3, j0 + 1);
      FT1_level1(alpha, beta, fifo_tmp_from_task1_to_task2,
                 fifo_A2_from_off_chip_to_S2, fifo_B2_from_off_chip_to_S2,
                 fifo_C_from_off_chip_to_S2, fifo_A3_from_off_chip_to_S3,
                 fifo_B3_from_off_chip_to_S3, fifo_C_to_off_chip, B3_1, A2_0,
                 A2_1, A2_2, A3, j0);
    }
  }
}
void compute_FT1_level1(float alpha, float beta,
                        hls::stream<float16> &fifo_tmp_from_task1_to_task2,
                        hls::stream<float4> &fifo_A2_from_off_chip_to_S2,
                        hls::stream<float16> &fifo_B2_from_off_chip_to_S2,
                        hls::stream<float16> &fifo_C_from_off_chip_to_S2,
                        hls::stream<float16> &fifo_A3_from_off_chip_to_S3,
                        hls::stream<float16> &fifo_B3_from_off_chip_to_S3,
                        hls::stream<float16> &fifo_C_to_off_chip,
                        float B3[200][16], float A3[200][200], int j0, int i0,
                        float C_0[20][16], float C_1[20][16], float C_2[20][16],
                        float B2_0[20][16], float B2_1[20][16],
                        float B2_2[20][16], float tmp_0[20][16],
                        float tmp_1[20][16], float tmp_2[20][16],
                        float A2_0[200], float A2_1[200], float A2_2[200]) {
#pragma HLS inline off
#pragma HLS dataflow
  read_C_FT1(C_0, fifo_C_from_off_chip_to_S2, i0 + 1, j0);
  read_B2_FT1(B2_0, fifo_B2_from_off_chip_to_S2, i0 + 1, j0);
  read_A2_FT1(A2_0, fifo_A2_from_off_chip_to_S2, i0 + 1, j0);
  read_tmp_FT1(tmp_0, fifo_tmp_from_task1_to_task2, i0 + 1, j0);
  task2_intra(alpha, beta, B3, A2_1, A3, j0, C_1, B2_1, tmp_1, i0);
  task3_intra(alpha, beta, B3, A2_1, A3, j0, C_1, B2_1, tmp_1, i0);
  write_C_FT1(C_2, fifo_C_to_off_chip, i0 - 1, j0);
}
void FT1_level1(float alpha, float beta,
                hls::stream<float16> &fifo_tmp_from_task1_to_task2,
                hls::stream<float4> &fifo_A2_from_off_chip_to_S2,
                hls::stream<float16> &fifo_B2_from_off_chip_to_S2,
                hls::stream<float16> &fifo_C_from_off_chip_to_S2,
                hls::stream<float16> &fifo_A3_from_off_chip_to_S3,
                hls::stream<float16> &fifo_B3_from_off_chip_to_S3,
                hls::stream<float16> &fifo_C_to_off_chip, float B3[200][16],
                float A2_0[200], float A2_1[200], float A2_2[200],
                float A3[200][200], int j0) {
#pragma HLS inline off
  float C_0[20][16];
  // FT1
#pragma HLS array_partition variable = C_0 cyclic factor = 20 dim = 1
#pragma HLS array_partition variable = C_0 cyclic factor = 16 dim = 2
  float C_1[20][16];
  // FT1
#pragma HLS array_partition variable = C_1 cyclic factor = 20 dim = 1
#pragma HLS array_partition variable = C_1 cyclic factor = 16 dim = 2
  float C_2[20][16];
  // FT1
#pragma HLS array_partition variable = C_2 cyclic factor = 20 dim = 1
#pragma HLS array_partition variable = C_2 cyclic factor = 16 dim = 2
  float B2_0[20][16];
  // FT1
#pragma HLS array_partition variable = B2_0 cyclic factor = 20 dim = 1
#pragma HLS array_partition variable = B2_0 cyclic factor = 16 dim = 2
  float B2_1[20][16];
  // FT1
#pragma HLS array_partition variable = B2_1 cyclic factor = 20 dim = 1
#pragma HLS array_partition variable = B2_1 cyclic factor = 16 dim = 2
  float B2_2[20][16];
  // FT1
#pragma HLS array_partition variable = B2_2 cyclic factor = 20 dim = 1
#pragma HLS array_partition variable = B2_2 cyclic factor = 16 dim = 2
  float tmp_0[20][16];
  // FT1
#pragma HLS array_partition variable = tmp_0 cyclic factor = 20 dim = 1
#pragma HLS array_partition variable = tmp_0 cyclic factor = 16 dim = 2
  float tmp_1[20][16];
  // FT1
#pragma HLS array_partition variable = tmp_1 cyclic factor = 20 dim = 1
#pragma HLS array_partition variable = tmp_1 cyclic factor = 16 dim = 2
  float tmp_2[20][16];
  // FT1
#pragma HLS array_partition variable = tmp_2 cyclic factor = 20 dim = 1
#pragma HLS array_partition variable = tmp_2 cyclic factor = 16 dim = 2
  read_C_FT1(C_0, fifo_C_from_off_chip_to_S2, 0, j0);
  read_B2_FT1(B2_0, fifo_B2_from_off_chip_to_S2, 0, j0);
  read_A2_FT1(A2_0, fifo_A2_from_off_chip_to_S2, 0, j0);
  read_tmp_FT1(tmp_0, fifo_tmp_from_task1_to_task2, 0, j0);
  for (int i0 = 0; i0 < 10; i0++) {

    if (i0 % 3 == 0) {
      //     read_C_FT1(C_1, fifo_C_from_off_chip_to_S2, i0+1, j0);
      //     read_B2_FT1(B2_1, fifo_B2_from_off_chip_to_S2, i0+1, j0);
      //     read_A2_FT1(A2_1, fifo_A2_from_off_chip_to_S2, i0+1, j0);
      //     read_tmp_FT1(tmp_1, fifo_tmp_from_task1_to_task2, i0+1, j0);
      //     task2_intra(alpha, beta, B3, A2_0, A3, j0, C_0, B2_0, tmp_0, i0);
      //     task3_intra(alpha, beta, B3, A2_0, A3, j0, C_0, B2_0, tmp_0, i0);
      //     write_C_FT1(C_2, fifo_C_to_off_chip, i0-1, j0);
      compute_FT1_level1(
          alpha, beta, fifo_tmp_from_task1_to_task2,
          fifo_A2_from_off_chip_to_S2, fifo_B2_from_off_chip_to_S2,
          fifo_C_from_off_chip_to_S2, fifo_A3_from_off_chip_to_S3,
          fifo_B3_from_off_chip_to_S3, fifo_C_to_off_chip, B3, A3, j0, i0, C_1,
          C_0, C_2, B2_1, B2_0, B2_2, tmp_1, tmp_0, tmp_2, A2_1, A2_0, A2_2);
    } else if (i0 % 3 == 1) {
      //     read_C_FT1(C_2, fifo_C_from_off_chip_to_S2, i0+1, j0);
      //     read_B2_FT1(B2_2, fifo_B2_from_off_chip_to_S2, i0+1, j0);
      //     read_A2_FT1(A2_2, fifo_A2_from_off_chip_to_S2, i0+1, j0);
      //     read_tmp_FT1(tmp_2, fifo_tmp_from_task1_to_task2, i0+1, j0);
      //     task2_intra(alpha, beta, B3, A2_1, A3, j0, C_1, B2_1, tmp_1, i0);
      //     task3_intra(alpha, beta, B3, A2_1, A3, j0, C_1, B2_1, tmp_1, i0);
      //     write_C_FT1(C_0, fifo_C_to_off_chip, i0-1, j0);
      compute_FT1_level1(
          alpha, beta, fifo_tmp_from_task1_to_task2,
          fifo_A2_from_off_chip_to_S2, fifo_B2_from_off_chip_to_S2,
          fifo_C_from_off_chip_to_S2, fifo_A3_from_off_chip_to_S3,
          fifo_B3_from_off_chip_to_S3, fifo_C_to_off_chip, B3, A3, j0, i0, C_2,
          C_1, C_0, B2_2, B2_1, B2_0, tmp_2, tmp_1, tmp_0, A2_2, A2_1, A2_0);
    } else if (i0 % 3 == 2) {
      //     read_C_FT1(C_0, fifo_C_from_off_chip_to_S2, i0+1, j0);
      //     read_B2_FT1(B2_0, fifo_B2_from_off_chip_to_S2, i0+1, j0);
      //     read_A2_FT1(A2_0, fifo_A2_from_off_chip_to_S2, i0+1, j0);
      //     read_tmp_FT1(tmp_0, fifo_tmp_from_task1_to_task2, i0+1, j0);
      //     task2_intra(alpha, beta, B3, A2_2, A3, j0, C_2, B2_2, tmp_2, i0);
      //     task3_intra(alpha, beta, B3, A2_2, A3, j0, C_2, B2_2, tmp_2, i0);
      //     write_C_FT1(C_1, fifo_C_to_off_chip, i0-1, j0);
      compute_FT1_level1(
          alpha, beta, fifo_tmp_from_task1_to_task2,
          fifo_A2_from_off_chip_to_S2, fifo_B2_from_off_chip_to_S2,
          fifo_C_from_off_chip_to_S2, fifo_A3_from_off_chip_to_S3,
          fifo_B3_from_off_chip_to_S3, fifo_C_to_off_chip, B3, A3, j0, i0, C_0,
          C_2, C_1, B2_0, B2_2, B2_1, tmp_0, tmp_2, tmp_1, A2_0, A2_2, A2_1);
    }
  }
  write_C_FT1(C_0, fifo_C_to_off_chip, 9, j0);
}
void task0_intra(float alpha, float beta, float B1[208][16], float A1[200][208],
                 int j0, float tmp[20][16], int i0) {
#pragma HLS inline off
  int j;
  int i;
  for (int j1 = 0; j1 < 16; j1++) {
#pragma HLS unroll
    for (int i1 = 0; i1 < 20; i1++) {
#pragma HLS unroll
      j = j0 * 16 + j1;
      i = i0 * 20 + i1;
      tmp[i1][j1] = 0;
    }
  }
}
void task1_intra(float alpha, float beta, float B1[208][16], float A1[200][208],
                 int j0, float tmp[20][16], int i0) {
#pragma HLS inline off
  int j;
  int i;
  int k;
  for (int k0 = 0; k0 < 52; k0++) {
#pragma HLS pipeline II = 2
    for (int j1 = 0; j1 < 16; j1++) {
#pragma HLS unroll
      for (int i1 = 0; i1 < 20; i1++) {
#pragma HLS unroll
        for (int k1 = 0; k1 < 4; k1++) {
#pragma HLS unroll
          j = j0 * 16 + j1;
          i = i0 * 20 + i1;
          k = k0 * 4 + k1;
          tmp[i1][j1] = tmp[i1][j1] + B1[k][j1] * A1[i][k];
        }
      }
    }
  }
}
void task2_intra(float alpha, float beta, float B3[200][16], float A2[200],
                 float A3[200][200], int j0, float C[20][16], float B2[20][16],
                 float tmp[20][16], int i0) {
#pragma HLS inline off
  int j;
  int i;
  for (int j1 = 0; j1 < 16; j1++) {
#pragma HLS unroll
    for (int i1 = 0; i1 < 20; i1++) {
#pragma HLS unroll
      j = j0 * 16 + j1;
      i = i0 * 20 + i1;
      C[i1][j1] =
          beta * C[i1][j1] + alpha * B2[i1][j1] * A2[i] + alpha * tmp[i1][j1];
    }
  }
}
void task3_intra(float alpha, float beta, float B3[200][16], float A2[200],
                 float A3[200][200], int j0, float C[20][16], float B2[20][16],
                 float tmp[20][16], int i0) {
#pragma HLS inline off
  int j;
  int i;
  int k;
  for (int k0 = 0; k0 < 40; k0++) {
#pragma HLS pipeline II = 2
    for (int j1 = 0; j1 < 16; j1++) {
#pragma HLS unroll
      for (int i1 = 0; i1 < 20; i1++) {
#pragma HLS unroll
        for (int k1 = 0; k1 < 5; k1++) {
#pragma HLS unroll
          j = j0 * 16 + j1;
          i = i0 * 20 + i1;
          k = k0 * 5 + k1;
          C[i1][j1] = C[i1][j1] + alpha * B3[k][j1] * A3[k][i];
        }
      }
    }
  }
}
void read_A1_FT0(float A1[200][208],
                 hls::stream<float16> &fifo_A1_from_off_chip_to_S1) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 200; d0++) {
    for (int d1 = 0; d1 < 208; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_A1_from_off_chip_to_S1.read();
      A1[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      A1[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      A1[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      A1[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      A1[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      A1[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      A1[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      A1[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      A1[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      A1[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      A1[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      A1[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      A1[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      A1[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      A1[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      A1[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}
void read_A1_FT0(
    float A1[200][208],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A1_from_off_chip_to_S1) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 200; d0++) {
    for (int d1 = 0; d1 < 208; d1 += 16) {
#pragma HLS pipeline II = 1
      ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_A1_from_off_chip_to_S1.read();
      uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
      A1[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
      uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
      A1[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
      uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
      A1[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
      uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
      A1[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
      uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
      A1[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
      uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
      A1[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
      uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
      A1[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
      uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
      A1[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
      uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
      A1[d0 + 0][d1 + 0 + 8] = *(float *)(&tmp_8);
      uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
      A1[d0 + 0][d1 + 0 + 9] = *(float *)(&tmp_9);
      uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
      A1[d0 + 0][d1 + 0 + 10] = *(float *)(&tmp_10);
      uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
      A1[d0 + 0][d1 + 0 + 11] = *(float *)(&tmp_11);
      uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
      A1[d0 + 0][d1 + 0 + 12] = *(float *)(&tmp_12);
      uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
      A1[d0 + 0][d1 + 0 + 13] = *(float *)(&tmp_13);
      uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
      A1[d0 + 0][d1 + 0 + 14] = *(float *)(&tmp_14);
      uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
      A1[d0 + 0][d1 + 0 + 15] = *(float *)(&tmp_15);
    }
  }
}
void read_B1_FT0(float B1[208][16],
                 hls::stream<float16> &fifo_B1_from_off_chip_to_S1, int j0) {
#pragma HLS inline off
  if (j0 >= 15) {
    return;
  }
  for (int d0 = 0; d0 < 208; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_B1_from_off_chip_to_S1.read();
      B1[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      B1[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      B1[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      B1[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      B1[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      B1[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      B1[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      B1[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      B1[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      B1[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      B1[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      B1[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      B1[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      B1[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      B1[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      B1[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}
void read_B1_FT0(
    float B1[208][16],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_B1_from_off_chip_to_S1, int j0) {
#pragma HLS inline off
  if (j0 >= 15) {
    return;
  }
  for (int d0 = 0; d0 < 208; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_B1_from_off_chip_to_S1.read();
      uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
      B1[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
      uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
      B1[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
      uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
      B1[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
      uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
      B1[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
      uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
      B1[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
      uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
      B1[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
      uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
      B1[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
      uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
      B1[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
      uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
      B1[d0 + 0][d1 + 0 + 8] = *(float *)(&tmp_8);
      uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
      B1[d0 + 0][d1 + 0 + 9] = *(float *)(&tmp_9);
      uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
      B1[d0 + 0][d1 + 0 + 10] = *(float *)(&tmp_10);
      uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
      B1[d0 + 0][d1 + 0 + 11] = *(float *)(&tmp_11);
      uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
      B1[d0 + 0][d1 + 0 + 12] = *(float *)(&tmp_12);
      uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
      B1[d0 + 0][d1 + 0 + 13] = *(float *)(&tmp_13);
      uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
      B1[d0 + 0][d1 + 0 + 14] = *(float *)(&tmp_14);
      uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
      B1[d0 + 0][d1 + 0 + 15] = *(float *)(&tmp_15);
    }
  }
}
void read_A3_FT1(float A3[200][200],
                 hls::stream<float16> &fifo_A3_from_off_chip_to_S3) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 200; d0++) {
    for (int d1 = 0; d1 < 200; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_A3_from_off_chip_to_S3.read();
      if (d1 + 0 < 200)
        A3[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      if (d1 + 1 < 200)
        A3[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      if (d1 + 2 < 200)
        A3[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      if (d1 + 3 < 200)
        A3[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      if (d1 + 4 < 200)
        A3[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      if (d1 + 5 < 200)
        A3[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      if (d1 + 6 < 200)
        A3[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      if (d1 + 7 < 200)
        A3[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      if (d1 + 8 < 200)
        A3[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      if (d1 + 9 < 200)
        A3[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      if (d1 + 10 < 200)
        A3[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      if (d1 + 11 < 200)
        A3[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      if (d1 + 12 < 200)
        A3[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      if (d1 + 13 < 200)
        A3[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      if (d1 + 14 < 200)
        A3[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      if (d1 + 15 < 200)
        A3[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}
void read_A3_FT1(
    float A3[200][200],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A3_from_off_chip_to_S3) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 200; d0++) {
    for (int d1 = 0; d1 < 200; d1 += 16) {
#pragma HLS pipeline II = 1
      ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_A3_from_off_chip_to_S3.read();
      if (d1 + 0 < 200) {
        uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
        A3[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
      }
      if (d1 + 1 < 200) {
        uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
        A3[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
      }
      if (d1 + 2 < 200) {
        uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
        A3[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
      }
      if (d1 + 3 < 200) {
        uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
        A3[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
      }
      if (d1 + 4 < 200) {
        uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
        A3[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
      }
      if (d1 + 5 < 200) {
        uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
        A3[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
      }
      if (d1 + 6 < 200) {
        uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
        A3[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
      }
      if (d1 + 7 < 200) {
        uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
        A3[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
      }
      if (d1 + 8 < 200) {
        uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
        A3[d0 + 0][d1 + 0 + 8] = *(float *)(&tmp_8);
      }
      if (d1 + 9 < 200) {
        uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
        A3[d0 + 0][d1 + 0 + 9] = *(float *)(&tmp_9);
      }
      if (d1 + 10 < 200) {
        uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
        A3[d0 + 0][d1 + 0 + 10] = *(float *)(&tmp_10);
      }
      if (d1 + 11 < 200) {
        uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
        A3[d0 + 0][d1 + 0 + 11] = *(float *)(&tmp_11);
      }
      if (d1 + 12 < 200) {
        uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
        A3[d0 + 0][d1 + 0 + 12] = *(float *)(&tmp_12);
      }
      if (d1 + 13 < 200) {
        uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
        A3[d0 + 0][d1 + 0 + 13] = *(float *)(&tmp_13);
      }
      if (d1 + 14 < 200) {
        uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
        A3[d0 + 0][d1 + 0 + 14] = *(float *)(&tmp_14);
      }
      if (d1 + 15 < 200) {
        uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
        A3[d0 + 0][d1 + 0 + 15] = *(float *)(&tmp_15);
      }
    }
  }
}
void read_B3_FT1(float B3[200][16],
                 hls::stream<float16> &fifo_B3_from_off_chip_to_S3, int j0) {
#pragma HLS inline off
  if (j0 >= 15) {
    return;
  }
  for (int d0 = 0; d0 < 200; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_B3_from_off_chip_to_S3.read();
      B3[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      B3[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      B3[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      B3[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      B3[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      B3[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      B3[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      B3[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      B3[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      B3[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      B3[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      B3[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      B3[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      B3[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      B3[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      B3[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}
void read_B3_FT1(
    float B3[200][16],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_B3_from_off_chip_to_S3, int j0) {
#pragma HLS inline off
  if (j0 >= 15) {
    return;
  }
  for (int d0 = 0; d0 < 200; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_B3_from_off_chip_to_S3.read();
      uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
      B3[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
      uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
      B3[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
      uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
      B3[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
      uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
      B3[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
      uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
      B3[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
      uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
      B3[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
      uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
      B3[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
      uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
      B3[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
      uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
      B3[d0 + 0][d1 + 0 + 8] = *(float *)(&tmp_8);
      uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
      B3[d0 + 0][d1 + 0 + 9] = *(float *)(&tmp_9);
      uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
      B3[d0 + 0][d1 + 0 + 10] = *(float *)(&tmp_10);
      uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
      B3[d0 + 0][d1 + 0 + 11] = *(float *)(&tmp_11);
      uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
      B3[d0 + 0][d1 + 0 + 12] = *(float *)(&tmp_12);
      uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
      B3[d0 + 0][d1 + 0 + 13] = *(float *)(&tmp_13);
      uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
      B3[d0 + 0][d1 + 0 + 14] = *(float *)(&tmp_14);
      uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
      B3[d0 + 0][d1 + 0 + 15] = *(float *)(&tmp_15);
    }
  }
}
void read_C_FT1(float C[20][16],
                hls::stream<float16> &fifo_C_from_off_chip_to_S2, int i0,
                int j0) {
#pragma HLS inline off
  if (j0 >= 15 || i0 >= 10) {
    return;
  }
  for (int d0 = 0; d0 < 20; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_C_from_off_chip_to_S2.read();
      C[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      C[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      C[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      C[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      C[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      C[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      C[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      C[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      C[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      C[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      C[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      C[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      C[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      C[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      C[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      C[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}
void read_C_FT1(float C[20][16],
                hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_C_from_off_chip_to_S2,
                int i0, int j0) {
#pragma HLS inline off
  if (j0 >= 15 || i0 >= 10) {
    return;
  }
  for (int d0 = 0; d0 < 20; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_C_from_off_chip_to_S2.read();
      uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
      C[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
      uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
      C[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
      uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
      C[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
      uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
      C[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
      uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
      C[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
      uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
      C[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
      uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
      C[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
      uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
      C[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
      uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
      C[d0 + 0][d1 + 0 + 8] = *(float *)(&tmp_8);
      uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
      C[d0 + 0][d1 + 0 + 9] = *(float *)(&tmp_9);
      uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
      C[d0 + 0][d1 + 0 + 10] = *(float *)(&tmp_10);
      uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
      C[d0 + 0][d1 + 0 + 11] = *(float *)(&tmp_11);
      uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
      C[d0 + 0][d1 + 0 + 12] = *(float *)(&tmp_12);
      uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
      C[d0 + 0][d1 + 0 + 13] = *(float *)(&tmp_13);
      uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
      C[d0 + 0][d1 + 0 + 14] = *(float *)(&tmp_14);
      uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
      C[d0 + 0][d1 + 0 + 15] = *(float *)(&tmp_15);
    }
  }
}
void read_B2_FT1(float B2[20][16],
                 hls::stream<float16> &fifo_B2_from_off_chip_to_S2, int i0,
                 int j0) {
#pragma HLS inline off
  if (j0 >= 15 || i0 >= 10) {
    return;
  }
  for (int d0 = 0; d0 < 20; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_B2_from_off_chip_to_S2.read();
      B2[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      B2[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      B2[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      B2[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      B2[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      B2[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      B2[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      B2[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      B2[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      B2[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      B2[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      B2[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      B2[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      B2[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      B2[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      B2[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}
void read_B2_FT1(
    float B2[20][16],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_B2_from_off_chip_to_S2, int i0,
    int j0) {
#pragma HLS inline off
  if (j0 >= 15 || i0 >= 10) {
    return;
  }
  for (int d0 = 0; d0 < 20; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_B2_from_off_chip_to_S2.read();
      uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
      B2[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
      uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
      B2[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
      uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
      B2[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
      uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
      B2[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
      uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
      B2[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
      uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
      B2[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
      uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
      B2[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
      uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
      B2[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
      uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
      B2[d0 + 0][d1 + 0 + 8] = *(float *)(&tmp_8);
      uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
      B2[d0 + 0][d1 + 0 + 9] = *(float *)(&tmp_9);
      uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
      B2[d0 + 0][d1 + 0 + 10] = *(float *)(&tmp_10);
      uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
      B2[d0 + 0][d1 + 0 + 11] = *(float *)(&tmp_11);
      uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
      B2[d0 + 0][d1 + 0 + 12] = *(float *)(&tmp_12);
      uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
      B2[d0 + 0][d1 + 0 + 13] = *(float *)(&tmp_13);
      uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
      B2[d0 + 0][d1 + 0 + 14] = *(float *)(&tmp_14);
      uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
      B2[d0 + 0][d1 + 0 + 15] = *(float *)(&tmp_15);
    }
  }
}
void read_A2_FT1(float A2[200],
                 hls::stream<float4> &fifo_A2_from_off_chip_to_S2, int i0,
                 int j0) {
#pragma HLS inline off
  if (j0 > 0 || i0 >= 10) {
    return;
  }
  for (int d0 = 0; d0 < 20; d0 += 4) {
#pragma HLS pipeline II = 1
    float4 tmp_fifo = fifo_A2_from_off_chip_to_S2.read();
    A2[d0 + i0 * 20 + 0] = tmp_fifo[0];
    A2[d0 + i0 * 20 + 1] = tmp_fifo[1];
    A2[d0 + i0 * 20 + 2] = tmp_fifo[2];
    A2[d0 + i0 * 20 + 3] = tmp_fifo[3];
  }
}
void read_A2_FT1(
    float A2[200],
    hls::stream<ap_axiu<128, 0, 0, 0>> &fifo_A2_from_off_chip_to_S2, int i0,
    int j0) {
#pragma HLS inline off
  if (j0 > 0 || i0 >= 10) {
    return;
  }
  for (int d0 = 0; d0 < 20; d0 += 4) {
#pragma HLS pipeline II = 1
    ap_axiu<128, 0, 0, 0> tmp_fifo = fifo_A2_from_off_chip_to_S2.read();
    uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
    A2[d0 + i0 * 20 + 0] = *(float *)(&tmp_0);
    uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
    A2[d0 + i0 * 20 + 1] = *(float *)(&tmp_1);
    uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
    A2[d0 + i0 * 20 + 2] = *(float *)(&tmp_2);
    uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
    A2[d0 + i0 * 20 + 3] = *(float *)(&tmp_3);
  }
}
void read_tmp_FT1(float tmp[20][16],
                  hls::stream<float16> &fifo_tmp_from_task1_to_task2, int i0,
                  int j0) {
#pragma HLS inline off
  if (j0 >= 15 || i0 >= 10) {
    return;
  }
  for (int d0_1 = 0; d0_1 < 20; d0_1++) {

    for (int d1_1 = 0; d1_1 < 16; d1_1 += 16) {

      int d0 = d0_1;
      int d1 = d1_1;
      float16 tmp_fifo = fifo_tmp_from_task1_to_task2.read();
      if (d1 + 0 < 16)
        tmp[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      if (d1 + 1 < 16)
        tmp[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      if (d1 + 2 < 16)
        tmp[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      if (d1 + 3 < 16)
        tmp[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      if (d1 + 4 < 16)
        tmp[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      if (d1 + 5 < 16)
        tmp[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      if (d1 + 6 < 16)
        tmp[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      if (d1 + 7 < 16)
        tmp[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      if (d1 + 8 < 16)
        tmp[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      if (d1 + 9 < 16)
        tmp[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      if (d1 + 10 < 16)
        tmp[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      if (d1 + 11 < 16)
        tmp[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      if (d1 + 12 < 16)
        tmp[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      if (d1 + 13 < 16)
        tmp[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      if (d1 + 14 < 16)
        tmp[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      if (d1 + 15 < 16)
        tmp[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}
void read_tmp_FT1(
    float tmp[20][16],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_tmp_from_task1_to_task2, int i0,
    int j0) {
#pragma HLS inline off
  if (j0 >= 15 || i0 >= 10) {
    return;
  }
  for (int d0_1 = 0; d0_1 < 20; d0_1++) {

    for (int d1_1 = 0; d1_1 < 16; d1_1 += 16) {

      int d0 = d0_1;
      int d1 = d1_1;
      ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_tmp_from_task1_to_task2.read();
      if (d1 + 0 < 16) {
        uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
        tmp[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
      }
      if (d1 + 1 < 16) {
        uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
        tmp[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
      }
      if (d1 + 2 < 16) {
        uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
        tmp[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
      }
      if (d1 + 3 < 16) {
        uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
        tmp[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
      }
      if (d1 + 4 < 16) {
        uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
        tmp[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
      }
      if (d1 + 5 < 16) {
        uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
        tmp[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
      }
      if (d1 + 6 < 16) {
        uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
        tmp[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
      }
      if (d1 + 7 < 16) {
        uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
        tmp[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
      }
      if (d1 + 8 < 16) {
        uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
        tmp[d0 + 0][d1 + 0 + 8] = *(float *)(&tmp_8);
      }
      if (d1 + 9 < 16) {
        uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
        tmp[d0 + 0][d1 + 0 + 9] = *(float *)(&tmp_9);
      }
      if (d1 + 10 < 16) {
        uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
        tmp[d0 + 0][d1 + 0 + 10] = *(float *)(&tmp_10);
      }
      if (d1 + 11 < 16) {
        uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
        tmp[d0 + 0][d1 + 0 + 11] = *(float *)(&tmp_11);
      }
      if (d1 + 12 < 16) {
        uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
        tmp[d0 + 0][d1 + 0 + 12] = *(float *)(&tmp_12);
      }
      if (d1 + 13 < 16) {
        uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
        tmp[d0 + 0][d1 + 0 + 13] = *(float *)(&tmp_13);
      }
      if (d1 + 14 < 16) {
        uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
        tmp[d0 + 0][d1 + 0 + 14] = *(float *)(&tmp_14);
      }
      if (d1 + 15 < 16) {
        uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
        tmp[d0 + 0][d1 + 0 + 15] = *(float *)(&tmp_15);
      }
    }
  }
}
void write_tmp_FT0(float tmp[20][16],
                   hls::stream<float16> &fifo_tmp_from_task1_to_task2, int i0,
                   int j0) {
#pragma HLS inline off
  if (i0 < 0 || j0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 20; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo;
      tmp_fifo[0] = tmp[d0 + 0][d1 + 0 + 0];
      tmp_fifo[1] = tmp[d0 + 0][d1 + 0 + 1];
      tmp_fifo[2] = tmp[d0 + 0][d1 + 0 + 2];
      tmp_fifo[3] = tmp[d0 + 0][d1 + 0 + 3];
      tmp_fifo[4] = tmp[d0 + 0][d1 + 0 + 4];
      tmp_fifo[5] = tmp[d0 + 0][d1 + 0 + 5];
      tmp_fifo[6] = tmp[d0 + 0][d1 + 0 + 6];
      tmp_fifo[7] = tmp[d0 + 0][d1 + 0 + 7];
      tmp_fifo[8] = tmp[d0 + 0][d1 + 0 + 8];
      tmp_fifo[9] = tmp[d0 + 0][d1 + 0 + 9];
      tmp_fifo[10] = tmp[d0 + 0][d1 + 0 + 10];
      tmp_fifo[11] = tmp[d0 + 0][d1 + 0 + 11];
      tmp_fifo[12] = tmp[d0 + 0][d1 + 0 + 12];
      tmp_fifo[13] = tmp[d0 + 0][d1 + 0 + 13];
      tmp_fifo[14] = tmp[d0 + 0][d1 + 0 + 14];
      tmp_fifo[15] = tmp[d0 + 0][d1 + 0 + 15];
      fifo_tmp_from_task1_to_task2.write(tmp_fifo);
    }
  }
}
void write_tmp_FT0(
    float tmp[20][16],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_tmp_from_task1_to_task2, int i0,
    int j0) {
#pragma HLS inline off
  if (i0 < 0 || j0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 20; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      ap_axiu<512, 0, 0, 0> tmp_fifo;
      float tmp_0 = tmp[d0 + 0][d1 + 0 + 0];
      tmp_fifo.data.range(31, 0) = *(uint32_t *)(&tmp_0);
      float tmp_1 = tmp[d0 + 0][d1 + 0 + 1];
      tmp_fifo.data.range(63, 32) = *(uint32_t *)(&tmp_1);
      float tmp_2 = tmp[d0 + 0][d1 + 0 + 2];
      tmp_fifo.data.range(95, 64) = *(uint32_t *)(&tmp_2);
      float tmp_3 = tmp[d0 + 0][d1 + 0 + 3];
      tmp_fifo.data.range(127, 96) = *(uint32_t *)(&tmp_3);
      float tmp_4 = tmp[d0 + 0][d1 + 0 + 4];
      tmp_fifo.data.range(159, 128) = *(uint32_t *)(&tmp_4);
      float tmp_5 = tmp[d0 + 0][d1 + 0 + 5];
      tmp_fifo.data.range(191, 160) = *(uint32_t *)(&tmp_5);
      float tmp_6 = tmp[d0 + 0][d1 + 0 + 6];
      tmp_fifo.data.range(223, 192) = *(uint32_t *)(&tmp_6);
      float tmp_7 = tmp[d0 + 0][d1 + 0 + 7];
      tmp_fifo.data.range(255, 224) = *(uint32_t *)(&tmp_7);
      float tmp_8 = tmp[d0 + 0][d1 + 0 + 8];
      tmp_fifo.data.range(287, 256) = *(uint32_t *)(&tmp_8);
      float tmp_9 = tmp[d0 + 0][d1 + 0 + 9];
      tmp_fifo.data.range(319, 288) = *(uint32_t *)(&tmp_9);
      float tmp_10 = tmp[d0 + 0][d1 + 0 + 10];
      tmp_fifo.data.range(351, 320) = *(uint32_t *)(&tmp_10);
      float tmp_11 = tmp[d0 + 0][d1 + 0 + 11];
      tmp_fifo.data.range(383, 352) = *(uint32_t *)(&tmp_11);
      float tmp_12 = tmp[d0 + 0][d1 + 0 + 12];
      tmp_fifo.data.range(415, 384) = *(uint32_t *)(&tmp_12);
      float tmp_13 = tmp[d0 + 0][d1 + 0 + 13];
      tmp_fifo.data.range(447, 416) = *(uint32_t *)(&tmp_13);
      float tmp_14 = tmp[d0 + 0][d1 + 0 + 14];
      tmp_fifo.data.range(479, 448) = *(uint32_t *)(&tmp_14);
      float tmp_15 = tmp[d0 + 0][d1 + 0 + 15];
      tmp_fifo.data.range(511, 480) = *(uint32_t *)(&tmp_15);
      fifo_tmp_from_task1_to_task2.write(tmp_fifo);
    }
  }
}
void write_C_FT1(float C[20][16], hls::stream<float16> &fifo_C_to_off_chip,
                 int i0, int j0) {
#pragma HLS inline off
  if (i0 < 0 || j0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 20; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo;
      tmp_fifo[0] = C[d0 + 0][d1 + 0 + 0];
      tmp_fifo[1] = C[d0 + 0][d1 + 0 + 1];
      tmp_fifo[2] = C[d0 + 0][d1 + 0 + 2];
      tmp_fifo[3] = C[d0 + 0][d1 + 0 + 3];
      tmp_fifo[4] = C[d0 + 0][d1 + 0 + 4];
      tmp_fifo[5] = C[d0 + 0][d1 + 0 + 5];
      tmp_fifo[6] = C[d0 + 0][d1 + 0 + 6];
      tmp_fifo[7] = C[d0 + 0][d1 + 0 + 7];
      tmp_fifo[8] = C[d0 + 0][d1 + 0 + 8];
      tmp_fifo[9] = C[d0 + 0][d1 + 0 + 9];
      tmp_fifo[10] = C[d0 + 0][d1 + 0 + 10];
      tmp_fifo[11] = C[d0 + 0][d1 + 0 + 11];
      tmp_fifo[12] = C[d0 + 0][d1 + 0 + 12];
      tmp_fifo[13] = C[d0 + 0][d1 + 0 + 13];
      tmp_fifo[14] = C[d0 + 0][d1 + 0 + 14];
      tmp_fifo[15] = C[d0 + 0][d1 + 0 + 15];
      fifo_C_to_off_chip.write(tmp_fifo);
    }
  }
}
void write_C_FT1(float C[20][16],
                 hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_C_to_off_chip, int i0,
                 int j0) {
#pragma HLS inline off
  if (i0 < 0 || j0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 20; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      ap_axiu<512, 0, 0, 0> tmp_fifo;
      float tmp_0 = C[d0 + 0][d1 + 0 + 0];
      tmp_fifo.data.range(31, 0) = *(uint32_t *)(&tmp_0);
      float tmp_1 = C[d0 + 0][d1 + 0 + 1];
      tmp_fifo.data.range(63, 32) = *(uint32_t *)(&tmp_1);
      float tmp_2 = C[d0 + 0][d1 + 0 + 2];
      tmp_fifo.data.range(95, 64) = *(uint32_t *)(&tmp_2);
      float tmp_3 = C[d0 + 0][d1 + 0 + 3];
      tmp_fifo.data.range(127, 96) = *(uint32_t *)(&tmp_3);
      float tmp_4 = C[d0 + 0][d1 + 0 + 4];
      tmp_fifo.data.range(159, 128) = *(uint32_t *)(&tmp_4);
      float tmp_5 = C[d0 + 0][d1 + 0 + 5];
      tmp_fifo.data.range(191, 160) = *(uint32_t *)(&tmp_5);
      float tmp_6 = C[d0 + 0][d1 + 0 + 6];
      tmp_fifo.data.range(223, 192) = *(uint32_t *)(&tmp_6);
      float tmp_7 = C[d0 + 0][d1 + 0 + 7];
      tmp_fifo.data.range(255, 224) = *(uint32_t *)(&tmp_7);
      float tmp_8 = C[d0 + 0][d1 + 0 + 8];
      tmp_fifo.data.range(287, 256) = *(uint32_t *)(&tmp_8);
      float tmp_9 = C[d0 + 0][d1 + 0 + 9];
      tmp_fifo.data.range(319, 288) = *(uint32_t *)(&tmp_9);
      float tmp_10 = C[d0 + 0][d1 + 0 + 10];
      tmp_fifo.data.range(351, 320) = *(uint32_t *)(&tmp_10);
      float tmp_11 = C[d0 + 0][d1 + 0 + 11];
      tmp_fifo.data.range(383, 352) = *(uint32_t *)(&tmp_11);
      float tmp_12 = C[d0 + 0][d1 + 0 + 12];
      tmp_fifo.data.range(415, 384) = *(uint32_t *)(&tmp_12);
      float tmp_13 = C[d0 + 0][d1 + 0 + 13];
      tmp_fifo.data.range(447, 416) = *(uint32_t *)(&tmp_13);
      float tmp_14 = C[d0 + 0][d1 + 0 + 14];
      tmp_fifo.data.range(479, 448) = *(uint32_t *)(&tmp_14);
      float tmp_15 = C[d0 + 0][d1 + 0 + 15];
      tmp_fifo.data.range(511, 480) = *(uint32_t *)(&tmp_15);
      fifo_C_to_off_chip.write(tmp_fifo);
    }
  }
}

void kernel_nlp_slr0(float alpha, float beta, float16 vtmp_for_task1[3000],
                     float16 vB1_for_task1[3120], float16 vA1_for_task1[2600],
                     float16 vC_for_task2[3000], float16 vB2_for_task2[3000],
                     float4 vA2_for_task2[50], float16 vB3_for_task3[3000],
                     float16 vA3_for_task3[2600]) {
#pragma HLS INTERFACE m_axi port = alpha offset = slave bundle = kernel_alpha
#pragma HLS INTERFACE m_axi port = beta offset = slave bundle = kernel_beta
#pragma HLS INTERFACE m_axi port = vtmp_for_task1 offset = slave bundle =      \
    kernel_vtmp_for_task1
#pragma HLS INTERFACE m_axi port = vB1_for_task1 offset = slave bundle =       \
    kernel_vB1_for_task1
#pragma HLS INTERFACE m_axi port = vA1_for_task1 offset = slave bundle =       \
    kernel_vA1_for_task1
#pragma HLS INTERFACE m_axi port = vC_for_task2 offset = slave bundle =        \
    kernel_vC_for_task2
#pragma HLS INTERFACE m_axi port = vB2_for_task2 offset = slave bundle =       \
    kernel_vB2_for_task2
#pragma HLS INTERFACE m_axi port = vA2_for_task2 offset = slave bundle =       \
    kernel_vA2_for_task2
#pragma HLS INTERFACE m_axi port = vB3_for_task3 offset = slave bundle =       \
    kernel_vB3_for_task3
#pragma HLS INTERFACE m_axi port = vA3_for_task3 offset = slave bundle =       \
    kernel_vA3_for_task3
#pragma HLS INTERFACE s_axilite port = alpha bundle = control
#pragma HLS INTERFACE s_axilite port = beta bundle = control
#pragma HLS INTERFACE s_axilite port = vtmp_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vB1_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vA1_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vC_for_task2 bundle = control
#pragma HLS INTERFACE s_axilite port = vB2_for_task2 bundle = control
#pragma HLS INTERFACE s_axilite port = vA2_for_task2 bundle = control
#pragma HLS INTERFACE s_axilite port = vB3_for_task3 bundle = control
#pragma HLS INTERFACE s_axilite port = vA3_for_task3 bundle = control
#pragma HLS DATA_PACK VARIABLE = alpha
#pragma HLS DATA_PACK VARIABLE = beta
#pragma HLS DATA_PACK VARIABLE = vtmp_for_task1
#pragma HLS DATA_PACK VARIABLE = vB1_for_task1
#pragma HLS DATA_PACK VARIABLE = vA1_for_task1
#pragma HLS DATA_PACK VARIABLE = vC_for_task2
#pragma HLS DATA_PACK VARIABLE = vB2_for_task2
#pragma HLS DATA_PACK VARIABLE = vA2_for_task2
#pragma HLS DATA_PACK VARIABLE = vB3_for_task3
#pragma HLS DATA_PACK VARIABLE = vA3_for_task3
#pragma HLS INTERFACE s_axilite port = return bundle = control
#pragma HLS dataflow
  hls::stream<float16> fifo_tmp_from_task1_to_task2;
#pragma HLS stream variable = fifo_tmp_from_task1_to_task2 depth = 1024
  hls::stream<float16> fifo_tmp_to_off_chip;
#pragma HLS stream variable = fifo_tmp_to_off_chip depth = 1024
  hls::stream<float16> fifo_C_to_off_chip;
#pragma HLS stream variable = fifo_C_to_off_chip depth = 1024
  hls::stream<float16> fifo_B1_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_B1_from_off_chip_to_S1 depth = 1024
  hls::stream<float16> fifo_A1_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_A1_from_off_chip_to_S1 depth = 1024
  hls::stream<float16> fifo_B3_from_off_chip_to_S3;
#pragma HLS stream variable = fifo_B3_from_off_chip_to_S3 depth = 1024
  hls::stream<float16> fifo_A3_from_off_chip_to_S3;
#pragma HLS stream variable = fifo_A3_from_off_chip_to_S3 depth = 1024
  hls::stream<float16> fifo_C_from_off_chip_to_S2;
#pragma HLS stream variable = fifo_C_from_off_chip_to_S2 depth = 1024
  hls::stream<float16> fifo_B2_from_off_chip_to_S2;
#pragma HLS stream variable = fifo_B2_from_off_chip_to_S2 depth = 1024
  hls::stream<float4> fifo_A2_from_off_chip_to_S2;
#pragma HLS stream variable = fifo_A2_from_off_chip_to_S2 depth = 1024
  load_vA2_for_task2(fifo_A2_from_off_chip_to_S2, vA2_for_task2);
  load_vB2_for_task2(fifo_B2_from_off_chip_to_S2, vB2_for_task2);
  load_vC_for_task2(fifo_C_from_off_chip_to_S2, vC_for_task2);
  load_vA3_for_task3(fifo_A3_from_off_chip_to_S3, vA3_for_task3);
  load_vB3_for_task3(fifo_B3_from_off_chip_to_S3, vB3_for_task3);
  load_vA1_for_task1(fifo_A1_from_off_chip_to_S1, vA1_for_task1);
  load_vB1_for_task1(fifo_B1_from_off_chip_to_S1, vB1_for_task1);
  FT0_level0(alpha, beta, fifo_tmp_from_task1_to_task2,
             fifo_A1_from_off_chip_to_S1, fifo_B1_from_off_chip_to_S1,
             fifo_tmp_to_off_chip);
  FT1_level0(alpha, beta, fifo_tmp_from_task1_to_task2,
             fifo_A2_from_off_chip_to_S2, fifo_B2_from_off_chip_to_S2,
             fifo_C_from_off_chip_to_S2, fifo_A3_from_off_chip_to_S3,
             fifo_B3_from_off_chip_to_S3, fifo_C_to_off_chip);
  store_vC_for_task2(fifo_C_to_off_chip, vC_for_task2);
  store_vtmp_for_task1(fifo_tmp_to_off_chip, vtmp_for_task1);
}
