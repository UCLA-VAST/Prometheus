#include "output_2.h"

#define READ_RANGE(Arr, data_size, l)                                          \
  (Arr.data.range((data_size) * (l) + (data_size) - 1, (data_size) * (l)))

/****************************************************
 This file was automatically generated by Prometheus
****************************************************/
void load_vB1_for_task1(hls::stream<float16> &fifo_B1_from_off_chip_to_S1,
                        float16 vB1[3120]) {
#pragma HLS inline off
  for (int i = 0; i < 3120; i++) {
#pragma HLS pipeline II = 1
    fifo_B1_from_off_chip_to_S1.write(vB1[i]);
  }
}

void load_vA1_for_task1(hls::stream<float16> &fifo_A1_from_off_chip_to_S1,
                        float16 vA1[3120]) {
#pragma HLS inline off
  for (int i = 0; i < 3120; i++) {
#pragma HLS pipeline II = 1
    fifo_A1_from_off_chip_to_S1.write(vA1[i]);
  }
}

void load_vA2_for_task1(hls::stream<float16> &fifo_A2_from_off_chip_to_S1,
                        float16 vA2[3120]) {
#pragma HLS inline off
  for (int i = 0; i < 3120; i++) {
#pragma HLS pipeline II = 1
    fifo_A2_from_off_chip_to_S1.write(vA2[i]);
  }
}

void load_vB2_for_task1(hls::stream<float16> &fifo_B2_from_off_chip_to_S1,
                        float16 vB2[3120]) {
#pragma HLS inline off
  for (int i = 0; i < 3120; i++) {
#pragma HLS pipeline II = 1
    fifo_B2_from_off_chip_to_S1.write(vB2[i]);
  }
}

void load_vC_for_task0(hls::stream<float4> &fifo_C_from_off_chip_to_S0,
                       float4 vC[14400]) {
#pragma HLS inline off
  for (int i = 0; i < 14400; i++) {
#pragma HLS pipeline II = 1
    fifo_C_from_off_chip_to_S0.write(vC[i]);
  }
}

void store_vC_for_task0(hls::stream<float4> &fifo_C_to_off_chip,
                        float4 vC[14400]) {
#pragma HLS inline off
  for (int i = 0; i < 14400; i++) {
#pragma HLS pipeline II = 1
    vC[i] = fifo_C_to_off_chip.read();
  }
}

void FT0_level0(float alpha, float beta,
                hls::stream<float16> &fifo_B1_from_off_chip_to_S1,
                hls::stream<float16> &fifo_A1_from_off_chip_to_S1,
                hls::stream<float16> &fifo_A2_from_off_chip_to_S1,
                hls::stream<float16> &fifo_B2_from_off_chip_to_S1,
                hls::stream<float4> &fifo_C_from_off_chip_to_S0,
                hls::stream<float4> &fifo_C_to_off_chip) {
#pragma HLS inline off
  float B1_0[40][208];
  // FT0
#pragma HLS array_partition variable = B1_0 cyclic factor = 40 dim = 1
#pragma HLS array_partition variable = B1_0 cyclic factor = 4 dim = 2
  float B1_1[40][208];
  // FT0
#pragma HLS array_partition variable = B1_1 cyclic factor = 40 dim = 1
#pragma HLS array_partition variable = B1_1 cyclic factor = 4 dim = 2
  float A2_0[40][208];
  // FT0
#pragma HLS array_partition variable = A2_0 cyclic factor = 40 dim = 1
#pragma HLS array_partition variable = A2_0 cyclic factor = 4 dim = 2
  float A2_1[40][208];
  // FT0
#pragma HLS array_partition variable = A2_1 cyclic factor = 40 dim = 1
#pragma HLS array_partition variable = A2_1 cyclic factor = 4 dim = 2
  float A1_0[240][208];
#pragma HLS array_partition variable = A1_0 cyclic factor = 12 dim = 1
#pragma HLS array_partition variable = A1_0 cyclic factor = 4 dim = 2
  float A1_1[240][208];
#pragma HLS array_partition variable = A1_1 cyclic factor = 12 dim = 1
#pragma HLS array_partition variable = A1_1 cyclic factor = 4 dim = 2
  float A1_2[240][208];
#pragma HLS array_partition variable = A1_2 cyclic factor = 12 dim = 1
#pragma HLS array_partition variable = A1_2 cyclic factor = 4 dim = 2
  float B2_0[240][208];
#pragma HLS array_partition variable = B2_0 cyclic factor = 12 dim = 1
#pragma HLS array_partition variable = B2_0 cyclic factor = 4 dim = 2
  float B2_1[240][208];
#pragma HLS array_partition variable = B2_1 cyclic factor = 12 dim = 1
#pragma HLS array_partition variable = B2_1 cyclic factor = 4 dim = 2
  float B2_2[240][208];
#pragma HLS array_partition variable = B2_2 cyclic factor = 12 dim = 1
#pragma HLS array_partition variable = B2_2 cyclic factor = 4 dim = 2
  read_B1_FT0(B1_0, fifo_B1_from_off_chip_to_S1, 0);
  read_A2_FT0(A2_0, fifo_A2_from_off_chip_to_S1, 0);
  for (int i0 = 0; i0 < 6; i0++) {
    if (i0 % 2 == 0) {
      read_B1_FT0(B1_1, fifo_B1_from_off_chip_to_S1, i0 + 1);
      read_A2_FT0(A2_1, fifo_A2_from_off_chip_to_S1, i0 + 1);
      FT0_level1(alpha, beta, fifo_B1_from_off_chip_to_S1,
                 fifo_A1_from_off_chip_to_S1, fifo_A2_from_off_chip_to_S1,
                 fifo_B2_from_off_chip_to_S1, fifo_C_from_off_chip_to_S0,
                 fifo_C_to_off_chip, B1_0, A2_0, A1_0, A1_1, A1_2, B2_0, B2_1,
                 B2_2, i0);
    } else if (i0 % 2 == 1) {
      read_B1_FT0(B1_0, fifo_B1_from_off_chip_to_S1, i0 + 1);
      read_A2_FT0(A2_0, fifo_A2_from_off_chip_to_S1, i0 + 1);
      FT0_level1(alpha, beta, fifo_B1_from_off_chip_to_S1,
                 fifo_A1_from_off_chip_to_S1, fifo_A2_from_off_chip_to_S1,
                 fifo_B2_from_off_chip_to_S1, fifo_C_from_off_chip_to_S0,
                 fifo_C_to_off_chip, B1_1, A2_1, A1_0, A1_1, A1_2, B2_0, B2_1,
                 B2_2, i0);
    }
  }
}
void compute_FT0_level1(float alpha, float beta,
                        hls::stream<float16> &fifo_B1_from_off_chip_to_S1,
                        hls::stream<float16> &fifo_A1_from_off_chip_to_S1,
                        hls::stream<float16> &fifo_A2_from_off_chip_to_S1,
                        hls::stream<float16> &fifo_B2_from_off_chip_to_S1,
                        hls::stream<float4> &fifo_C_from_off_chip_to_S0,
                        hls::stream<float4> &fifo_C_to_off_chip,
                        float B1[40][208], float A2[40][208], int i0, int j0,
                        float C_0[40][12], float C_1[40][12], float C_2[40][12],
                        float A1_0[240][208], float A1_1[240][208],
                        float A1_2[240][208], float B2_0[240][208],
                        float B2_1[240][208], float B2_2[240][208]) {
#pragma HLS inline off
#pragma HLS dataflow
  read_C_FT0(C_0, fifo_C_from_off_chip_to_S0, j0 + 1, i0);
  read_A1_FT0(A1_0, fifo_A1_from_off_chip_to_S1, j0 + 1, i0);
  read_B2_FT0(B2_0, fifo_B2_from_off_chip_to_S1, j0 + 1, i0);
  task0_intra(alpha, beta, B1, A2, A1_1, B2_1, i0, C_1, j0);
  task1_intra(alpha, beta, B1, A2, A1_1, B2_1, i0, C_1, j0);
  write_C_FT0(C_2, fifo_C_to_off_chip, j0 - 1, i0);
}

void FT0_level1(float alpha, float beta,
                hls::stream<float16> &fifo_B1_from_off_chip_to_S1,
                hls::stream<float16> &fifo_A1_from_off_chip_to_S1,
                hls::stream<float16> &fifo_A2_from_off_chip_to_S1,
                hls::stream<float16> &fifo_B2_from_off_chip_to_S1,
                hls::stream<float4> &fifo_C_from_off_chip_to_S0,
                hls::stream<float4> &fifo_C_to_off_chip, float B1[40][208],
                float A2[40][208], float A1_0[240][208], float A1_1[240][208],
                float A1_2[240][208], float B2_0[240][208],
                float B2_1[240][208], float B2_2[240][208], int i0) {
#pragma HLS inline off
  float C_0[40][12];
  // FT0
#pragma HLS array_partition variable = C_0 cyclic factor = 40 dim = 1
#pragma HLS array_partition variable = C_0 cyclic factor = 12 dim = 2
  float C_1[40][12];
  // FT0
#pragma HLS array_partition variable = C_1 cyclic factor = 40 dim = 1
#pragma HLS array_partition variable = C_1 cyclic factor = 12 dim = 2
  float C_2[40][12];
  // FT0
#pragma HLS array_partition variable = C_2 cyclic factor = 40 dim = 1
#pragma HLS array_partition variable = C_2 cyclic factor = 12 dim = 2
  read_C_FT0(C_0, fifo_C_from_off_chip_to_S0, 0, i0);
  read_A1_FT0(A1_0, fifo_A1_from_off_chip_to_S1, 0, i0);
  read_B2_FT0(B2_0, fifo_B2_from_off_chip_to_S1, 0, i0);
  for (int j0 = 0; j0 < 20; j0++) {

    if (j0 % 3 == 0) {
      //     read_C_FT0(C_1, fifo_C_from_off_chip_to_S0, j0+1, i0);
      //     read_A1_FT0(A1_1, fifo_A1_from_off_chip_to_S1, j0+1, i0);
      //     read_B2_FT0(B2_1, fifo_B2_from_off_chip_to_S1, j0+1, i0);
      //     task0_intra(alpha, beta, B1, A2, A1_0, B2_0, i0, C_0, j0);
      //     task1_intra(alpha, beta, B1, A2, A1_0, B2_0, i0, C_0, j0);
      //     write_C_FT0(C_2, fifo_C_to_off_chip, j0-1, i0);
      compute_FT0_level1(
          alpha, beta, fifo_B1_from_off_chip_to_S1, fifo_A1_from_off_chip_to_S1,
          fifo_A2_from_off_chip_to_S1, fifo_B2_from_off_chip_to_S1,
          fifo_C_from_off_chip_to_S0, fifo_C_to_off_chip, B1, A2, i0, j0, C_1,
          C_0, C_2, A1_1, A1_0, A1_2, B2_1, B2_0, B2_2);
    } else if (j0 % 3 == 1) {
      //     read_C_FT0(C_2, fifo_C_from_off_chip_to_S0, j0+1, i0);
      //     read_A1_FT0(A1_2, fifo_A1_from_off_chip_to_S1, j0+1, i0);
      //     read_B2_FT0(B2_2, fifo_B2_from_off_chip_to_S1, j0+1, i0);
      //     task0_intra(alpha, beta, B1, A2, A1_1, B2_1, i0, C_1, j0);
      //     task1_intra(alpha, beta, B1, A2, A1_1, B2_1, i0, C_1, j0);
      //     write_C_FT0(C_0, fifo_C_to_off_chip, j0-1, i0);
      compute_FT0_level1(
          alpha, beta, fifo_B1_from_off_chip_to_S1, fifo_A1_from_off_chip_to_S1,
          fifo_A2_from_off_chip_to_S1, fifo_B2_from_off_chip_to_S1,
          fifo_C_from_off_chip_to_S0, fifo_C_to_off_chip, B1, A2, i0, j0, C_2,
          C_1, C_0, A1_2, A1_1, A1_0, B2_2, B2_1, B2_0);
    } else if (j0 % 3 == 2) {
      //     read_C_FT0(C_0, fifo_C_from_off_chip_to_S0, j0+1, i0);
      //     read_A1_FT0(A1_0, fifo_A1_from_off_chip_to_S1, j0+1, i0);
      //     read_B2_FT0(B2_0, fifo_B2_from_off_chip_to_S1, j0+1, i0);
      //     task0_intra(alpha, beta, B1, A2, A1_2, B2_2, i0, C_2, j0);
      //     task1_intra(alpha, beta, B1, A2, A1_2, B2_2, i0, C_2, j0);
      //     write_C_FT0(C_1, fifo_C_to_off_chip, j0-1, i0);
      compute_FT0_level1(
          alpha, beta, fifo_B1_from_off_chip_to_S1, fifo_A1_from_off_chip_to_S1,
          fifo_A2_from_off_chip_to_S1, fifo_B2_from_off_chip_to_S1,
          fifo_C_from_off_chip_to_S0, fifo_C_to_off_chip, B1, A2, i0, j0, C_0,
          C_2, C_1, A1_0, A1_2, A1_1, B2_0, B2_2, B2_1);
    }
  }
  write_C_FT0(C_1, fifo_C_to_off_chip, 19, i0);
}
void task0_intra(float alpha, float beta, float B1[40][208], float A2[40][208],
                 float A1[240][208], float B2[240][208], int i0,
                 float C[40][12], int j0) {
#pragma HLS inline off
  int i;
  int j;
  for (int i1 = 0; i1 < 40; i1++) {
#pragma HLS unroll
    for (int j1 = 0; j1 < 12; j1++) {
#pragma HLS unroll
      i = i0 * 40 + i1;
      j = j0 * 12 + j1;
      C[i1][j1] = C[i1][j1] * beta;
    }
  }
}

void task1_intra(float alpha, float beta, float B1[40][208], float A2[40][208],
                 float A1[240][208], float B2[240][208], int i0,
                 float C[40][12], int j0) {
#pragma HLS inline off
  int i;
  int j;
  int k;
  for (int k0 = 0; k0 < 52; k0++) {
#pragma HLS pipeline II = 2
    for (int i1 = 0; i1 < 40; i1++) {
#pragma HLS unroll
      for (int j1 = 0; j1 < 12; j1++) {
#pragma HLS unroll
        for (int k1 = 0; k1 < 4; k1++) {
#pragma HLS unroll
          i = i0 * 40 + i1;
          j = j0 * 12 + j1;
          k = k0 * 4 + k1;
          C[i1][j1] = C[i1][j1] + A1[j][k] * alpha * B1[i1][k] +
                      B2[j][k] * alpha * A2[i1][k];
        }
      }
    }
  }
}

void read_B1_FT0(float B1[40][208],
                 hls::stream<float16> &fifo_B1_from_off_chip_to_S1, int i0) {
#pragma HLS inline off
  if (i0 >= 6) {
    return;
  }
  for (int d0 = 0; d0 < 40; d0++) {
    for (int d1 = 0; d1 < 208; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_B1_from_off_chip_to_S1.read();
      B1[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      B1[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      B1[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      B1[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      B1[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      B1[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      B1[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      B1[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      B1[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      B1[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      B1[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      B1[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      B1[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      B1[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      B1[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      B1[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}

void read_A2_FT0(float A2[40][208],
                 hls::stream<float16> &fifo_A2_from_off_chip_to_S1, int i0) {
#pragma HLS inline off
  if (i0 >= 6) {
    return;
  }
  for (int d0 = 0; d0 < 40; d0++) {
    for (int d1 = 0; d1 < 208; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_A2_from_off_chip_to_S1.read();
      A2[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      A2[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      A2[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      A2[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      A2[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      A2[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      A2[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      A2[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      A2[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      A2[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      A2[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      A2[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      A2[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      A2[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      A2[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      A2[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}

void read_C_FT0(float C[40][12],
                hls::stream<float4> &fifo_C_from_off_chip_to_S0, int j0,
                int i0) {
#pragma HLS inline off
  if (i0 >= 6 || j0 >= 20) {
    return;
  }
  for (int d0 = 0; d0 < 40; d0++) {
    for (int d1 = 0; d1 < 12; d1 += 4) {
#pragma HLS pipeline II = 1
      float4 tmp_fifo = fifo_C_from_off_chip_to_S0.read();
      C[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      C[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      C[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      C[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
    }
  }
}

void read_A1_FT0(float A1[240][208],
                 hls::stream<float16> &fifo_A1_from_off_chip_to_S1, int j0,
                 int i0) {
#pragma HLS inline off
  if (i0 > 0 || j0 >= 20) {
    return;
  }
  for (int d0 = 0; d0 < 12; d0++) {
    for (int d1 = 0; d1 < 208; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_A1_from_off_chip_to_S1.read();
      A1[d0 + j0 * 12][d1 + 0 + 0] = tmp_fifo[0];
      A1[d0 + j0 * 12][d1 + 0 + 1] = tmp_fifo[1];
      A1[d0 + j0 * 12][d1 + 0 + 2] = tmp_fifo[2];
      A1[d0 + j0 * 12][d1 + 0 + 3] = tmp_fifo[3];
      A1[d0 + j0 * 12][d1 + 0 + 4] = tmp_fifo[4];
      A1[d0 + j0 * 12][d1 + 0 + 5] = tmp_fifo[5];
      A1[d0 + j0 * 12][d1 + 0 + 6] = tmp_fifo[6];
      A1[d0 + j0 * 12][d1 + 0 + 7] = tmp_fifo[7];
      A1[d0 + j0 * 12][d1 + 0 + 8] = tmp_fifo[8];
      A1[d0 + j0 * 12][d1 + 0 + 9] = tmp_fifo[9];
      A1[d0 + j0 * 12][d1 + 0 + 10] = tmp_fifo[10];
      A1[d0 + j0 * 12][d1 + 0 + 11] = tmp_fifo[11];
      A1[d0 + j0 * 12][d1 + 0 + 12] = tmp_fifo[12];
      A1[d0 + j0 * 12][d1 + 0 + 13] = tmp_fifo[13];
      A1[d0 + j0 * 12][d1 + 0 + 14] = tmp_fifo[14];
      A1[d0 + j0 * 12][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}

void read_B2_FT0(float B2[240][208],
                 hls::stream<float16> &fifo_B2_from_off_chip_to_S1, int j0,
                 int i0) {
#pragma HLS inline off
  if (i0 > 0 || j0 >= 20) {
    return;
  }
  for (int d0 = 0; d0 < 12; d0++) {
    for (int d1 = 0; d1 < 208; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_B2_from_off_chip_to_S1.read();
      B2[d0 + j0 * 12][d1 + 0 + 0] = tmp_fifo[0];
      B2[d0 + j0 * 12][d1 + 0 + 1] = tmp_fifo[1];
      B2[d0 + j0 * 12][d1 + 0 + 2] = tmp_fifo[2];
      B2[d0 + j0 * 12][d1 + 0 + 3] = tmp_fifo[3];
      B2[d0 + j0 * 12][d1 + 0 + 4] = tmp_fifo[4];
      B2[d0 + j0 * 12][d1 + 0 + 5] = tmp_fifo[5];
      B2[d0 + j0 * 12][d1 + 0 + 6] = tmp_fifo[6];
      B2[d0 + j0 * 12][d1 + 0 + 7] = tmp_fifo[7];
      B2[d0 + j0 * 12][d1 + 0 + 8] = tmp_fifo[8];
      B2[d0 + j0 * 12][d1 + 0 + 9] = tmp_fifo[9];
      B2[d0 + j0 * 12][d1 + 0 + 10] = tmp_fifo[10];
      B2[d0 + j0 * 12][d1 + 0 + 11] = tmp_fifo[11];
      B2[d0 + j0 * 12][d1 + 0 + 12] = tmp_fifo[12];
      B2[d0 + j0 * 12][d1 + 0 + 13] = tmp_fifo[13];
      B2[d0 + j0 * 12][d1 + 0 + 14] = tmp_fifo[14];
      B2[d0 + j0 * 12][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}

void write_C_FT0(float C[40][12], hls::stream<float4> &fifo_C_to_off_chip,
                 int j0, int i0) {
#pragma HLS inline off
  if (j0 < 0 || i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 40; d0++) {
    for (int d1 = 0; d1 < 12; d1 += 4) {
#pragma HLS pipeline II = 1
      float4 tmp_fifo;
      tmp_fifo[0] = C[d0 + 0][d1 + 0 + 0];
      tmp_fifo[1] = C[d0 + 0][d1 + 0 + 1];
      tmp_fifo[2] = C[d0 + 0][d1 + 0 + 2];
      tmp_fifo[3] = C[d0 + 0][d1 + 0 + 3];
      fifo_C_to_off_chip.write(tmp_fifo);
    }
  }
}

// extern "C"{
void kernel_nlp(float alpha, float beta, float4 vC_for_task0[14400],
                float16 vA1_for_task1[3120], float16 vB1_for_task1[3120],
                float16 vB2_for_task1[3120], float16 vA2_for_task1[3120]) {

#pragma HLS INTERFACE m_axi port = alpha offset = slave bundle = kernel_alpha
#pragma HLS INTERFACE m_axi port = beta offset = slave bundle = kernel_beta
#pragma HLS INTERFACE m_axi port = vC_for_task0 offset = slave bundle =        \
    kernel_vC_for_task0
#pragma HLS INTERFACE m_axi port = vA1_for_task1 offset = slave bundle =       \
    kernel_vA1_for_task1
#pragma HLS INTERFACE m_axi port = vB1_for_task1 offset = slave bundle =       \
    kernel_vB1_for_task1
#pragma HLS INTERFACE m_axi port = vB2_for_task1 offset = slave bundle =       \
    kernel_vB2_for_task1
#pragma HLS INTERFACE m_axi port = vA2_for_task1 offset = slave bundle =       \
    kernel_vA2_for_task1
#pragma HLS INTERFACE s_axilite port = alpha bundle = control
#pragma HLS INTERFACE s_axilite port = beta bundle = control
#pragma HLS INTERFACE s_axilite port = vC_for_task0 bundle = control
#pragma HLS INTERFACE s_axilite port = vA1_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vB1_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vB2_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vA2_for_task1 bundle = control
#pragma HLS DATA_PACK VARIABLE = alpha
#pragma HLS DATA_PACK VARIABLE = beta
#pragma HLS DATA_PACK VARIABLE = vC_for_task0
#pragma HLS DATA_PACK VARIABLE = vA1_for_task1
#pragma HLS DATA_PACK VARIABLE = vB1_for_task1
#pragma HLS DATA_PACK VARIABLE = vB2_for_task1
#pragma HLS DATA_PACK VARIABLE = vA2_for_task1
#pragma HLS INTERFACE s_axilite port = return bundle = control

#pragma HLS dataflow

  hls::stream<float16> fifo_B1_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_B1_from_off_chip_to_S1 depth = 512
  hls::stream<float16> fifo_A1_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_A1_from_off_chip_to_S1 depth = 512
  hls::stream<float16> fifo_A2_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_A2_from_off_chip_to_S1 depth = 512
  hls::stream<float16> fifo_B2_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_B2_from_off_chip_to_S1 depth = 512
  hls::stream<float4> fifo_C_from_off_chip_to_S0;
#pragma HLS stream variable = fifo_C_from_off_chip_to_S0 depth = 512
  hls::stream<float4> fifo_C_to_off_chip;
#pragma HLS stream variable = fifo_C_to_off_chip depth = 512

  load_vB1_for_task1(fifo_B1_from_off_chip_to_S1, vB1_for_task1);
  load_vA1_for_task1(fifo_A1_from_off_chip_to_S1, vA1_for_task1);
  load_vA2_for_task1(fifo_A2_from_off_chip_to_S1, vA2_for_task1);
  load_vB2_for_task1(fifo_B2_from_off_chip_to_S1, vB2_for_task1);
  load_vC_for_task0(fifo_C_from_off_chip_to_S0, vC_for_task0);

  FT0_level0(alpha, beta, fifo_B1_from_off_chip_to_S1,
             fifo_A1_from_off_chip_to_S1, fifo_A2_from_off_chip_to_S1,
             fifo_B2_from_off_chip_to_S1, fifo_C_from_off_chip_to_S0,
             fifo_C_to_off_chip);

  store_vC_for_task0(fifo_C_to_off_chip, vC_for_task0);
}
//}
