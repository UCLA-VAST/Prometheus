#include "output.h"

#define READ_RANGE(Arr, data_size, l)                                          \
  (Arr.data.range((data_size) * (l) + (data_size) - 1, (data_size) * (l)))

/****************************************************
 This file was automatically generated by Prometheus
****************************************************/
void load_vA1_for_task0(hls::stream<float16> &fifo_A1_from_off_chip_to_S0,
                        float16 vA1[10000]) {
#pragma HLS inline off
  for (int i = 0; i < 10000; i++) {
#pragma HLS pipeline II = 1
    fifo_A1_from_off_chip_to_S0.write(vA1[i]);
  }
}
void load_vA1_for_task0(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A1_from_off_chip_to_S0,
    float16 vA1[10000]) {
#pragma HLS inline off
  for (int i = 0; i < 10000; i++) {
#pragma HLS pipeline II = 1
    float16 vA1_off = vA1[i];
    ap_axiu<512, 0, 0, 0> vA1_on;
    vA1_on.data.range(31, 0) = *(uint32_t *)(&vA1_off[0]);
    vA1_on.data.range(63, 32) = *(uint32_t *)(&vA1_off[1]);
    vA1_on.data.range(95, 64) = *(uint32_t *)(&vA1_off[2]);
    vA1_on.data.range(127, 96) = *(uint32_t *)(&vA1_off[3]);
    vA1_on.data.range(159, 128) = *(uint32_t *)(&vA1_off[4]);
    vA1_on.data.range(191, 160) = *(uint32_t *)(&vA1_off[5]);
    vA1_on.data.range(223, 192) = *(uint32_t *)(&vA1_off[6]);
    vA1_on.data.range(255, 224) = *(uint32_t *)(&vA1_off[7]);
    vA1_on.data.range(287, 256) = *(uint32_t *)(&vA1_off[8]);
    vA1_on.data.range(319, 288) = *(uint32_t *)(&vA1_off[9]);
    vA1_on.data.range(351, 320) = *(uint32_t *)(&vA1_off[10]);
    vA1_on.data.range(383, 352) = *(uint32_t *)(&vA1_off[11]);
    vA1_on.data.range(415, 384) = *(uint32_t *)(&vA1_off[12]);
    vA1_on.data.range(447, 416) = *(uint32_t *)(&vA1_off[13]);
    vA1_on.data.range(479, 448) = *(uint32_t *)(&vA1_off[14]);
    vA1_on.data.range(511, 480) = *(uint32_t *)(&vA1_off[15]);
    fifo_A1_from_off_chip_to_S0.write(vA1_on);
  }
}
void load_vB_for_task0(hls::stream<float16> &fifo_B_from_off_chip_to_S0,
                       float16 vB[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    fifo_B_from_off_chip_to_S0.write(vB[i]);
  }
}
void load_vB_for_task0(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_B_from_off_chip_to_S0,
    float16 vB[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    float16 vB_off = vB[i];
    ap_axiu<512, 0, 0, 0> vB_on;
    vB_on.data.range(31, 0) = *(uint32_t *)(&vB_off[0]);
    vB_on.data.range(63, 32) = *(uint32_t *)(&vB_off[1]);
    vB_on.data.range(95, 64) = *(uint32_t *)(&vB_off[2]);
    vB_on.data.range(127, 96) = *(uint32_t *)(&vB_off[3]);
    vB_on.data.range(159, 128) = *(uint32_t *)(&vB_off[4]);
    vB_on.data.range(191, 160) = *(uint32_t *)(&vB_off[5]);
    vB_on.data.range(223, 192) = *(uint32_t *)(&vB_off[6]);
    vB_on.data.range(255, 224) = *(uint32_t *)(&vB_off[7]);
    vB_on.data.range(287, 256) = *(uint32_t *)(&vB_off[8]);
    vB_on.data.range(319, 288) = *(uint32_t *)(&vB_off[9]);
    vB_on.data.range(351, 320) = *(uint32_t *)(&vB_off[10]);
    vB_on.data.range(383, 352) = *(uint32_t *)(&vB_off[11]);
    vB_on.data.range(415, 384) = *(uint32_t *)(&vB_off[12]);
    vB_on.data.range(447, 416) = *(uint32_t *)(&vB_off[13]);
    vB_on.data.range(479, 448) = *(uint32_t *)(&vB_off[14]);
    vB_on.data.range(511, 480) = *(uint32_t *)(&vB_off[15]);
    fifo_B_from_off_chip_to_S0.write(vB_on);
  }
}
void load_vx1_for_task0(hls::stream<float4> &fifo_x1_from_off_chip_to_S0,
                        float4 vx1[100]) {
#pragma HLS inline off
  for (int i = 0; i < 100; i++) {
#pragma HLS pipeline II = 1
    fifo_x1_from_off_chip_to_S0.write(vx1[i]);
  }
}
void load_vx1_for_task0(
    hls::stream<ap_axiu<128, 0, 0, 0>> &fifo_x1_from_off_chip_to_S0,
    float4 vx1[100]) {
#pragma HLS inline off
  for (int i = 0; i < 100; i++) {
#pragma HLS pipeline II = 1
    float4 vx1_off = vx1[i];
    ap_axiu<128, 0, 0, 0> vx1_on;
    vx1_on.data.range(31, 0) = *(uint32_t *)(&vx1_off[0]);
    vx1_on.data.range(63, 32) = *(uint32_t *)(&vx1_off[1]);
    vx1_on.data.range(95, 64) = *(uint32_t *)(&vx1_off[2]);
    vx1_on.data.range(127, 96) = *(uint32_t *)(&vx1_off[3]);
    fifo_x1_from_off_chip_to_S0.write(vx1_on);
  }
}
void load_vC_for_task1(hls::stream<float16> &fifo_C_from_off_chip_to_S1,
                       float16 vC[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    fifo_C_from_off_chip_to_S1.write(vC[i]);
  }
}
void load_vC_for_task1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_C_from_off_chip_to_S1,
    float16 vC[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    float16 vC_off = vC[i];
    ap_axiu<512, 0, 0, 0> vC_on;
    vC_on.data.range(31, 0) = *(uint32_t *)(&vC_off[0]);
    vC_on.data.range(63, 32) = *(uint32_t *)(&vC_off[1]);
    vC_on.data.range(95, 64) = *(uint32_t *)(&vC_off[2]);
    vC_on.data.range(127, 96) = *(uint32_t *)(&vC_off[3]);
    vC_on.data.range(159, 128) = *(uint32_t *)(&vC_off[4]);
    vC_on.data.range(191, 160) = *(uint32_t *)(&vC_off[5]);
    vC_on.data.range(223, 192) = *(uint32_t *)(&vC_off[6]);
    vC_on.data.range(255, 224) = *(uint32_t *)(&vC_off[7]);
    vC_on.data.range(287, 256) = *(uint32_t *)(&vC_off[8]);
    vC_on.data.range(319, 288) = *(uint32_t *)(&vC_off[9]);
    vC_on.data.range(351, 320) = *(uint32_t *)(&vC_off[10]);
    vC_on.data.range(383, 352) = *(uint32_t *)(&vC_off[11]);
    vC_on.data.range(415, 384) = *(uint32_t *)(&vC_off[12]);
    vC_on.data.range(447, 416) = *(uint32_t *)(&vC_off[13]);
    vC_on.data.range(479, 448) = *(uint32_t *)(&vC_off[14]);
    vC_on.data.range(511, 480) = *(uint32_t *)(&vC_off[15]);
    fifo_C_from_off_chip_to_S1.write(vC_on);
  }
}
void load_vx2_for_task1(hls::stream<float16> &fifo_x2_from_off_chip_to_S1,
                        float16 vx2[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    fifo_x2_from_off_chip_to_S1.write(vx2[i]);
  }
}
void load_vx2_for_task1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_x2_from_off_chip_to_S1,
    float16 vx2[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    float16 vx2_off = vx2[i];
    ap_axiu<512, 0, 0, 0> vx2_on;
    vx2_on.data.range(31, 0) = *(uint32_t *)(&vx2_off[0]);
    vx2_on.data.range(63, 32) = *(uint32_t *)(&vx2_off[1]);
    vx2_on.data.range(95, 64) = *(uint32_t *)(&vx2_off[2]);
    vx2_on.data.range(127, 96) = *(uint32_t *)(&vx2_off[3]);
    vx2_on.data.range(159, 128) = *(uint32_t *)(&vx2_off[4]);
    vx2_on.data.range(191, 160) = *(uint32_t *)(&vx2_off[5]);
    vx2_on.data.range(223, 192) = *(uint32_t *)(&vx2_off[6]);
    vx2_on.data.range(255, 224) = *(uint32_t *)(&vx2_off[7]);
    vx2_on.data.range(287, 256) = *(uint32_t *)(&vx2_off[8]);
    vx2_on.data.range(319, 288) = *(uint32_t *)(&vx2_off[9]);
    vx2_on.data.range(351, 320) = *(uint32_t *)(&vx2_off[10]);
    vx2_on.data.range(383, 352) = *(uint32_t *)(&vx2_off[11]);
    vx2_on.data.range(415, 384) = *(uint32_t *)(&vx2_off[12]);
    vx2_on.data.range(447, 416) = *(uint32_t *)(&vx2_off[13]);
    vx2_on.data.range(479, 448) = *(uint32_t *)(&vx2_off[14]);
    vx2_on.data.range(511, 480) = *(uint32_t *)(&vx2_off[15]);
    fifo_x2_from_off_chip_to_S1.write(vx2_on);
  }
}
void load_vA2_for_task1(hls::stream<float16> &fifo_A2_from_off_chip_to_S1,
                        float16 vA2[10000]) {
#pragma HLS inline off
  for (int i = 0; i < 10000; i++) {
#pragma HLS pipeline II = 1
    fifo_A2_from_off_chip_to_S1.write(vA2[i]);
  }
}
void load_vA2_for_task1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A2_from_off_chip_to_S1,
    float16 vA2[10000]) {
#pragma HLS inline off
  for (int i = 0; i < 10000; i++) {
#pragma HLS pipeline II = 1
    float16 vA2_off = vA2[i];
    ap_axiu<512, 0, 0, 0> vA2_on;
    vA2_on.data.range(31, 0) = *(uint32_t *)(&vA2_off[0]);
    vA2_on.data.range(63, 32) = *(uint32_t *)(&vA2_off[1]);
    vA2_on.data.range(95, 64) = *(uint32_t *)(&vA2_off[2]);
    vA2_on.data.range(127, 96) = *(uint32_t *)(&vA2_off[3]);
    vA2_on.data.range(159, 128) = *(uint32_t *)(&vA2_off[4]);
    vA2_on.data.range(191, 160) = *(uint32_t *)(&vA2_off[5]);
    vA2_on.data.range(223, 192) = *(uint32_t *)(&vA2_off[6]);
    vA2_on.data.range(255, 224) = *(uint32_t *)(&vA2_off[7]);
    vA2_on.data.range(287, 256) = *(uint32_t *)(&vA2_off[8]);
    vA2_on.data.range(319, 288) = *(uint32_t *)(&vA2_off[9]);
    vA2_on.data.range(351, 320) = *(uint32_t *)(&vA2_off[10]);
    vA2_on.data.range(383, 352) = *(uint32_t *)(&vA2_off[11]);
    vA2_on.data.range(415, 384) = *(uint32_t *)(&vA2_off[12]);
    vA2_on.data.range(447, 416) = *(uint32_t *)(&vA2_off[13]);
    vA2_on.data.range(479, 448) = *(uint32_t *)(&vA2_off[14]);
    vA2_on.data.range(511, 480) = *(uint32_t *)(&vA2_off[15]);
    fifo_A2_from_off_chip_to_S1.write(vA2_on);
  }
}
void store_vx2_for_task1(hls::stream<float16> &fifo_x2_to_off_chip,
                         float16 vx2[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    vx2[i] = fifo_x2_to_off_chip.read();
  }
}
void store_vx2_for_task1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_x2_to_off_chip, float16 vx2[25]) {
#pragma HLS inline off
  for (int i = 0; i < 25; i++) {
#pragma HLS pipeline II = 1
    float16 vx2_off;
    ap_axiu<512, 0, 0, 0> vx2_on = fifo_x2_to_off_chip.read();
    uint32_t vx2_tmp[16];
    vx2_tmp[0] = vx2_on.data.range(31, 0);
    vx2_off[0] = *(float *)(&vx2_tmp[0]);
    vx2_tmp[1] = vx2_on.data.range(63, 32);
    vx2_off[1] = *(float *)(&vx2_tmp[1]);
    vx2_tmp[2] = vx2_on.data.range(95, 64);
    vx2_off[2] = *(float *)(&vx2_tmp[2]);
    vx2_tmp[3] = vx2_on.data.range(127, 96);
    vx2_off[3] = *(float *)(&vx2_tmp[3]);
    vx2_tmp[4] = vx2_on.data.range(159, 128);
    vx2_off[4] = *(float *)(&vx2_tmp[4]);
    vx2_tmp[5] = vx2_on.data.range(191, 160);
    vx2_off[5] = *(float *)(&vx2_tmp[5]);
    vx2_tmp[6] = vx2_on.data.range(223, 192);
    vx2_off[6] = *(float *)(&vx2_tmp[6]);
    vx2_tmp[7] = vx2_on.data.range(255, 224);
    vx2_off[7] = *(float *)(&vx2_tmp[7]);
    vx2_tmp[8] = vx2_on.data.range(287, 256);
    vx2_off[8] = *(float *)(&vx2_tmp[8]);
    vx2_tmp[9] = vx2_on.data.range(319, 288);
    vx2_off[9] = *(float *)(&vx2_tmp[9]);
    vx2_tmp[10] = vx2_on.data.range(351, 320);
    vx2_off[10] = *(float *)(&vx2_tmp[10]);
    vx2_tmp[11] = vx2_on.data.range(383, 352);
    vx2_off[11] = *(float *)(&vx2_tmp[11]);
    vx2_tmp[12] = vx2_on.data.range(415, 384);
    vx2_off[12] = *(float *)(&vx2_tmp[12]);
    vx2_tmp[13] = vx2_on.data.range(447, 416);
    vx2_off[13] = *(float *)(&vx2_tmp[13]);
    vx2_tmp[14] = vx2_on.data.range(479, 448);
    vx2_off[14] = *(float *)(&vx2_tmp[14]);
    vx2_tmp[15] = vx2_on.data.range(511, 480);
    vx2_off[15] = *(float *)(&vx2_tmp[15]);
    vx2[i] = vx2_off;
  }
}
void store_vx1_for_task0(hls::stream<float4> &fifo_x1_to_off_chip,
                         float4 vx1[100]) {
#pragma HLS inline off
  for (int i = 0; i < 100; i++) {
#pragma HLS pipeline II = 1
    vx1[i] = fifo_x1_to_off_chip.read();
  }
}
void store_vx1_for_task0(
    hls::stream<ap_axiu<128, 0, 0, 0>> &fifo_x1_to_off_chip, float4 vx1[100]) {
#pragma HLS inline off
  for (int i = 0; i < 100; i++) {
#pragma HLS pipeline II = 1
    float4 vx1_off;
    ap_axiu<128, 0, 0, 0> vx1_on = fifo_x1_to_off_chip.read();
    uint32_t vx1_tmp[4];
    vx1_tmp[0] = vx1_on.data.range(31, 0);
    vx1_off[0] = *(float *)(&vx1_tmp[0]);
    vx1_tmp[1] = vx1_on.data.range(63, 32);
    vx1_off[1] = *(float *)(&vx1_tmp[1]);
    vx1_tmp[2] = vx1_on.data.range(95, 64);
    vx1_off[2] = *(float *)(&vx1_tmp[2]);
    vx1_tmp[3] = vx1_on.data.range(127, 96);
    vx1_off[3] = *(float *)(&vx1_tmp[3]);
    vx1[i] = vx1_off;
  }
}
void compute_FT0_level0(hls::stream<float16> &fifo_A1_from_off_chip_to_S0,
                        hls::stream<float16> &fifo_B_from_off_chip_to_S0,
                        hls::stream<float4> &fifo_x1_from_off_chip_to_S0,
                        hls::stream<float4> &fifo_x1_to_off_chip, int i0,
                        float x1_0[4], float x1_1[4], float x1_2[4],
                        float A1_0[4][400], float A1_1[4][400],
                        float A1_2[4][400], float B[400]) {
#pragma HLS inline off
#pragma HLS dataflow
  read_x1_FT0(x1_0, fifo_x1_from_off_chip_to_S0, i0 + 1);
  read_A1_FT0(A1_0, fifo_A1_from_off_chip_to_S0, i0 + 1);
  task0_intra(x1_1, A1_1, B, i0);
  write_x1_FT0(x1_2, fifo_x1_to_off_chip, i0 - 1);
}
void FT0_level0(hls::stream<float16> &fifo_A1_from_off_chip_to_S0,
                hls::stream<float16> &fifo_B_from_off_chip_to_S0,
                hls::stream<float4> &fifo_x1_from_off_chip_to_S0,
                hls::stream<float4> &fifo_x1_to_off_chip) {
#pragma HLS inline off
  float x1_0[4];
  // FT0
#pragma HLS array_partition variable = x1_0 cyclic factor = 4 dim = 1
  float x1_1[4];
  // FT0
#pragma HLS array_partition variable = x1_1 cyclic factor = 4 dim = 1
  float x1_2[4];
  // FT0
#pragma HLS array_partition variable = x1_2 cyclic factor = 4 dim = 1
  float A1_0[4][400];
  // FT0
#pragma HLS array_partition variable = A1_0 cyclic factor = 4 dim = 1
#pragma HLS array_partition variable = A1_0 cyclic factor = 100 dim = 2
  float A1_1[4][400];
  // FT0
#pragma HLS array_partition variable = A1_1 cyclic factor = 4 dim = 1
#pragma HLS array_partition variable = A1_1 cyclic factor = 100 dim = 2
  float A1_2[4][400];
  // FT0
#pragma HLS array_partition variable = A1_2 cyclic factor = 4 dim = 1
#pragma HLS array_partition variable = A1_2 cyclic factor = 100 dim = 2
  float B[400];
#pragma HLS array_partition variable = B cyclic factor = 100 dim = 1
  read_B_FT0(B, fifo_B_from_off_chip_to_S0);
  read_x1_FT0(x1_0, fifo_x1_from_off_chip_to_S0, 0);
  read_A1_FT0(A1_0, fifo_A1_from_off_chip_to_S0, 0);
  for (int i0 = 0; i0 < 100; i0++) {
    if (i0 % 3 == 0) {
      //     read_x1_FT0(x1_1, fifo_x1_from_off_chip_to_S0, i0+1);
      //     read_A1_FT0(A1_1, fifo_A1_from_off_chip_to_S0, i0+1);
      //     task0_intra(x1_0, A1_0, B, i0);
      //     write_x1_FT0(x1_2, fifo_x1_to_off_chip, i0-1);
      compute_FT0_level0(fifo_A1_from_off_chip_to_S0,
                         fifo_B_from_off_chip_to_S0,
                         fifo_x1_from_off_chip_to_S0, fifo_x1_to_off_chip, i0,
                         x1_1, x1_0, x1_2, A1_1, A1_0, A1_2, B);
    } else if (i0 % 3 == 1) {
      //     read_x1_FT0(x1_2, fifo_x1_from_off_chip_to_S0, i0+1);
      //     read_A1_FT0(A1_2, fifo_A1_from_off_chip_to_S0, i0+1);
      //     task0_intra(x1_1, A1_1, B, i0);
      //     write_x1_FT0(x1_0, fifo_x1_to_off_chip, i0-1);
      compute_FT0_level0(fifo_A1_from_off_chip_to_S0,
                         fifo_B_from_off_chip_to_S0,
                         fifo_x1_from_off_chip_to_S0, fifo_x1_to_off_chip, i0,
                         x1_2, x1_1, x1_0, A1_2, A1_1, A1_0, B);
    } else if (i0 % 3 == 2) {
      //     read_x1_FT0(x1_0, fifo_x1_from_off_chip_to_S0, i0+1);
      //     read_A1_FT0(A1_0, fifo_A1_from_off_chip_to_S0, i0+1);
      //     task0_intra(x1_2, A1_2, B, i0);
      //     write_x1_FT0(x1_1, fifo_x1_to_off_chip, i0-1);
      compute_FT0_level0(fifo_A1_from_off_chip_to_S0,
                         fifo_B_from_off_chip_to_S0,
                         fifo_x1_from_off_chip_to_S0, fifo_x1_to_off_chip, i0,
                         x1_0, x1_2, x1_1, A1_0, A1_2, A1_1, B);
    }
  }
  write_x1_FT0(x1_0, fifo_x1_to_off_chip, 99);
}
void compute_FT1_level0(hls::stream<float16> &fifo_C_from_off_chip_to_S1,
                        hls::stream<float16> &fifo_x2_from_off_chip_to_S1,
                        hls::stream<float16> &fifo_A2_from_off_chip_to_S1,
                        hls::stream<float16> &fifo_x2_to_off_chip, int i0,
                        float x2_0[16], float x2_1[16], float x2_2[16],
                        float A2_0[400][16], float A2_1[400][16],
                        float A2_2[400][16], float C[400]) {
#pragma HLS inline off
#pragma HLS dataflow
  read_x2_FT1(x2_0, fifo_x2_from_off_chip_to_S1, i0 + 1);
  read_A2_FT1(A2_0, fifo_A2_from_off_chip_to_S1, i0 + 1);
  task1_intra(x2_1, A2_1, C, i0);
  write_x2_FT1(x2_2, fifo_x2_to_off_chip, i0 - 1);
}
void FT1_level0(hls::stream<float16> &fifo_C_from_off_chip_to_S1,
                hls::stream<float16> &fifo_x2_from_off_chip_to_S1,
                hls::stream<float16> &fifo_A2_from_off_chip_to_S1,
                hls::stream<float16> &fifo_x2_to_off_chip) {
#pragma HLS inline off
  float x2_0[16];
  // FT1
#pragma HLS array_partition variable = x2_0 cyclic factor = 16 dim = 1
  float x2_1[16];
  // FT1
#pragma HLS array_partition variable = x2_1 cyclic factor = 16 dim = 1
  float x2_2[16];
  // FT1
#pragma HLS array_partition variable = x2_2 cyclic factor = 16 dim = 1
  float A2_0[400][16];
  // FT1
#pragma HLS array_partition variable = A2_0 cyclic factor = 50 dim = 1
#pragma HLS array_partition variable = A2_0 cyclic factor = 16 dim = 2
  float A2_1[400][16];
  // FT1
#pragma HLS array_partition variable = A2_1 cyclic factor = 50 dim = 1
#pragma HLS array_partition variable = A2_1 cyclic factor = 16 dim = 2
  float A2_2[400][16];
  // FT1
#pragma HLS array_partition variable = A2_2 cyclic factor = 50 dim = 1
#pragma HLS array_partition variable = A2_2 cyclic factor = 16 dim = 2
  float C[400];
#pragma HLS array_partition variable = C cyclic factor = 50 dim = 1
  read_C_FT1(C, fifo_C_from_off_chip_to_S1);
  read_x2_FT1(x2_0, fifo_x2_from_off_chip_to_S1, 0);
  read_A2_FT1(A2_0, fifo_A2_from_off_chip_to_S1, 0);
  for (int i0 = 0; i0 < 25; i0++) {
    if (i0 % 3 == 0) {
      //     read_x2_FT1(x2_1, fifo_x2_from_off_chip_to_S1, i0+1);
      //     read_A2_FT1(A2_1, fifo_A2_from_off_chip_to_S1, i0+1);
      //     task1_intra(x2_0, A2_0, C, i0);
      //     write_x2_FT1(x2_2, fifo_x2_to_off_chip, i0-1);
      compute_FT1_level0(fifo_C_from_off_chip_to_S1,
                         fifo_x2_from_off_chip_to_S1,
                         fifo_A2_from_off_chip_to_S1, fifo_x2_to_off_chip, i0,
                         x2_1, x2_0, x2_2, A2_1, A2_0, A2_2, C);
    } else if (i0 % 3 == 1) {
      //     read_x2_FT1(x2_2, fifo_x2_from_off_chip_to_S1, i0+1);
      //     read_A2_FT1(A2_2, fifo_A2_from_off_chip_to_S1, i0+1);
      //     task1_intra(x2_1, A2_1, C, i0);
      //     write_x2_FT1(x2_0, fifo_x2_to_off_chip, i0-1);
      compute_FT1_level0(fifo_C_from_off_chip_to_S1,
                         fifo_x2_from_off_chip_to_S1,
                         fifo_A2_from_off_chip_to_S1, fifo_x2_to_off_chip, i0,
                         x2_2, x2_1, x2_0, A2_2, A2_1, A2_0, C);
    } else if (i0 % 3 == 2) {
      //     read_x2_FT1(x2_0, fifo_x2_from_off_chip_to_S1, i0+1);
      //     read_A2_FT1(A2_0, fifo_A2_from_off_chip_to_S1, i0+1);
      //     task1_intra(x2_2, A2_2, C, i0);
      //     write_x2_FT1(x2_1, fifo_x2_to_off_chip, i0-1);
      compute_FT1_level0(fifo_C_from_off_chip_to_S1,
                         fifo_x2_from_off_chip_to_S1,
                         fifo_A2_from_off_chip_to_S1, fifo_x2_to_off_chip, i0,
                         x2_0, x2_2, x2_1, A2_0, A2_2, A2_1, C);
    }
  }
  write_x2_FT1(x2_0, fifo_x2_to_off_chip, 24);
}
void task0_intra(float x1[4], float A1[4][400], float B[400], int i0) {
#pragma HLS inline off
  int i;
  int j;
  for (int j0 = 0; j0 < 4; j0++) {
#pragma HLS pipeline II = 2
    for (int i1 = 0; i1 < 4; i1++) {
#pragma HLS unroll
      for (int j1 = 0; j1 < 100; j1++) {
#pragma HLS unroll
        i = i0 * 4 + i1;
        j = j0 * 100 + j1;
        x1[i1] = x1[i1] + A1[i1][j] * B[j];
      }
    }
  }
}
void task1_intra(float x2[16], float A2[400][16], float C[400], int i0) {
#pragma HLS inline off
  int i;
  int j;
  for (int j0 = 0; j0 < 8; j0++) {
#pragma HLS pipeline II = 2
    for (int i1 = 0; i1 < 16; i1++) {
#pragma HLS unroll
      for (int j1 = 0; j1 < 50; j1++) {
#pragma HLS unroll
        i = i0 * 16 + i1;
        j = j0 * 50 + j1;
        x2[i1] = x2[i1] + A2[j][i1] * C[j];
      }
    }
  }
}
void read_B_FT0(float B[400],
                hls::stream<float16> &fifo_B_from_off_chip_to_S0) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 400; d0 += 16) {
#pragma HLS pipeline II = 1
    float16 tmp_fifo = fifo_B_from_off_chip_to_S0.read();
    B[d0 + 0 + 0] = tmp_fifo[0];
    B[d0 + 0 + 1] = tmp_fifo[1];
    B[d0 + 0 + 2] = tmp_fifo[2];
    B[d0 + 0 + 3] = tmp_fifo[3];
    B[d0 + 0 + 4] = tmp_fifo[4];
    B[d0 + 0 + 5] = tmp_fifo[5];
    B[d0 + 0 + 6] = tmp_fifo[6];
    B[d0 + 0 + 7] = tmp_fifo[7];
    B[d0 + 0 + 8] = tmp_fifo[8];
    B[d0 + 0 + 9] = tmp_fifo[9];
    B[d0 + 0 + 10] = tmp_fifo[10];
    B[d0 + 0 + 11] = tmp_fifo[11];
    B[d0 + 0 + 12] = tmp_fifo[12];
    B[d0 + 0 + 13] = tmp_fifo[13];
    B[d0 + 0 + 14] = tmp_fifo[14];
    B[d0 + 0 + 15] = tmp_fifo[15];
  }
}
void read_B_FT0(
    float B[400],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_B_from_off_chip_to_S0) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 400; d0 += 16) {
#pragma HLS pipeline II = 1
    ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_B_from_off_chip_to_S0.read();
    uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
    B[d0 + 0 + 0] = *(float *)(&tmp_0);
    uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
    B[d0 + 0 + 1] = *(float *)(&tmp_1);
    uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
    B[d0 + 0 + 2] = *(float *)(&tmp_2);
    uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
    B[d0 + 0 + 3] = *(float *)(&tmp_3);
    uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
    B[d0 + 0 + 4] = *(float *)(&tmp_4);
    uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
    B[d0 + 0 + 5] = *(float *)(&tmp_5);
    uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
    B[d0 + 0 + 6] = *(float *)(&tmp_6);
    uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
    B[d0 + 0 + 7] = *(float *)(&tmp_7);
    uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
    B[d0 + 0 + 8] = *(float *)(&tmp_8);
    uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
    B[d0 + 0 + 9] = *(float *)(&tmp_9);
    uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
    B[d0 + 0 + 10] = *(float *)(&tmp_10);
    uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
    B[d0 + 0 + 11] = *(float *)(&tmp_11);
    uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
    B[d0 + 0 + 12] = *(float *)(&tmp_12);
    uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
    B[d0 + 0 + 13] = *(float *)(&tmp_13);
    uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
    B[d0 + 0 + 14] = *(float *)(&tmp_14);
    uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
    B[d0 + 0 + 15] = *(float *)(&tmp_15);
  }
}
void read_x1_FT0(float x1[4], hls::stream<float4> &fifo_x1_from_off_chip_to_S0,
                 int i0) {
#pragma HLS inline off
  if (i0 >= 100) {
    return;
  }
  for (int d0 = 0; d0 < 4; d0 += 4) {
#pragma HLS pipeline II = 1
    float4 tmp_fifo = fifo_x1_from_off_chip_to_S0.read();
    x1[d0 + 0 + 0] = tmp_fifo[0];
    x1[d0 + 0 + 1] = tmp_fifo[1];
    x1[d0 + 0 + 2] = tmp_fifo[2];
    x1[d0 + 0 + 3] = tmp_fifo[3];
  }
}
void read_x1_FT0(
    float x1[4],
    hls::stream<ap_axiu<128, 0, 0, 0>> &fifo_x1_from_off_chip_to_S0, int i0) {
#pragma HLS inline off
  if (i0 >= 100) {
    return;
  }
  for (int d0 = 0; d0 < 4; d0 += 4) {
#pragma HLS pipeline II = 1
    ap_axiu<128, 0, 0, 0> tmp_fifo = fifo_x1_from_off_chip_to_S0.read();
    uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
    x1[d0 + 0 + 0] = *(float *)(&tmp_0);
    uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
    x1[d0 + 0 + 1] = *(float *)(&tmp_1);
    uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
    x1[d0 + 0 + 2] = *(float *)(&tmp_2);
    uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
    x1[d0 + 0 + 3] = *(float *)(&tmp_3);
  }
}
void read_A1_FT0(float A1[4][400],
                 hls::stream<float16> &fifo_A1_from_off_chip_to_S0, int i0) {
#pragma HLS inline off
  if (i0 >= 100) {
    return;
  }
  for (int d0 = 0; d0 < 4; d0++) {
    for (int d1 = 0; d1 < 400; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_A1_from_off_chip_to_S0.read();
      A1[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      A1[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      A1[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      A1[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      A1[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      A1[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      A1[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      A1[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      A1[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      A1[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      A1[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      A1[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      A1[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      A1[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      A1[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      A1[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}
void read_A1_FT0(
    float A1[4][400],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A1_from_off_chip_to_S0, int i0) {
#pragma HLS inline off
  if (i0 >= 100) {
    return;
  }
  for (int d0 = 0; d0 < 4; d0++) {
    for (int d1 = 0; d1 < 400; d1 += 16) {
#pragma HLS pipeline II = 1
      ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_A1_from_off_chip_to_S0.read();
      uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
      A1[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
      uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
      A1[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
      uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
      A1[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
      uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
      A1[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
      uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
      A1[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
      uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
      A1[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
      uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
      A1[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
      uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
      A1[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
      uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
      A1[d0 + 0][d1 + 0 + 8] = *(float *)(&tmp_8);
      uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
      A1[d0 + 0][d1 + 0 + 9] = *(float *)(&tmp_9);
      uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
      A1[d0 + 0][d1 + 0 + 10] = *(float *)(&tmp_10);
      uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
      A1[d0 + 0][d1 + 0 + 11] = *(float *)(&tmp_11);
      uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
      A1[d0 + 0][d1 + 0 + 12] = *(float *)(&tmp_12);
      uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
      A1[d0 + 0][d1 + 0 + 13] = *(float *)(&tmp_13);
      uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
      A1[d0 + 0][d1 + 0 + 14] = *(float *)(&tmp_14);
      uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
      A1[d0 + 0][d1 + 0 + 15] = *(float *)(&tmp_15);
    }
  }
}
void read_C_FT1(float C[400],
                hls::stream<float16> &fifo_C_from_off_chip_to_S1) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 400; d0 += 16) {
#pragma HLS pipeline II = 1
    float16 tmp_fifo = fifo_C_from_off_chip_to_S1.read();
    C[d0 + 0 + 0] = tmp_fifo[0];
    C[d0 + 0 + 1] = tmp_fifo[1];
    C[d0 + 0 + 2] = tmp_fifo[2];
    C[d0 + 0 + 3] = tmp_fifo[3];
    C[d0 + 0 + 4] = tmp_fifo[4];
    C[d0 + 0 + 5] = tmp_fifo[5];
    C[d0 + 0 + 6] = tmp_fifo[6];
    C[d0 + 0 + 7] = tmp_fifo[7];
    C[d0 + 0 + 8] = tmp_fifo[8];
    C[d0 + 0 + 9] = tmp_fifo[9];
    C[d0 + 0 + 10] = tmp_fifo[10];
    C[d0 + 0 + 11] = tmp_fifo[11];
    C[d0 + 0 + 12] = tmp_fifo[12];
    C[d0 + 0 + 13] = tmp_fifo[13];
    C[d0 + 0 + 14] = tmp_fifo[14];
    C[d0 + 0 + 15] = tmp_fifo[15];
  }
}
void read_C_FT1(
    float C[400],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_C_from_off_chip_to_S1) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 400; d0 += 16) {
#pragma HLS pipeline II = 1
    ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_C_from_off_chip_to_S1.read();
    uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
    C[d0 + 0 + 0] = *(float *)(&tmp_0);
    uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
    C[d0 + 0 + 1] = *(float *)(&tmp_1);
    uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
    C[d0 + 0 + 2] = *(float *)(&tmp_2);
    uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
    C[d0 + 0 + 3] = *(float *)(&tmp_3);
    uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
    C[d0 + 0 + 4] = *(float *)(&tmp_4);
    uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
    C[d0 + 0 + 5] = *(float *)(&tmp_5);
    uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
    C[d0 + 0 + 6] = *(float *)(&tmp_6);
    uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
    C[d0 + 0 + 7] = *(float *)(&tmp_7);
    uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
    C[d0 + 0 + 8] = *(float *)(&tmp_8);
    uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
    C[d0 + 0 + 9] = *(float *)(&tmp_9);
    uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
    C[d0 + 0 + 10] = *(float *)(&tmp_10);
    uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
    C[d0 + 0 + 11] = *(float *)(&tmp_11);
    uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
    C[d0 + 0 + 12] = *(float *)(&tmp_12);
    uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
    C[d0 + 0 + 13] = *(float *)(&tmp_13);
    uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
    C[d0 + 0 + 14] = *(float *)(&tmp_14);
    uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
    C[d0 + 0 + 15] = *(float *)(&tmp_15);
  }
}
void read_x2_FT1(float x2[16],
                 hls::stream<float16> &fifo_x2_from_off_chip_to_S1, int i0) {
#pragma HLS inline off
  if (i0 >= 25) {
    return;
  }
  for (int d0 = 0; d0 < 16; d0 += 16) {
#pragma HLS pipeline II = 1
    float16 tmp_fifo = fifo_x2_from_off_chip_to_S1.read();
    x2[d0 + 0 + 0] = tmp_fifo[0];
    x2[d0 + 0 + 1] = tmp_fifo[1];
    x2[d0 + 0 + 2] = tmp_fifo[2];
    x2[d0 + 0 + 3] = tmp_fifo[3];
    x2[d0 + 0 + 4] = tmp_fifo[4];
    x2[d0 + 0 + 5] = tmp_fifo[5];
    x2[d0 + 0 + 6] = tmp_fifo[6];
    x2[d0 + 0 + 7] = tmp_fifo[7];
    x2[d0 + 0 + 8] = tmp_fifo[8];
    x2[d0 + 0 + 9] = tmp_fifo[9];
    x2[d0 + 0 + 10] = tmp_fifo[10];
    x2[d0 + 0 + 11] = tmp_fifo[11];
    x2[d0 + 0 + 12] = tmp_fifo[12];
    x2[d0 + 0 + 13] = tmp_fifo[13];
    x2[d0 + 0 + 14] = tmp_fifo[14];
    x2[d0 + 0 + 15] = tmp_fifo[15];
  }
}
void read_x2_FT1(
    float x2[16],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_x2_from_off_chip_to_S1, int i0) {
#pragma HLS inline off
  if (i0 >= 25) {
    return;
  }
  for (int d0 = 0; d0 < 16; d0 += 16) {
#pragma HLS pipeline II = 1
    ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_x2_from_off_chip_to_S1.read();
    uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
    x2[d0 + 0 + 0] = *(float *)(&tmp_0);
    uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
    x2[d0 + 0 + 1] = *(float *)(&tmp_1);
    uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
    x2[d0 + 0 + 2] = *(float *)(&tmp_2);
    uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
    x2[d0 + 0 + 3] = *(float *)(&tmp_3);
    uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
    x2[d0 + 0 + 4] = *(float *)(&tmp_4);
    uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
    x2[d0 + 0 + 5] = *(float *)(&tmp_5);
    uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
    x2[d0 + 0 + 6] = *(float *)(&tmp_6);
    uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
    x2[d0 + 0 + 7] = *(float *)(&tmp_7);
    uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
    x2[d0 + 0 + 8] = *(float *)(&tmp_8);
    uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
    x2[d0 + 0 + 9] = *(float *)(&tmp_9);
    uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
    x2[d0 + 0 + 10] = *(float *)(&tmp_10);
    uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
    x2[d0 + 0 + 11] = *(float *)(&tmp_11);
    uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
    x2[d0 + 0 + 12] = *(float *)(&tmp_12);
    uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
    x2[d0 + 0 + 13] = *(float *)(&tmp_13);
    uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
    x2[d0 + 0 + 14] = *(float *)(&tmp_14);
    uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
    x2[d0 + 0 + 15] = *(float *)(&tmp_15);
  }
}
void read_A2_FT1(float A2[400][16],
                 hls::stream<float16> &fifo_A2_from_off_chip_to_S1, int i0) {
#pragma HLS inline off
  if (i0 >= 25) {
    return;
  }
  for (int d0 = 0; d0 < 400; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_A2_from_off_chip_to_S1.read();
      A2[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      A2[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      A2[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      A2[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      A2[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      A2[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      A2[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      A2[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      A2[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      A2[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      A2[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      A2[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      A2[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      A2[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      A2[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      A2[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}
void read_A2_FT1(
    float A2[400][16],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A2_from_off_chip_to_S1, int i0) {
#pragma HLS inline off
  if (i0 >= 25) {
    return;
  }
  for (int d0 = 0; d0 < 400; d0++) {
    for (int d1 = 0; d1 < 16; d1 += 16) {
#pragma HLS pipeline II = 1
      ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_A2_from_off_chip_to_S1.read();
      uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
      A2[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
      uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
      A2[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
      uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
      A2[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
      uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
      A2[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
      uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
      A2[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
      uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
      A2[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
      uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
      A2[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
      uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
      A2[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
      uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
      A2[d0 + 0][d1 + 0 + 8] = *(float *)(&tmp_8);
      uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
      A2[d0 + 0][d1 + 0 + 9] = *(float *)(&tmp_9);
      uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
      A2[d0 + 0][d1 + 0 + 10] = *(float *)(&tmp_10);
      uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
      A2[d0 + 0][d1 + 0 + 11] = *(float *)(&tmp_11);
      uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
      A2[d0 + 0][d1 + 0 + 12] = *(float *)(&tmp_12);
      uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
      A2[d0 + 0][d1 + 0 + 13] = *(float *)(&tmp_13);
      uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
      A2[d0 + 0][d1 + 0 + 14] = *(float *)(&tmp_14);
      uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
      A2[d0 + 0][d1 + 0 + 15] = *(float *)(&tmp_15);
    }
  }
}
void write_x1_FT0(float x1[4], hls::stream<float4> &fifo_x1_to_off_chip,
                  int i0) {
#pragma HLS inline off
  if (i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 4; d0 += 4) {
#pragma HLS pipeline II = 1
    float4 tmp_fifo;
    tmp_fifo[0] = x1[d0 + 0 + 0];
    tmp_fifo[1] = x1[d0 + 0 + 1];
    tmp_fifo[2] = x1[d0 + 0 + 2];
    tmp_fifo[3] = x1[d0 + 0 + 3];
    fifo_x1_to_off_chip.write(tmp_fifo);
  }
}
void write_x1_FT0(float x1[4],
                  hls::stream<ap_axiu<128, 0, 0, 0>> &fifo_x1_to_off_chip,
                  int i0) {
#pragma HLS inline off
  if (i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 4; d0 += 4) {
#pragma HLS pipeline II = 1
    ap_axiu<128, 0, 0, 0> tmp_fifo;
    float tmp_0 = x1[d0 + 0 + 0];
    tmp_fifo.data.range(31, 0) = *(uint32_t *)(&tmp_0);
    float tmp_1 = x1[d0 + 0 + 1];
    tmp_fifo.data.range(63, 32) = *(uint32_t *)(&tmp_1);
    float tmp_2 = x1[d0 + 0 + 2];
    tmp_fifo.data.range(95, 64) = *(uint32_t *)(&tmp_2);
    float tmp_3 = x1[d0 + 0 + 3];
    tmp_fifo.data.range(127, 96) = *(uint32_t *)(&tmp_3);
    fifo_x1_to_off_chip.write(tmp_fifo);
  }
}
void write_x2_FT1(float x2[16], hls::stream<float16> &fifo_x2_to_off_chip,
                  int i0) {
#pragma HLS inline off
  if (i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 16; d0 += 16) {
#pragma HLS pipeline II = 1
    float16 tmp_fifo;
    tmp_fifo[0] = x2[d0 + 0 + 0];
    tmp_fifo[1] = x2[d0 + 0 + 1];
    tmp_fifo[2] = x2[d0 + 0 + 2];
    tmp_fifo[3] = x2[d0 + 0 + 3];
    tmp_fifo[4] = x2[d0 + 0 + 4];
    tmp_fifo[5] = x2[d0 + 0 + 5];
    tmp_fifo[6] = x2[d0 + 0 + 6];
    tmp_fifo[7] = x2[d0 + 0 + 7];
    tmp_fifo[8] = x2[d0 + 0 + 8];
    tmp_fifo[9] = x2[d0 + 0 + 9];
    tmp_fifo[10] = x2[d0 + 0 + 10];
    tmp_fifo[11] = x2[d0 + 0 + 11];
    tmp_fifo[12] = x2[d0 + 0 + 12];
    tmp_fifo[13] = x2[d0 + 0 + 13];
    tmp_fifo[14] = x2[d0 + 0 + 14];
    tmp_fifo[15] = x2[d0 + 0 + 15];
    fifo_x2_to_off_chip.write(tmp_fifo);
  }
}
void write_x2_FT1(float x2[16],
                  hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_x2_to_off_chip,
                  int i0) {
#pragma HLS inline off
  if (i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 16; d0 += 16) {
#pragma HLS pipeline II = 1
    ap_axiu<512, 0, 0, 0> tmp_fifo;
    float tmp_0 = x2[d0 + 0 + 0];
    tmp_fifo.data.range(31, 0) = *(uint32_t *)(&tmp_0);
    float tmp_1 = x2[d0 + 0 + 1];
    tmp_fifo.data.range(63, 32) = *(uint32_t *)(&tmp_1);
    float tmp_2 = x2[d0 + 0 + 2];
    tmp_fifo.data.range(95, 64) = *(uint32_t *)(&tmp_2);
    float tmp_3 = x2[d0 + 0 + 3];
    tmp_fifo.data.range(127, 96) = *(uint32_t *)(&tmp_3);
    float tmp_4 = x2[d0 + 0 + 4];
    tmp_fifo.data.range(159, 128) = *(uint32_t *)(&tmp_4);
    float tmp_5 = x2[d0 + 0 + 5];
    tmp_fifo.data.range(191, 160) = *(uint32_t *)(&tmp_5);
    float tmp_6 = x2[d0 + 0 + 6];
    tmp_fifo.data.range(223, 192) = *(uint32_t *)(&tmp_6);
    float tmp_7 = x2[d0 + 0 + 7];
    tmp_fifo.data.range(255, 224) = *(uint32_t *)(&tmp_7);
    float tmp_8 = x2[d0 + 0 + 8];
    tmp_fifo.data.range(287, 256) = *(uint32_t *)(&tmp_8);
    float tmp_9 = x2[d0 + 0 + 9];
    tmp_fifo.data.range(319, 288) = *(uint32_t *)(&tmp_9);
    float tmp_10 = x2[d0 + 0 + 10];
    tmp_fifo.data.range(351, 320) = *(uint32_t *)(&tmp_10);
    float tmp_11 = x2[d0 + 0 + 11];
    tmp_fifo.data.range(383, 352) = *(uint32_t *)(&tmp_11);
    float tmp_12 = x2[d0 + 0 + 12];
    tmp_fifo.data.range(415, 384) = *(uint32_t *)(&tmp_12);
    float tmp_13 = x2[d0 + 0 + 13];
    tmp_fifo.data.range(447, 416) = *(uint32_t *)(&tmp_13);
    float tmp_14 = x2[d0 + 0 + 14];
    tmp_fifo.data.range(479, 448) = *(uint32_t *)(&tmp_14);
    float tmp_15 = x2[d0 + 0 + 15];
    tmp_fifo.data.range(511, 480) = *(uint32_t *)(&tmp_15);
    fifo_x2_to_off_chip.write(tmp_fifo);
  }
}

void kernel_nlp_slr0(float4 vx1_for_task0[100], float16 vA1_for_task0[10000],
                     float16 vB_for_task0[25], float16 vx2_for_task1[25],
                     float16 vA2_for_task1[10000], float16 vC_for_task1[25]) {
#pragma HLS INTERFACE m_axi port = vx1_for_task0 offset = slave bundle =       \
    kernel_vx1_for_task0
#pragma HLS INTERFACE m_axi port = vA1_for_task0 offset = slave bundle =       \
    kernel_vA1_for_task0
#pragma HLS INTERFACE m_axi port = vB_for_task0 offset = slave bundle =        \
    kernel_vB_for_task0
#pragma HLS INTERFACE m_axi port = vx2_for_task1 offset = slave bundle =       \
    kernel_vx2_for_task1
#pragma HLS INTERFACE m_axi port = vA2_for_task1 offset = slave bundle =       \
    kernel_vA2_for_task1
#pragma HLS INTERFACE m_axi port = vC_for_task1 offset = slave bundle =        \
    kernel_vC_for_task1
#pragma HLS INTERFACE s_axilite port = vx1_for_task0 bundle = control
#pragma HLS INTERFACE s_axilite port = vA1_for_task0 bundle = control
#pragma HLS INTERFACE s_axilite port = vB_for_task0 bundle = control
#pragma HLS INTERFACE s_axilite port = vx2_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vA2_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vC_for_task1 bundle = control
#pragma HLS DATA_PACK VARIABLE = vx1_for_task0
#pragma HLS DATA_PACK VARIABLE = vA1_for_task0
#pragma HLS DATA_PACK VARIABLE = vB_for_task0
#pragma HLS DATA_PACK VARIABLE = vx2_for_task1
#pragma HLS DATA_PACK VARIABLE = vA2_for_task1
#pragma HLS DATA_PACK VARIABLE = vC_for_task1
#pragma HLS INTERFACE s_axilite port = return bundle = control
#pragma HLS dataflow
  hls::stream<float4> fifo_x1_to_off_chip;
#pragma HLS stream variable = fifo_x1_to_off_chip depth = 1024
  hls::stream<float16> fifo_x2_to_off_chip;
#pragma HLS stream variable = fifo_x2_to_off_chip depth = 1024
  hls::stream<float16> fifo_A2_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_A2_from_off_chip_to_S1 depth = 1024
  hls::stream<float16> fifo_x2_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_x2_from_off_chip_to_S1 depth = 1024
  hls::stream<float16> fifo_C_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_C_from_off_chip_to_S1 depth = 1024
  hls::stream<float4> fifo_x1_from_off_chip_to_S0;
#pragma HLS stream variable = fifo_x1_from_off_chip_to_S0 depth = 1024
  hls::stream<float16> fifo_B_from_off_chip_to_S0;
#pragma HLS stream variable = fifo_B_from_off_chip_to_S0 depth = 1024
  hls::stream<float16> fifo_A1_from_off_chip_to_S0;
#pragma HLS stream variable = fifo_A1_from_off_chip_to_S0 depth = 1024
  load_vA1_for_task0(fifo_A1_from_off_chip_to_S0, vA1_for_task0);
  load_vB_for_task0(fifo_B_from_off_chip_to_S0, vB_for_task0);
  load_vx1_for_task0(fifo_x1_from_off_chip_to_S0, vx1_for_task0);
  load_vC_for_task1(fifo_C_from_off_chip_to_S1, vC_for_task1);
  load_vx2_for_task1(fifo_x2_from_off_chip_to_S1, vx2_for_task1);
  load_vA2_for_task1(fifo_A2_from_off_chip_to_S1, vA2_for_task1);
  FT0_level0(fifo_A1_from_off_chip_to_S0, fifo_B_from_off_chip_to_S0,
             fifo_x1_from_off_chip_to_S0, fifo_x1_to_off_chip);
  FT1_level0(fifo_C_from_off_chip_to_S1, fifo_x2_from_off_chip_to_S1,
             fifo_A2_from_off_chip_to_S1, fifo_x2_to_off_chip);
  store_vx2_for_task1(fifo_x2_to_off_chip, vx2_for_task1);
  store_vx1_for_task0(fifo_x1_to_off_chip, vx1_for_task0);
}
