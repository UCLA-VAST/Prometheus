#include "output.h"

#define EXTERN_C 1

/****************************************************
 This file was automatically generated by Prometheus
****************************************************/
void load_vA_for_task1(hls::stream<float16>& fifo_A_from_off_chip_to_S1,
                       float16 vA[2340]) {
#pragma HLS inline off
    for (int i = 0; i < 2340; i++) {
#pragma HLS pipeline II = 1
        fifo_A_from_off_chip_to_S1.write(vA[i]);
    }
}

void load_vB_for_task1(hls::stream<float16>& fifo_B_from_off_chip_to_S1,
                       float16 vB[2496]) {
#pragma HLS inline off
    for (int i = 0; i < 2496; i++) {
#pragma HLS pipeline II = 1
        fifo_B_from_off_chip_to_S1.write(vB[i]);
    }
}

void load_vD_for_task3(hls::stream<float8>& fifo_D_from_off_chip_to_S3,
                       float8 vD[6048]) {
#pragma HLS inline off
    for (int i = 0; i < 6048; i++) {
#pragma HLS pipeline II = 1
        fifo_D_from_off_chip_to_S3.write(vD[i]);
    }
}

void load_vC_for_task3(hls::stream<float16>& fifo_C_from_off_chip_to_S3,
                       float16 vC[2660]) {
#pragma HLS inline off
    for (int i = 0; i < 2660; i++) {
#pragma HLS pipeline II = 1
        fifo_C_from_off_chip_to_S3.write(vC[i]);
    }
}

void store_vE_for_task1(hls::stream<float16>& fifo_E_to_off_chip,
                        float16 vE[2160]) {
#pragma HLS inline off
    for (int i = 0; i < 2160; i++) {
#pragma HLS pipeline II = 1
        vE[i] = fifo_E_to_off_chip.read();
    }
}

void store_vF_for_task3(hls::stream<float8>& fifo_F_to_off_chip,
                        float8 vF[5130]) {
#pragma HLS inline off
    for (int i = 0; i < 5130; i++) {
#pragma HLS pipeline II = 1
        vF[i] = fifo_F_to_off_chip.read();
    }
}

void store_vG_for_task5(hls::stream<float8>& fifo_G_to_off_chip,
                        float8 vG[4860]) {
#pragma HLS inline off
    for (int i = 0; i < 4860; i++) {
#pragma HLS pipeline II = 1
        vG[i] = fifo_G_to_off_chip.read();
    }
}

void FT0_level0(hls::stream<float16>& fifo_E_from_task1_to_task5,
                hls::stream<float16>& fifo_A_from_off_chip_to_S1,
                hls::stream<float16>& fifo_B_from_off_chip_to_S1,
                hls::stream<float16>& fifo_E_to_off_chip) {
#pragma HLS inline off
    float A[180][208];
#pragma HLS array_partition variable = A cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = A cyclic factor = 1 dim = 2
    float B[208][192];
#pragma HLS array_partition variable = B cyclic factor = 1 dim = 1
#pragma HLS array_partition variable = B cyclic factor = 96 dim = 2
    read_A_FT0(A, fifo_A_from_off_chip_to_S1);
    read_B_FT0(B, fifo_B_from_off_chip_to_S1);
    for (int j0 = 0; j0 < 2; j0++) {
        if (j0 % 2 == 0) {
            FT0_level1(fifo_E_from_task1_to_task5, fifo_A_from_off_chip_to_S1,
                       fifo_B_from_off_chip_to_S1, fifo_E_to_off_chip, A, B,
                       j0);
        } else if (j0 % 2 == 1) {
            FT0_level1(fifo_E_from_task1_to_task5, fifo_A_from_off_chip_to_S1,
                       fifo_B_from_off_chip_to_S1, fifo_E_to_off_chip, A, B,
                       j0);
        }
    }
}
void FT0_level1(hls::stream<float16>& fifo_E_from_task1_to_task5,
                hls::stream<float16>& fifo_A_from_off_chip_to_S1,
                hls::stream<float16>& fifo_B_from_off_chip_to_S1,
                hls::stream<float16>& fifo_E_to_off_chip, float A[180][208],
                float B[208][192], int j0) {
#pragma HLS inline off
    float E_0[10][96];
#pragma HLS array_partition variable = E_0 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = E_0 cyclic factor = 96 dim = 2
    float E_1[10][96];
#pragma HLS array_partition variable = E_1 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = E_1 cyclic factor = 96 dim = 2
    float E_2[10][96];
#pragma HLS array_partition variable = E_2 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = E_2 cyclic factor = 96 dim = 2
    for (int i0 = 0; i0 < 18; i0++) {
        if (i0 % 3 == 0) {
            task0_intra(A, B, j0, E_0, i0);
            task1_intra(A, B, j0, E_0, i0);
            write_E_FT0(E_2, fifo_E_from_task1_to_task5, i0 - 1, j0);
            write_E_FT0(E_2, fifo_E_to_off_chip, i0 - 1, j0);
        } else if (i0 % 3 == 1) {
            task0_intra(A, B, j0, E_1, i0);
            task1_intra(A, B, j0, E_1, i0);
            write_E_FT0(E_0, fifo_E_from_task1_to_task5, i0 - 1, j0);
            write_E_FT0(E_0, fifo_E_to_off_chip, i0 - 1, j0);
        } else if (i0 % 3 == 2) {
            task0_intra(A, B, j0, E_2, i0);
            task1_intra(A, B, j0, E_2, i0);
            write_E_FT0(E_1, fifo_E_from_task1_to_task5, i0 - 1, j0);
            write_E_FT0(E_1, fifo_E_to_off_chip, i0 - 1, j0);
        }
    }
    write_E_FT0(E_2, fifo_E_from_task1_to_task5, 17, j0);
    write_E_FT0(E_2, fifo_E_to_off_chip, 17, j0);
}
void FT1_level0(hls::stream<float8>& fifo_F_from_task3_to_task5,
                hls::stream<float8>& fifo_D_from_off_chip_to_S3,
                hls::stream<float16>& fifo_C_from_off_chip_to_S3,
                hls::stream<float8>& fifo_F_to_off_chip) {
#pragma HLS inline off
    float D[224][216];
#pragma HLS array_partition variable = D cyclic factor = 4 dim = 1
#pragma HLS array_partition variable = D cyclic factor = 24 dim = 2
    read_D_FT1(D, fifo_D_from_off_chip_to_S3, 0);
    for (int j0 = 0; j0 < 9; j0++) {
        if (j0 % 2 == 0) {
            read_D_FT1(D, fifo_D_from_off_chip_to_S3, j0 + 1);
            FT1_level1(fifo_F_from_task3_to_task5, fifo_D_from_off_chip_to_S3,
                       fifo_C_from_off_chip_to_S3, fifo_F_to_off_chip, D, j0);
        } else if (j0 % 2 == 1) {
            read_D_FT1(D, fifo_D_from_off_chip_to_S3, j0 + 1);
            FT1_level1(fifo_F_from_task3_to_task5, fifo_D_from_off_chip_to_S3,
                       fifo_C_from_off_chip_to_S3, fifo_F_to_off_chip, D, j0);
        }
    }
}
void FT1_level1(hls::stream<float8>& fifo_F_from_task3_to_task5,
                hls::stream<float8>& fifo_D_from_off_chip_to_S3,
                hls::stream<float16>& fifo_C_from_off_chip_to_S3,
                hls::stream<float8>& fifo_F_to_off_chip, float D[224][216],
                int j0) {
#pragma HLS inline off
    float F_0[10][24];
#pragma HLS array_partition variable = F_0 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = F_0 cyclic factor = 24 dim = 2
    float F_1[10][24];
#pragma HLS array_partition variable = F_1 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = F_1 cyclic factor = 24 dim = 2
    float F_2[10][24];
#pragma HLS array_partition variable = F_2 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = F_2 cyclic factor = 24 dim = 2
    float C_0[190][224];
#pragma HLS array_partition variable = C_0 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = C_0 cyclic factor = 4 dim = 2
//     float C_1[10][224];
// #pragma HLS array_partition variable = C_1 cyclic factor = 10 dim = 1
// #pragma HLS array_partition variable = C_1 cyclic factor = 4 dim = 2
//     float C_2[10][224];
// #pragma HLS array_partition variable = C_2 cyclic factor = 10 dim = 1
// #pragma HLS array_partition variable = C_2 cyclic factor = 4 dim = 2
    read_C_FT1(C_0, fifo_C_from_off_chip_to_S3, 0, j0);
    for (int i0 = 0; i0 < 19; i0++) {
        if (i0 % 3 == 0) {
            read_C_FT1(C_0, fifo_C_from_off_chip_to_S3, i0 + 1, j0);
            task2_intra(D, j0, F_0, C_0, i0);
            task3_intra(D, j0, F_0, C_0, i0);
            write_F_FT1(F_2, fifo_F_from_task3_to_task5, i0 - 1, j0);
            write_F_FT1(F_2, fifo_F_to_off_chip, i0 - 1, j0);
        } else if (i0 % 3 == 1) {
            read_C_FT1(C_0, fifo_C_from_off_chip_to_S3, i0 + 1, j0);
            task2_intra(D, j0, F_1, C_0, i0);
            task3_intra(D, j0, F_1, C_0, i0);
            write_F_FT1(F_0, fifo_F_from_task3_to_task5, i0 - 1, j0);
            write_F_FT1(F_0, fifo_F_to_off_chip, i0 - 1, j0);
        } else if (i0 % 3 == 2) {
            read_C_FT1(C_0, fifo_C_from_off_chip_to_S3, i0 + 1, j0);
            task2_intra(D, j0, F_2, C_0, i0);
            task3_intra(D, j0, F_2, C_0, i0);
            write_F_FT1(F_1, fifo_F_from_task3_to_task5, i0 - 1, j0);
            write_F_FT1(F_1, fifo_F_to_off_chip, i0 - 1, j0);
        }
    }
    write_F_FT1(F_0, fifo_F_from_task3_to_task5, 18, j0);
    write_F_FT1(F_0, fifo_F_to_off_chip, 18, j0);
}
void FT2_level0(hls::stream<float16>& fifo_E_from_task1_to_task5,
                hls::stream<float8>& fifo_F_from_task3_to_task5,
                hls::stream<float8>& fifo_G_to_off_chip) {
#pragma HLS inline off
    float E[180][192];
#pragma HLS array_partition variable = E cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = E cyclic factor = 4 dim = 2
    float F[192][216];
#pragma HLS array_partition variable = F cyclic factor = 4 dim = 1
#pragma HLS array_partition variable = F cyclic factor = 24 dim = 2
    read_F_FT2(F, fifo_F_from_task3_to_task5, 0);
    for (int j0 = 0; j0 < 9; j0++) {
        if (j0 % 2 == 0) {
            read_F_FT2(F, fifo_F_from_task3_to_task5, j0 + 1);
            FT2_level1(fifo_E_from_task1_to_task5, fifo_F_from_task3_to_task5,
                       fifo_G_to_off_chip, E, F, j0);
        } else if (j0 % 2 == 1) {
            read_F_FT2(F, fifo_F_from_task3_to_task5, j0 + 1);
            FT2_level1(fifo_E_from_task1_to_task5, fifo_F_from_task3_to_task5,
                       fifo_G_to_off_chip, E, F, j0);
        }
    }
}
void FT2_level1(hls::stream<float16>& fifo_E_from_task1_to_task5,
                hls::stream<float8>& fifo_F_from_task3_to_task5,
                hls::stream<float8>& fifo_G_to_off_chip, float E[180][192],
                float F[192][216], int j0) {
#pragma HLS inline off
    float G_0[10][24];
#pragma HLS array_partition variable = G_0 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = G_0 cyclic factor = 24 dim = 2
    float G_1[10][24];
#pragma HLS array_partition variable = G_1 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = G_1 cyclic factor = 24 dim = 2
    float G_2[10][24];
#pragma HLS array_partition variable = G_2 cyclic factor = 10 dim = 1
#pragma HLS array_partition variable = G_2 cyclic factor = 24 dim = 2
    read_E_FT2(E, fifo_E_from_task1_to_task5, 0, j0);
    for (int i0 = 0; i0 < 18; i0++) {
        if (i0 % 3 == 0) {
            read_E_FT2(E, fifo_E_from_task1_to_task5, i0 + 1, j0);
            task4_intra(E, F, j0, G_0, i0);
            task5_intra(E, F, j0, G_0, i0);
            write_G_FT2(G_2, fifo_G_to_off_chip, i0 - 1, j0);
        } else if (i0 % 3 == 1) {
            read_E_FT2(E, fifo_E_from_task1_to_task5, i0 + 1, j0);
            task4_intra(E, F, j0, G_1, i0);
            task5_intra(E, F, j0, G_1, i0);
            write_G_FT2(G_0, fifo_G_to_off_chip, i0 - 1, j0);
        } else if (i0 % 3 == 2) {
            read_E_FT2(E, fifo_E_from_task1_to_task5, i0 + 1, j0);
            task4_intra(E, F, j0, G_2, i0);
            task5_intra(E, F, j0, G_2, i0);
            write_G_FT2(G_1, fifo_G_to_off_chip, i0 - 1, j0);
        }
    }
    write_G_FT2(G_2, fifo_G_to_off_chip, 17, j0);
}
void task0_intra(float A[180][208], float B[208][192], int j0, float E[10][96],
                 int i0) {
#pragma HLS inline off
    int j;
    int i;
    for (int j1 = 0; j1 < 96; j1++) {
#pragma HLS unroll
        for (int i1 = 0; i1 < 10; i1++) {
#pragma HLS unroll
            j = j0 * 96 + j1;
            i = i0 * 10 + i1;
            E[i1][j1] = 0.0;
        }
    }
}

void task1_intra(float A[180][208], float B[208][192], int j0, float E[10][96],
                 int i0) {
#pragma HLS inline off
    int j;
    int i;
    int k;
    for (int k0 = 0; k0 < 208; k0++) {
#pragma HLS pipeline II = 2
        for (int j1 = 0; j1 < 96; j1++) {
#pragma HLS unroll
            for (int i1 = 0; i1 < 10; i1++) {
#pragma HLS unroll
                for (int k1 = 0; k1 < 1; k1++) {
#pragma HLS unroll
                    j = j0 * 96 + j1;
                    i = i0 * 10 + i1;
                    k = k0 * 1 + k1;
                    E[i1][j1] = E[i1][j1] + A[i][k] * B[k][j];
                }
            }
        }
    }
}

void task2_intra(float D[224][216], int j0, float F[10][24], float C[10][224],
                 int i0) {
#pragma HLS inline off
    int j;
    int i;
    for (int j1 = 0; j1 < 24; j1++) {
#pragma HLS unroll
        for (int i1 = 0; i1 < 10; i1++) {
#pragma HLS unroll
            j = j0 * 24 + j1;
            i = i0 * 10 + i1;
            F[i1][j1] = 0.0;
        }
    }
}

void task3_intra(float D[224][216], int j0, float F[10][24], float C[10][224],
                 int i0) {
#pragma HLS inline off
    int j;
    int i;
    int k;
    for (int k0 = 0; k0 < 55; k0++) {
#pragma HLS pipeline II = 2
        for (int j1 = 0; j1 < 24; j1++) {
#pragma HLS unroll
            for (int i1 = 0; i1 < 10; i1++) {
#pragma HLS unroll
                for (int k1 = 0; k1 < 4; k1++) {
#pragma HLS unroll
                    j = j0 * 24 + j1;
                    i = i0 * 10 + i1;
                    k = k0 * 4 + k1;
                    F[i1][j1] = F[i1][j1] + C[i][k] * D[k][j];
                }
            }
        }
    }
}

void task4_intra(float E[180][192], float F[192][216], int j0, float G[10][24],
                 int i0) {
#pragma HLS inline off
    int j;
    int i;
    for (int j1 = 0; j1 < 24; j1++) {
#pragma HLS unroll
        for (int i1 = 0; i1 < 10; i1++) {
#pragma HLS unroll
            j = j0 * 24 + j1;
            i = i0 * 10 + i1;
            G[i1][j1] = 0.0;
        }
    }
}

void task5_intra(float E[180][192], float F[192][216], int j0, float G[10][24],
                 int i0) {
#pragma HLS inline off
    int j;
    int i;
    int k;
    for (int k0 = 0; k0 < 47; k0++) {
#pragma HLS pipeline II = 2
        for (int j1 = 0; j1 < 24; j1++) {
#pragma HLS unroll
            for (int i1 = 0; i1 < 10; i1++) {
#pragma HLS unroll
                for (int k1 = 0; k1 < 4; k1++) {
#pragma HLS unroll
                    j = j0 * 24 + j1;
                    i = i0 * 10 + i1;
                    k = k0 * 4 + k1;
                    G[i1][j1] = G[i1][j1] + E[i][k] * F[k][j];
                }
            }
        }
    }

    for (int k0 = 47; k0 < 48; k0++) {
#pragma HLS pipeline II = 2
        for (int j1 = 0; j1 < 24; j1++) {
#pragma HLS unroll
            for (int i1 = 0; i1 < 10; i1++) {
#pragma HLS unroll
                for (int k1 = 0; k1 < 2; k1++) {
#pragma HLS unroll
                    j = j0 * 24 + j1;
                    i = i0 * 10 + i1;
                    k = k0 * 4 + k1;
                    G[i1][j1] = G[i1][j1] + E[i][k] * F[k][j];
                }
            }
        }
    }
}

void read_A_FT0(float A[180][208],
                hls::stream<float16>& fifo_A_from_off_chip_to_S1) {
#pragma HLS inline off
    for (int d0 = 0; d0 < 180; d0++) {
        for (int d1 = 0; d1 < 208; d1 += 16) {
#pragma HLS pipeline II = 1
            float16 tmp_fifo = fifo_A_from_off_chip_to_S1.read();
            A[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
            A[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
            A[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
            A[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
            A[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
            A[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
            A[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
            A[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
            A[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
            A[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
            A[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
            A[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
            A[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
            A[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
            A[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
            A[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
        }
    }
}

void read_B_FT0(float B[208][192],
                hls::stream<float16>& fifo_B_from_off_chip_to_S1) {
#pragma HLS inline off
    for (int d0 = 0; d0 < 208; d0++) {
        for (int d1 = 0; d1 < 192; d1 += 16) {
#pragma HLS pipeline II = 1
            float16 tmp_fifo = fifo_B_from_off_chip_to_S1.read();
            B[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
            B[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
            B[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
            B[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
            B[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
            B[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
            B[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
            B[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
            B[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
            B[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
            B[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
            B[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
            B[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
            B[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
            B[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
            B[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
        }
    }
}

void read_D_FT1(float D[224][216],
                hls::stream<float8>& fifo_D_from_off_chip_to_S3, int j0) {
#pragma HLS inline off
    if (j0 >= 9) {
        return;
    }
    for (int d0 = 0; d0 < 224; d0++) {
        for (int d1 = 0; d1 < 24; d1 += 8) {
#pragma HLS pipeline II = 1
            float8 tmp_fifo = fifo_D_from_off_chip_to_S3.read();
            D[d0 + 0][d1 + j0 * 24 + 0] = tmp_fifo[0];
            D[d0 + 0][d1 + j0 * 24 + 1] = tmp_fifo[1];
            D[d0 + 0][d1 + j0 * 24 + 2] = tmp_fifo[2];
            D[d0 + 0][d1 + j0 * 24 + 3] = tmp_fifo[3];
            D[d0 + 0][d1 + j0 * 24 + 4] = tmp_fifo[4];
            D[d0 + 0][d1 + j0 * 24 + 5] = tmp_fifo[5];
            D[d0 + 0][d1 + j0 * 24 + 6] = tmp_fifo[6];
            D[d0 + 0][d1 + j0 * 24 + 7] = tmp_fifo[7];
        }
    }
}

void read_C_FT1(float C[190][224],
                hls::stream<float16>& fifo_C_from_off_chip_to_S3, int i0,
                int j0) {
#pragma HLS inline off
    if (j0 > 0 || i0 >= 19) {
        return;
    }
    for (int d0 = 0; d0 < 10; d0++) {
        for (int d1 = 0; d1 < 224; d1 += 16) {
#pragma HLS pipeline II = 1
            float16 tmp_fifo = fifo_C_from_off_chip_to_S3.read();
            C[d0 + i0*10][d1 + 0 + 0] = tmp_fifo[0];
            C[d0 + i0*10][d1 + 0 + 1] = tmp_fifo[1];
            C[d0 + i0*10][d1 + 0 + 2] = tmp_fifo[2];
            C[d0 + i0*10][d1 + 0 + 3] = tmp_fifo[3];
            C[d0 + i0*10][d1 + 0 + 4] = tmp_fifo[4];
            C[d0 + i0*10][d1 + 0 + 5] = tmp_fifo[5];
            C[d0 + i0*10][d1 + 0 + 6] = tmp_fifo[6];
            C[d0 + i0*10][d1 + 0 + 7] = tmp_fifo[7];
            C[d0 + i0*10][d1 + 0 + 8] = tmp_fifo[8];
            C[d0 + i0*10][d1 + 0 + 9] = tmp_fifo[9];
            C[d0 + i0*10][d1 + 0 + 10] = tmp_fifo[10];
            C[d0 + i0*10][d1 + 0 + 11] = tmp_fifo[11];
            C[d0 + i0*10][d1 + 0 + 12] = tmp_fifo[12];
            C[d0 + i0*10][d1 + 0 + 13] = tmp_fifo[13];
            C[d0 + i0*10][d1 + 0 + 14] = tmp_fifo[14];
            C[d0 + i0*10][d1 + 0 + 15] = tmp_fifo[15];
        }
    }
}

void read_F_FT2(float F[192][216],
                hls::stream<float8>& fifo_F_from_task3_to_task5, int j0) {
#pragma HLS inline off
    if (j0 >= 9) {
        return;
    }
    for (int d0 = 0; d0 < 190; d0++) {
        for (int d1 = 0; d1 < 24; d1 += 8) {
#pragma HLS pipeline II = 1
            float8 tmp_fifo = fifo_F_from_task3_to_task5.read();
            F[d0 + 0][d1 + j0 * 24 + 0] = tmp_fifo[0];
            F[d0 + 0][d1 + j0 * 24 + 1] = tmp_fifo[1];
            F[d0 + 0][d1 + j0 * 24 + 2] = tmp_fifo[2];
            F[d0 + 0][d1 + j0 * 24 + 3] = tmp_fifo[3];
            F[d0 + 0][d1 + j0 * 24 + 4] = tmp_fifo[4];
            F[d0 + 0][d1 + j0 * 24 + 5] = tmp_fifo[5];
            F[d0 + 0][d1 + j0 * 24 + 6] = tmp_fifo[6];
            F[d0 + 0][d1 + j0 * 24 + 7] = tmp_fifo[7];
        }
    }
}

void read_E_FT2(float E[180][192],
                hls::stream<float16>& fifo_E_from_task1_to_task5, int i0,
                int j0) {
#pragma HLS inline off
    if (j0 > 0 || i0 >= 18) {
        return;
    }
    
    for (int d1_0 = 0; d1_0 < 2; d1_0 ++) {
        // for (int d0_0 = 0; d0_0 < 18; d0_0++) {
    for (int d0_1 = 0; d0_1 < 10; d0_1++) {
        for (int d1_1 = 0; d1_1 < 96; d1_1 += 16) {
#pragma HLS pipeline II = 1
            int d0 = d0_1;
            int d1 = d1_0 * 96 + d1_1;
            float16 tmp_fifo = fifo_E_from_task1_to_task5.read();
            E[d0 + i0 * 10][d1 + 0 + 0] = tmp_fifo[0];
            E[d0 + i0 * 10][d1 + 0 + 1] = tmp_fifo[1];
            E[d0 + i0 * 10][d1 + 0 + 2] = tmp_fifo[2];
            E[d0 + i0 * 10][d1 + 0 + 3] = tmp_fifo[3];
            E[d0 + i0 * 10][d1 + 0 + 4] = tmp_fifo[4];
            E[d0 + i0 * 10][d1 + 0 + 5] = tmp_fifo[5];
            E[d0 + i0 * 10][d1 + 0 + 6] = tmp_fifo[6];
            E[d0 + i0 * 10][d1 + 0 + 7] = tmp_fifo[7];
            E[d0 + i0 * 10][d1 + 0 + 8] = tmp_fifo[8];
            E[d0 + i0 * 10][d1 + 0 + 9] = tmp_fifo[9];
            E[d0 + i0 * 10][d1 + 0 + 10] = tmp_fifo[10];
            E[d0 + i0 * 10][d1 + 0 + 11] = tmp_fifo[11];
            E[d0 + i0 * 10][d1 + 0 + 12] = tmp_fifo[12];
            E[d0 + i0 * 10][d1 + 0 + 13] = tmp_fifo[13];
            E[d0 + i0 * 10][d1 + 0 + 14] = tmp_fifo[14];
            E[d0 + i0 * 10][d1 + 0 + 15] = tmp_fifo[15];
        }
    }}}
// }

void write_E_FT0(float E[10][96],
                 hls::stream<float16>& fifo_E_from_task1_to_task5, int i0,
                 int j0) {
#pragma HLS inline off
    if (i0 < 0 || j0 < 0) {
        return;
    }
    for (int d0 = 0; d0 < 10; d0++) {
        for (int d1 = 0; d1 < 96; d1 += 16) {
#pragma HLS pipeline II = 1
            float16 tmp_fifo;
            tmp_fifo[0] = E[d0 + 0][d1 + 0 + 0];
            tmp_fifo[1] = E[d0 + 0][d1 + 0 + 1];
            tmp_fifo[2] = E[d0 + 0][d1 + 0 + 2];
            tmp_fifo[3] = E[d0 + 0][d1 + 0 + 3];
            tmp_fifo[4] = E[d0 + 0][d1 + 0 + 4];
            tmp_fifo[5] = E[d0 + 0][d1 + 0 + 5];
            tmp_fifo[6] = E[d0 + 0][d1 + 0 + 6];
            tmp_fifo[7] = E[d0 + 0][d1 + 0 + 7];
            tmp_fifo[8] = E[d0 + 0][d1 + 0 + 8];
            tmp_fifo[9] = E[d0 + 0][d1 + 0 + 9];
            tmp_fifo[10] = E[d0 + 0][d1 + 0 + 10];
            tmp_fifo[11] = E[d0 + 0][d1 + 0 + 11];
            tmp_fifo[12] = E[d0 + 0][d1 + 0 + 12];
            tmp_fifo[13] = E[d0 + 0][d1 + 0 + 13];
            tmp_fifo[14] = E[d0 + 0][d1 + 0 + 14];
            tmp_fifo[15] = E[d0 + 0][d1 + 0 + 15];
            fifo_E_from_task1_to_task5.write(tmp_fifo);
        }
    }
}

void write_F_FT1(float F[10][24],
                 hls::stream<float8>& fifo_F_from_task3_to_task5, int i0,
                 int j0) {
#pragma HLS inline off
    if (i0 < 0 || j0 < 0) {
        return;
    }
    for (int d0 = 0; d0 < 10; d0++) {
        for (int d1 = 0; d1 < 24; d1 += 8) {
#pragma HLS pipeline II = 1
            float8 tmp_fifo;
            tmp_fifo[0] = F[d0 + 0][d1 + 0 + 0];
            tmp_fifo[1] = F[d0 + 0][d1 + 0 + 1];
            tmp_fifo[2] = F[d0 + 0][d1 + 0 + 2];
            tmp_fifo[3] = F[d0 + 0][d1 + 0 + 3];
            tmp_fifo[4] = F[d0 + 0][d1 + 0 + 4];
            tmp_fifo[5] = F[d0 + 0][d1 + 0 + 5];
            tmp_fifo[6] = F[d0 + 0][d1 + 0 + 6];
            tmp_fifo[7] = F[d0 + 0][d1 + 0 + 7];
            fifo_F_from_task3_to_task5.write(tmp_fifo);
        }
    }
}

void write_G_FT2(float G[10][24], hls::stream<float8>& fifo_G_to_off_chip,
                 int i0, int j0) {
#pragma HLS inline off
    if (i0 < 0 || j0 < 0) {
        return;
    }
    for (int d0 = 0; d0 < 10; d0++) {
        for (int d1 = 0; d1 < 24; d1 += 8) {
#pragma HLS pipeline II = 1
            float8 tmp_fifo;
            tmp_fifo[0] = G[d0 + 0][d1 + 0 + 0];
            tmp_fifo[1] = G[d0 + 0][d1 + 0 + 1];
            tmp_fifo[2] = G[d0 + 0][d1 + 0 + 2];
            tmp_fifo[3] = G[d0 + 0][d1 + 0 + 3];
            tmp_fifo[4] = G[d0 + 0][d1 + 0 + 4];
            tmp_fifo[5] = G[d0 + 0][d1 + 0 + 5];
            tmp_fifo[6] = G[d0 + 0][d1 + 0 + 6];
            tmp_fifo[7] = G[d0 + 0][d1 + 0 + 7];
            fifo_G_to_off_chip.write(tmp_fifo);
        }
    }
}

void kernel_nlp(float16 vE_for_task1[2160], float16 vA_for_task1[2340],
                float16 vB_for_task1[2496], float8 vF_for_task3[5184],
                float16 vC_for_task3[2660], float8 vD_for_task3[6048],
                float8 vG_for_task5[4860]) {
#pragma HLS INTERFACE m_axi port = vE_for_task1 offset = slave bundle = \
    kernel_vE_for_task1
#pragma HLS INTERFACE m_axi port = vA_for_task1 offset = slave bundle = \
    kernel_vA_for_task1
#pragma HLS INTERFACE m_axi port = vB_for_task1 offset = slave bundle = \
    kernel_vB_for_task1
#pragma HLS INTERFACE m_axi port = vF_for_task3 offset = slave bundle = \
    kernel_vF_for_task3
#pragma HLS INTERFACE m_axi port = vC_for_task3 offset = slave bundle = \
    kernel_vC_for_task3
#pragma HLS INTERFACE m_axi port = vD_for_task3 offset = slave bundle = \
    kernel_vD_for_task3
#pragma HLS INTERFACE m_axi port = vG_for_task5 offset = slave bundle = \
    kernel_vG_for_task5
#pragma HLS INTERFACE s_axilite port = vE_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vA_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vB_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vF_for_task3 bundle = control
#pragma HLS INTERFACE s_axilite port = vC_for_task3 bundle = control
#pragma HLS INTERFACE s_axilite port = vD_for_task3 bundle = control
#pragma HLS INTERFACE s_axilite port = vG_for_task5 bundle = control
#pragma HLS DATA_PACK VARIABLE = vE_for_task1
#pragma HLS DATA_PACK VARIABLE = vA_for_task1
#pragma HLS DATA_PACK VARIABLE = vB_for_task1
#pragma HLS DATA_PACK VARIABLE = vF_for_task3
#pragma HLS DATA_PACK VARIABLE = vC_for_task3
#pragma HLS DATA_PACK VARIABLE = vD_for_task3
#pragma HLS DATA_PACK VARIABLE = vG_for_task5
#pragma HLS INTERFACE s_axilite port = return bundle = control

#pragma HLS dataflow

    hls::stream<float16> fifo_E_from_task1_to_task5;
#pragma HLS stream variable = fifo_E_from_task1_to_task5 depth = 512
    hls::stream<float8> fifo_F_from_task3_to_task5;
#pragma HLS stream variable = fifo_F_from_task3_to_task5 depth = 512
    hls::stream<float16> fifo_A_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_A_from_off_chip_to_S1 depth = 512
    hls::stream<float16> fifo_B_from_off_chip_to_S1;
#pragma HLS stream variable = fifo_B_from_off_chip_to_S1 depth = 512
    hls::stream<float8> fifo_D_from_off_chip_to_S3;
#pragma HLS stream variable = fifo_D_from_off_chip_to_S3 depth = 512
    hls::stream<float16> fifo_C_from_off_chip_to_S3;
#pragma HLS stream variable = fifo_C_from_off_chip_to_S3 depth = 512
    hls::stream<float16> fifo_E_to_off_chip;
#pragma HLS stream variable = fifo_E_to_off_chip depth = 512
    hls::stream<float8> fifo_F_to_off_chip;
#pragma HLS stream variable = fifo_F_to_off_chip depth = 512
    hls::stream<float8> fifo_G_to_off_chip;
#pragma HLS stream variable = fifo_G_to_off_chip depth = 512

    load_vA_for_task1(fifo_A_from_off_chip_to_S1, vA_for_task1);
    load_vB_for_task1(fifo_B_from_off_chip_to_S1, vB_for_task1);
    load_vD_for_task3(fifo_D_from_off_chip_to_S3, vD_for_task3);
    load_vC_for_task3(fifo_C_from_off_chip_to_S3, vC_for_task3);

    FT0_level0(fifo_E_from_task1_to_task5, fifo_A_from_off_chip_to_S1,
               fifo_B_from_off_chip_to_S1, fifo_E_to_off_chip);
    FT1_level0(fifo_F_from_task3_to_task5, fifo_D_from_off_chip_to_S3,
               fifo_C_from_off_chip_to_S3, fifo_F_to_off_chip);
    FT2_level0(fifo_E_from_task1_to_task5, fifo_F_from_task3_to_task5,
               fifo_G_to_off_chip);

    store_vE_for_task1(fifo_E_to_off_chip, vE_for_task1);
    store_vF_for_task3(fifo_F_to_off_chip, vF_for_task3);
    store_vG_for_task5(fifo_G_to_off_chip, vG_for_task5);
}
